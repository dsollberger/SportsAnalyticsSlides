[
  {
    "objectID": "posts/02_-_Exploring Data/02_exploring_data.html",
    "href": "posts/02_-_Exploring Data/02_exploring_data.html",
    "title": "02_-_Exploring Data",
    "section": "",
    "text": "The tidyverse suite of packages are streamlined to make data science processes easier. We can load the packages with the library() command.\n\nlibrary(\"tidyverse\")\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.1\n✔ readr   2.1.2     ✔ forcats 0.5.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()"
  },
  {
    "objectID": "posts/02_-_Exploring Data/02_exploring_data.html#load-the-data",
    "href": "posts/02_-_Exploring Data/02_exploring_data.html#load-the-data",
    "title": "02_-_Exploring Data",
    "section": "Load the Data",
    "text": "Load the Data\nSince we have CSV files (comma-separated values), the read_csv() command in the readr package will be convenient here. I tend to save data set into a variable df (stands for “data frame”).\nToday’s data set comes from Baseball Reference. In particular, we are looking at the team batting statistics for the 2021 season.\n\ndf <- readr::read_csv(\"baseball_2021_batting.csv\")\n\nRows: 32 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): Tm\ndbl (28): #Bat, BatAge, R/G, G, PA, AB, R, H, 2B, 3B, HR, RBI, SB, CS, BB, S...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "slides.html",
    "href": "slides.html",
    "title": "SportsAnalyticsSlides",
    "section": "",
    "text": "11: Confidence Intervals\n\n\n\n\n\n\n\n\n\n\n\n\nNov 28, 2023\n\n\nDerek Sollberger\n\n\n\n\n\n\n  \n\n\n\n\n10: Literature Review\n\n\n\n\n\n\n\n\n\n\n\n\nNov 16, 2023\n\n\nDerek Sollberger\n\n\n\n\n\n\n  \n\n\n\n\n9: Advanced Statistics\n\n\n\n\n\n\n\n\n\n\n\n\nNov 14, 2023\n\n\nDerek Sollberger\n\n\n\n\n\n\n  \n\n\n\n\n8: Rankings\n\n\n\n\n\n\n\n\n\n\n\n\nNov 9, 2023\n\n\nDerek Sollberger\n\n\n\n\n\n\n  \n\n\n\n\n7: Linear Regression\n\n\n\n\n\n\n\n\n\n\n\n\nNov 7, 2023\n\n\nDerek Sollberger\n\n\n\n\n\n\n  \n\n\n\n\n6: Scatterplots\n\n\n\n\n\n\n\n\n\n\n\n\nNov 2, 2023\n\n\nDerek Sollberger\n\n\n\n\n\n\n  \n\n\n\n\n5: Barplots\n\n\n\n\n\n\n\n\n\n\n\n\nOct 31, 2023\n\n\nDerek Sollberger\n\n\n\n\n\n\n  \n\n\n\n\n04: Boxplots\n\n\n\n\n\n\n\n\n\n\n\n\nOct 26, 2023\n\n\nDerek Sollberger\n\n\n\n\n\n\n  \n\n\n\n\n3: Summaries\n\n\n\n\n\n\n\n\n\n\n\n\nOct 24, 2023\n\n\ntype group name here\n\n\n\n\n\n\n  \n\n\n\n\n2: Quarto\n\n\n\n\n\n\n\n\n\n\n\n\nOct 19, 2023\n\n\nDerek Sollberger\n\n\n\n\n\n\n  \n\n\n\n\n1: Introduction\n\n\n\n\n\n\n\n\n\n\n\n\nOct 17, 2023\n\n\nDerek Sollberger\n\n\n\n\n\n\n  \n\n\n\n\n12: Hypothesis Testing\n\n\n\n\n\n\n\n\n\n\n\n\nOct 5, 2023\n\n\nDerek Sollberger\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/02_-_Exploring Data/02_exploring_data.html#look-at-the-data",
    "href": "posts/02_-_Exploring Data/02_exploring_data.html#look-at-the-data",
    "title": "02_-_Exploring Data",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df)\n\n# A tibble: 6 × 29\n  Tm         `#Bat` BatAge `R/G`     G    PA    AB     R     H  `2B`  `3B`    HR\n  <chr>       <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 Arizona D…     64   28.9  4.19   162  6144  5489   679  1297   308    31   144\n2 Atlanta B…     56   28.2  4.91   161  6056  5363   790  1307   269    20   239\n3 Baltimore…     62   26.7  4.07   162  5983  5420   659  1296   266    15   195\n4 Boston Re…     56   28    5.12   162  6122  5495   829  1434   330    23   219\n5 Chicago C…     69   29.1  4.35   162  5972  5306   705  1255   225    26   210\n6 Chicago W…     47   28    4.91   162  6084  5357   796  1373   275    22   190\n# … with 17 more variables: RBI <dbl>, SB <dbl>, CS <dbl>, BB <dbl>, SO <dbl>,\n#   BA <dbl>, OBP <dbl>, SLG <dbl>, OPS <dbl>, `OPS+` <dbl>, TB <dbl>,\n#   GDP <dbl>, HBP <dbl>, SH <dbl>, SF <dbl>, IBB <dbl>, LOB <dbl>\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df, give.attr = FALSE)\n\nspec_tbl_df [32 × 29] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Tm    : chr [1:32] \"Arizona Diamondbacks\" \"Atlanta Braves\" \"Baltimore Orioles\" \"Boston Red Sox\" ...\n $ #Bat  : num [1:32] 64 56 62 56 69 47 55 48 45 49 ...\n $ BatAge: num [1:32] 28.9 28.2 26.7 28 29.1 28 28.9 26.7 28.1 28.1 ...\n $ R/G   : num [1:32] 4.19 4.91 4.07 5.12 4.35 4.91 4.85 4.43 4.59 4.3 ...\n $ G     : num [1:32] 162 161 162 162 162 162 162 162 161 162 ...\n $ PA    : num [1:32] 6144 6056 5983 6122 5972 ...\n $ AB    : num [1:32] 5489 5363 5420 5495 5306 ...\n $ R     : num [1:32] 679 790 659 829 705 796 786 717 739 697 ...\n $ H     : num [1:32] 1297 1307 1296 1434 1255 ...\n $ 2B    : num [1:32] 308 269 266 330 225 275 295 248 275 236 ...\n $ 3B    : num [1:32] 31 20 15 23 26 22 13 22 34 37 ...\n $ HR    : num [1:32] 144 239 195 219 210 190 222 203 182 179 ...\n $ RBI   : num [1:32] 644 762 632 783 672 757 756 686 709 675 ...\n $ SB    : num [1:32] 43 59 54 40 86 57 36 109 76 88 ...\n $ CS    : num [1:32] 16 19 23 21 37 20 24 17 23 25 ...\n $ BB    : num [1:32] 537 549 451 512 502 586 553 453 491 490 ...\n $ SO    : num [1:32] 1465 1453 1454 1386 1596 ...\n $ BA    : num [1:32] 0.236 0.244 0.239 0.261 0.237 0.256 0.249 0.238 0.249 0.242 ...\n $ OBP   : num [1:32] 0.309 0.319 0.304 0.328 0.312 0.336 0.328 0.303 0.317 0.308 ...\n $ SLG   : num [1:32] 0.382 0.435 0.402 0.449 0.407 0.422 0.431 0.407 0.414 0.399 ...\n $ OPS   : num [1:32] 0.692 0.754 0.705 0.777 0.719 0.758 0.759 0.71 0.731 0.707 ...\n $ OPS+  : num [1:32] 86 98 91 106 93 106 95 94 87 95 ...\n $ TB    : num [1:32] 2099 2333 2177 2467 2162 ...\n $ GDP   : num [1:32] 99 81 105 100 133 139 129 105 98 113 ...\n $ HBP   : num [1:32] 54 67 65 61 92 78 105 64 58 44 ...\n $ SH    : num [1:32] 32 32 14 10 40 24 35 20 48 17 ...\n $ SF    : num [1:32] 28 43 31 42 30 39 45 36 36 50 ...\n $ IBB   : num [1:32] 24 36 12 22 17 10 22 18 24 8 ...\n $ LOB   : num [1:32] 1152 1072 1046 1093 1019 ...\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df)\n\n [1] \"Tm\"     \"#Bat\"   \"BatAge\" \"R/G\"    \"G\"      \"PA\"     \"AB\"     \"R\"     \n [9] \"H\"      \"2B\"     \"3B\"     \"HR\"     \"RBI\"    \"SB\"     \"CS\"     \"BB\"    \n[17] \"SO\"     \"BA\"     \"OBP\"    \"SLG\"    \"OPS\"    \"OPS+\"   \"TB\"     \"GDP\"   \n[25] \"HBP\"    \"SH\"     \"SF\"     \"IBB\"    \"LOB\""
  },
  {
    "objectID": "posts/02_-_Exploring Data/02_exploring_data.html#measures-of-centrality",
    "href": "posts/02_-_Exploring Data/02_exploring_data.html#measures-of-centrality",
    "title": "02_-_Exploring Data",
    "section": "Measures of Centrality",
    "text": "Measures of Centrality\nNow let us practice computing means and medians of some of the numerical data.\n\nmean(df$HR)\n\n[1] 377.6875\n\n\nDuring the 2021 season, MLB teams hit about 378 home runs on average.\n\nmedian(df$HR)\n\n[1] 198\n\n\nDuring the 2021 season, the median number of home runs per team was 198.\n\nmean(df$SB)\n\n[1] 140.625\n\n\nDuring the 2021 season, MLB teams stole about 141 bases on average.\n\nmedian(df$SB)\n\n[1] 75\n\n\nDuring the 2021 season, the median number of stolen bases per team was 75."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/03_Boxplots/03_boxplots.html",
    "href": "posts/03_Boxplots/03_boxplots.html",
    "title": "03_-_Boxplots",
    "section": "",
    "text": "The tidyverse suite of packages are streamlined to make data science processes easier. We can load the packages with the library() command.\n\nlibrary(\"tidyverse\")\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.1\n✔ readr   2.1.2     ✔ forcats 0.5.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()"
  },
  {
    "objectID": "posts/03_Boxplots/03_boxplots.html#load-the-data",
    "href": "posts/03_Boxplots/03_boxplots.html#load-the-data",
    "title": "03_-_Boxplots",
    "section": "Load the Data",
    "text": "Load the Data\nSince we have CSV files (comma-separated values), the read_csv() command in the readr package will be convenient here. I tend to save data set into a variable df (stands for “data frame”).\nToday’s data set comes from the Lahman package, which contains a lot of historical data about Major League Baseball.\n\ndf <- readr::read_csv(\"baseball_teams_data.csv\")\n\nRows: 300 Columns: 48\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (13): lgID, teamID, franchID, divID, DivWin, WCWin, LgWin, WSWin, name, ...\ndbl (35): yearID, Rank, G, Ghome, W, L, R, AB, H, X2B, X3B, HR, BB, SO, SB, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "posts/03_Boxplots/03_boxplots.html#look-at-the-data",
    "href": "posts/03_Boxplots/03_boxplots.html#look-at-the-data",
    "title": "03_-_Boxplots",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df)\n\n# A tibble: 6 × 48\n  yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n   <dbl> <chr> <chr>  <chr>    <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>  <chr>\n1   2012 NL    ARI    ARI      W         3   162    81    81    81 N      N    \n2   2012 NL    ATL    ATL      E         2   162    81    94    68 N      Y    \n3   2012 AL    BAL    BAL      E         2   162    81    93    69 N      Y    \n4   2012 AL    BOS    BOS      E         5   162    81    69    93 N      N    \n5   2012 AL    CHA    CHW      C         2   162    81    85    77 N      N    \n6   2012 NL    CHN    CHC      C         5   162    81    61   101 N      N    \n# … with 36 more variables: LgWin <chr>, WSWin <chr>, R <dbl>, AB <dbl>,\n#   H <dbl>, X2B <dbl>, X3B <dbl>, HR <dbl>, BB <dbl>, SO <dbl>, SB <dbl>,\n#   CS <dbl>, HBP <dbl>, SF <dbl>, RA <dbl>, ER <dbl>, ERA <dbl>, CG <dbl>,\n#   SHO <dbl>, SV <dbl>, IPouts <dbl>, HA <dbl>, HRA <dbl>, BBA <dbl>,\n#   SOA <dbl>, E <dbl>, DP <dbl>, FP <dbl>, name <chr>, park <chr>,\n#   attendance <dbl>, BPF <dbl>, PPF <dbl>, teamIDBR <chr>,\n#   teamIDlahman45 <chr>, teamIDretro <chr>\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df, give.attr = FALSE)\n\nspec_tbl_df [300 × 48] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ yearID        : num [1:300] 2012 2012 2012 2012 2012 ...\n $ lgID          : chr [1:300] \"NL\" \"NL\" \"AL\" \"AL\" ...\n $ teamID        : chr [1:300] \"ARI\" \"ATL\" \"BAL\" \"BOS\" ...\n $ franchID      : chr [1:300] \"ARI\" \"ATL\" \"BAL\" \"BOS\" ...\n $ divID         : chr [1:300] \"W\" \"E\" \"E\" \"E\" ...\n $ Rank          : num [1:300] 3 2 2 5 2 5 1 4 5 1 ...\n $ G             : num [1:300] 162 162 162 162 162 162 162 162 162 162 ...\n $ Ghome         : num [1:300] 81 81 81 81 81 81 81 81 81 81 ...\n $ W             : num [1:300] 81 94 93 69 85 61 97 68 64 88 ...\n $ L             : num [1:300] 81 68 69 93 77 101 65 94 98 74 ...\n $ DivWin        : chr [1:300] \"N\" \"N\" \"N\" \"N\" ...\n $ WCWin         : chr [1:300] \"N\" \"Y\" \"Y\" \"N\" ...\n $ LgWin         : chr [1:300] \"N\" \"N\" \"N\" \"N\" ...\n $ WSWin         : chr [1:300] \"N\" \"N\" \"N\" \"N\" ...\n $ R             : num [1:300] 734 700 712 734 748 613 669 667 758 726 ...\n $ AB            : num [1:300] 5462 5425 5560 5604 5518 ...\n $ H             : num [1:300] 1416 1341 1375 1459 1409 ...\n $ X2B           : num [1:300] 307 263 270 339 228 265 296 266 306 279 ...\n $ X3B           : num [1:300] 33 30 16 16 29 36 30 24 52 39 ...\n $ HR            : num [1:300] 165 149 214 165 211 137 172 136 166 163 ...\n $ BB            : num [1:300] 539 567 480 428 461 447 481 555 450 511 ...\n $ SO            : num [1:300] 1266 1289 1315 1197 1203 ...\n $ SB            : num [1:300] 93 101 58 97 109 94 87 110 100 59 ...\n $ CS            : num [1:300] 51 32 29 31 43 45 27 44 40 23 ...\n $ HBP           : num [1:300] 41 34 50 45 65 43 47 59 36 57 ...\n $ SF            : num [1:300] 45 46 30 55 36 24 37 39 39 39 ...\n $ RA            : num [1:300] 688 600 705 806 676 759 588 845 890 670 ...\n $ ER            : num [1:300] 626 549 642 754 646 708 540 766 824 596 ...\n $ ERA           : num [1:300] 3.93 3.42 3.9 4.7 4.02 4.51 3.34 4.78 5.22 3.75 ...\n $ CG            : num [1:300] 4 5 1 6 6 1 9 2 0 9 ...\n $ SHO           : num [1:300] 9 16 10 4 11 9 12 6 7 8 ...\n $ SV            : num [1:300] 39 47 55 35 37 28 56 43 36 40 ...\n $ IPouts        : num [1:300] 4301 4336 4449 4329 4337 ...\n $ HA            : num [1:300] 1432 1310 1433 1449 1365 ...\n $ HRA           : num [1:300] 155 145 184 190 186 175 152 174 198 151 ...\n $ BBA           : num [1:300] 417 464 481 529 503 573 427 543 566 438 ...\n $ SOA           : num [1:300] 1200 1232 1177 1176 1246 ...\n $ E             : num [1:300] 90 86 106 101 70 105 89 96 122 99 ...\n $ DP            : num [1:300] 146 147 151 159 154 148 113 157 139 127 ...\n $ FP            : num [1:300] 0.985 0.986 0.983 0.983 0.988 0.982 0.985 0.984 0.98 0.983 ...\n $ name          : chr [1:300] \"Arizona Diamondbacks\" \"Atlanta Braves\" \"Baltimore Orioles\" \"Boston Red Sox\" ...\n $ park          : chr [1:300] \"Chase Field\" \"Turner Field\" \"Oriole Park at Camden Yards\" \"Fenway Park II\" ...\n $ attendance    : num [1:300] 2177617 2420171 2102240 3043003 1965955 ...\n $ BPF           : num [1:300] 105 102 102 106 106 98 107 93 120 104 ...\n $ PPF           : num [1:300] 106 101 103 106 106 99 107 95 121 103 ...\n $ teamIDBR      : chr [1:300] \"ARI\" \"ATL\" \"BAL\" \"BOS\" ...\n $ teamIDlahman45: chr [1:300] \"ARI\" \"ATL\" \"BAL\" \"BOS\" ...\n $ teamIDretro   : chr [1:300] \"ARI\" \"ATL\" \"BAL\" \"BOS\" ...\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df)\n\n [1] \"yearID\"         \"lgID\"           \"teamID\"         \"franchID\"      \n [5] \"divID\"          \"Rank\"           \"G\"              \"Ghome\"         \n [9] \"W\"              \"L\"              \"DivWin\"         \"WCWin\"         \n[13] \"LgWin\"          \"WSWin\"          \"R\"              \"AB\"            \n[17] \"H\"              \"X2B\"            \"X3B\"            \"HR\"            \n[21] \"BB\"             \"SO\"             \"SB\"             \"CS\"            \n[25] \"HBP\"            \"SF\"             \"RA\"             \"ER\"            \n[29] \"ERA\"            \"CG\"             \"SHO\"            \"SV\"            \n[33] \"IPouts\"         \"HA\"             \"HRA\"            \"BBA\"           \n[37] \"SOA\"            \"E\"              \"DP\"             \"FP\"            \n[41] \"name\"           \"park\"           \"attendance\"     \"BPF\"           \n[45] \"PPF\"            \"teamIDBR\"       \"teamIDlahman45\" \"teamIDretro\""
  },
  {
    "objectID": "posts/03_Boxplots/03_boxplots.html#a-starter-boxplot",
    "href": "posts/03_Boxplots/03_boxplots.html#a-starter-boxplot",
    "title": "03_-_Boxplots",
    "section": "A Starter Boxplot",
    "text": "A Starter Boxplot\n\ndf |>\n  ggplot(aes(y = W)) +\n  geom_boxplot() +\n  labs(title = \"MLB Wins\",\n       subtitle = \"2012 to 2021 seasons\",\n       caption = \"Spark 01\",\n       y = \"wins\")"
  },
  {
    "objectID": "posts/03_Boxplots/03_boxplots.html#comparisons",
    "href": "posts/03_Boxplots/03_boxplots.html#comparisons",
    "title": "03_-_Boxplots",
    "section": "Comparisons",
    "text": "Comparisons\n\ndf |>\n  ggplot(aes(x = lgID, y = R)) +\n  geom_boxplot() +\n  labs(title = \"MLB Runs by League\",\n       subtitle = \"2012 to 2021 seasons\",\n       caption = \"Spark 01\",\n       x = \"league\",\n       y = \"runs scored\")"
  },
  {
    "objectID": "posts/03_Boxplots/03_boxplots.html#grouping",
    "href": "posts/03_Boxplots/03_boxplots.html#grouping",
    "title": "03_-_Boxplots",
    "section": "Grouping",
    "text": "Grouping\n\ndf |>\n  ggplot(aes(x = franchID, y = W, group = franchID)) +\n  geom_boxplot() +\n  labs(title = \"MLB Wins by Team\",\n       subtitle = \"2012 to 2021 seasons\",\n       caption = \"Spark 01\",\n       x = \"team\",\n       y = \"wins\")\n\n\n\n\n\ndf |>\n  filter(franchID %in% c(\"ARI\", \"COL\", \"LAD\", \"SDP\", \"SFG\")) |>\n  ggplot(aes(x = franchID, y = W, group = franchID)) +\n  geom_boxplot(aes(color = franchID, fill = franchID)) +\n  \n  # https://teamcolorcodes.com/mlb-color-codes/\n  scale_color_manual(values = c(\"#E3D4AD\", \"#C4CED4\", \"#A5ACAF\", \"#FFC425\", \"#27251F\")) +\n  scale_fill_manual(values = c(\"#A71930\", \"#333366\", \"#005A9C\", \"#2F241D\", \"#FD5A1E\")) +\n\n  labs(title = \"MLB Wins by Team\",\n       subtitle = \"2012 to 2021 seasons\",\n       caption = \"Spark 01\",\n       x = \"team\",\n       y = \"wins\") +\n  theme_minimal()"
  },
  {
    "objectID": "posts/04_Barplots/04_boxplots.html",
    "href": "posts/04_Barplots/04_boxplots.html",
    "title": "4: Barplots",
    "section": "",
    "text": "Glenn Burke was an outfielder with the 1977 World Series champion Dodgers. He was born in Oakland in 1952.\n\n\n\nImage credit: Washington Post\n\n\n\n\nThe tidyverse suite of packages are streamlined to make data science processes easier. We can load the packages with the library() command.\n\n# library(\"Lahman\") #baseball data set\nlibrary(\"readxl\")\nlibrary(\"tidyverse\")\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.1\n✔ readr   2.1.2     ✔ forcats 0.5.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n# subset of the Batting data in the Lahman database\n# df_Burke <- Batting |>\n  \n  # focus on Glenn Burke\n  # abbreviation found via playerInfo() helper function\n  # filter(playerID == \"burkegl01\")\n\n# df_1977 <- Batting |>\n  # filter(yearID == 1977) |>\n  # filter(H > 0) #to ease later histogram (remove players who had zero hits)\n\n# readr::write_csv(df_Burke, \"data_Burke.csv\")\n# readr::write_csv(df_1977, \"data_1977.csv\")\n\nToday’s data set comes from the Lahman package, which contains a lot of historical data about Major League Baseball."
  },
  {
    "objectID": "posts/04_Barplots/04_boxplots.html#look-at-the-data",
    "href": "posts/04_Barplots/04_boxplots.html#look-at-the-data",
    "title": "4: Barplots",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df_1977)\n\n# A tibble: 6 × 22\n  playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n  <chr>      <dbl> <dbl> <chr>  <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 adamsbo04   1977     1 DET    AL       15    24     2     6     1     0     2\n2 adamsgl01   1977     1 MIN    AL       95   269    32    91    17     0     6\n3 aikenwi01   1977     1 CAL    AL       42    91     5    18     4     0     0\n4 alcalsa01   1977     2 MON    NL       31    25     1     2     0     0     1\n5 alexaga01   1977     1 SFN    NL       51   119    17    36     4     2     5\n6 alexama01   1977     1 OAK    AL       90    42    24    10     1     0     0\n# … with 10 more variables: RBI <dbl>, SB <dbl>, CS <dbl>, BB <dbl>, SO <dbl>,\n#   IBB <dbl>, HBP <dbl>, SH <dbl>, SF <dbl>, GIDP <dbl>\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df_1977, give.attr = FALSE)\n\nspec_tbl_df [658 × 22] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ playerID: chr [1:658] \"adamsbo04\" \"adamsgl01\" \"aikenwi01\" \"alcalsa01\" ...\n $ yearID  : num [1:658] 1977 1977 1977 1977 1977 ...\n $ stint   : num [1:658] 1 1 1 2 1 1 1 1 1 1 ...\n $ teamID  : chr [1:658] \"DET\" \"MIN\" \"CAL\" \"MON\" ...\n $ lgID    : chr [1:658] \"AL\" \"AL\" \"AL\" \"NL\" ...\n $ G       : num [1:658] 15 95 42 31 51 90 54 155 69 22 ...\n $ AB      : num [1:658] 24 269 91 25 119 42 171 613 83 40 ...\n $ R       : num [1:658] 2 32 5 1 17 24 19 75 21 10 ...\n $ H       : num [1:658] 6 91 18 2 36 10 41 160 22 13 ...\n $ X2B     : num [1:658] 1 17 4 0 4 1 4 18 3 4 ...\n $ X3B     : num [1:658] 0 0 0 0 2 0 0 11 0 0 ...\n $ HR      : num [1:658] 2 6 0 1 5 0 5 2 1 1 ...\n $ RBI     : num [1:658] 2 49 6 2 20 2 31 43 11 4 ...\n $ SB      : num [1:658] 0 0 1 0 3 26 1 20 4 3 ...\n $ CS      : num [1:658] 0 2 2 0 1 14 3 9 3 3 ...\n $ BB      : num [1:658] 0 18 10 0 20 4 24 37 8 3 ...\n $ SO      : num [1:658] 5 30 23 13 33 6 36 114 13 4 ...\n $ IBB     : num [1:658] 0 3 2 0 2 0 0 1 0 0 ...\n $ HBP     : num [1:658] 0 0 0 0 2 0 1 0 1 0 ...\n $ SH      : num [1:658] 0 0 0 2 0 1 0 20 4 1 ...\n $ SF      : num [1:658] 0 3 0 0 2 0 4 0 1 1 ...\n $ GIDP    : num [1:658] 0 5 1 0 5 0 4 14 0 2 ...\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df_1977)\n\n [1] \"playerID\" \"yearID\"   \"stint\"    \"teamID\"   \"lgID\"     \"G\"       \n [7] \"AB\"       \"R\"        \"H\"        \"X2B\"      \"X3B\"      \"HR\"      \n[13] \"RBI\"      \"SB\"       \"CS\"       \"BB\"       \"SO\"       \"IBB\"     \n[19] \"HBP\"      \"SH\"       \"SF\"       \"GIDP\""
  },
  {
    "objectID": "posts/04_Barplots/04_boxplots.html#a-starter-histogram",
    "href": "posts/04_Barplots/04_boxplots.html#a-starter-histogram",
    "title": "4: Barplots",
    "section": "A Starter Histogram",
    "text": "A Starter Histogram\nA histogram is used to visualize the distribution of a numerical variable.\n\ndf_1977 |>\n  ggplot(aes(x = H)) +\n  geom_histogram() +\n  labs(title = \"Hits\",\n       subtitle = \"1977 season\",\n       caption = \"Spark 01\",\n       x = \"hits\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "posts/04_Barplots/04_boxplots.html#colors",
    "href": "posts/04_Barplots/04_boxplots.html#colors",
    "title": "4: Barplots",
    "section": "Colors",
    "text": "Colors\nThis is a distribution the the number of clean hits by MLB batters in the 1977 season.\n\ndf_1977 |>\n  ggplot(aes(x = H)) +\n  geom_histogram(fill = \"blue\", color = \"black\") +\n  labs(title = \"Hits\",\n       subtitle = \"1977 season\",\n       caption = \"Spark 01\",\n       x = \"hits\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "posts/04_Barplots/04_boxplots.html#labels",
    "href": "posts/04_Barplots/04_boxplots.html#labels",
    "title": "4: Barplots",
    "section": "Label(s)",
    "text": "Label(s)\nGlenn Burke himself had 43 hits (playing a bench role).\n\ndf_1977 |>\n  ggplot(aes(x = H)) +\n  geom_histogram(fill = \"blue\", color = \"black\") +\n  geom_segment(aes(x = 93, y = 50, xend = 43, yend = 0),\n               arrow = arrow(), color = \"red\", size = 3) +\n  geom_label(aes(x = 43, y = 0, label = \"Glenn Burke\"),\n             nudge_x = 50, nudge_y = 50) +\n  labs(title = \"Hits\",\n       subtitle = \"1977 season\",\n       caption = \"Spark 01\",\n       x = \"hits\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nRemember that we can get also get a sense of a player comparing them to the summary statistics.\n\ndf_1977 |>\n  summarize(xbar = mean(H, na.rm = TRUE),\n            median = median(H, na.rm = TRUE),\n            sd = sd(H, na.rm = TRUE))\n\n# A tibble: 1 × 3\n   xbar median    sd\n  <dbl>  <dbl> <dbl>\n1  57.8     29  59.6"
  },
  {
    "objectID": "posts/04_Barplots/04_boxplots.html#cultural-icon",
    "href": "posts/04_Barplots/04_boxplots.html#cultural-icon",
    "title": "4: Barplots",
    "section": "Cultural Icon",
    "text": "Cultural Icon\n\n\n\nImage Credit: Business Insider"
  },
  {
    "objectID": "posts/04_Barplots/04_boxplots.html#look-at-the-data-1",
    "href": "posts/04_Barplots/04_boxplots.html#look-at-the-data-1",
    "title": "4: Barplots",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df_Burke)\n\n# A tibble: 5 × 22\n  playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n  <chr>      <dbl> <dbl> <chr>  <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 burkegl01   1976     1 LAN    NL       25    46     9    11     2     0     0\n2 burkegl01   1977     1 LAN    NL       83   169    16    43     8     0     1\n3 burkegl01   1978     1 LAN    NL       16    19     2     4     0     0     0\n4 burkegl01   1978     2 OAK    AL       78   200    19    47     6     1     1\n5 burkegl01   1979     1 OAK    AL       23    89     4    19     2     1     0\n# … with 10 more variables: RBI <dbl>, SB <dbl>, CS <dbl>, BB <dbl>, SO <dbl>,\n#   IBB <dbl>, HBP <dbl>, SH <dbl>, SF <dbl>, GIDP <dbl>\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df_Burke, give.attr = FALSE)\n\ntibble [5 × 22] (S3: tbl_df/tbl/data.frame)\n $ playerID: chr [1:5] \"burkegl01\" \"burkegl01\" \"burkegl01\" \"burkegl01\" ...\n $ yearID  : num [1:5] 1976 1977 1978 1978 1979\n $ stint   : num [1:5] 1 1 1 2 1\n $ teamID  : chr [1:5] \"LAN\" \"LAN\" \"LAN\" \"OAK\" ...\n $ lgID    : chr [1:5] \"NL\" \"NL\" \"NL\" \"AL\" ...\n $ G       : num [1:5] 25 83 16 78 23\n $ AB      : num [1:5] 46 169 19 200 89\n $ R       : num [1:5] 9 16 2 19 4\n $ H       : num [1:5] 11 43 4 47 19\n $ X2B     : num [1:5] 2 8 0 6 2\n $ X3B     : num [1:5] 0 0 0 1 1\n $ HR      : num [1:5] 0 1 0 1 0\n $ RBI     : num [1:5] 5 13 2 14 4\n $ SB      : num [1:5] 3 13 1 15 3\n $ CS      : num [1:5] 2 5 0 8 1\n $ BB      : num [1:5] 3 5 0 10 4\n $ SO      : num [1:5] 8 22 4 26 10\n $ IBB     : num [1:5] 0 1 0 1 1\n $ HBP     : num [1:5] 1 1 0 0 0\n $ SH      : num [1:5] 1 0 0 6 1\n $ SF      : num [1:5] 0 0 0 1 0\n $ GIDP    : num [1:5] 1 3 0 7 3\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df_Burke)\n\n [1] \"playerID\" \"yearID\"   \"stint\"    \"teamID\"   \"lgID\"     \"G\"       \n [7] \"AB\"       \"R\"        \"H\"        \"X2B\"      \"X3B\"      \"HR\"      \n[13] \"RBI\"      \"SB\"       \"CS\"       \"BB\"       \"SO\"       \"IBB\"     \n[19] \"HBP\"      \"SH\"       \"SF\"       \"GIDP\""
  },
  {
    "objectID": "posts/04_Barplots/04_boxplots.html#bar-plot-by-identity",
    "href": "posts/04_Barplots/04_boxplots.html#bar-plot-by-identity",
    "title": "4: Barplots",
    "section": "Bar Plot (by identity)",
    "text": "Bar Plot (by identity)\nBar plots are easy for readers to understand, but a little tricky to produce. We usually make bar plots with a categorical variable on the \\(x\\)-axis and a numerical variable on the \\(y\\)-axis.\nWhen we want to use the numbers from the data frame directly, be sure to specify the stat = \"identity\" parameter.\n\ndf_Burke |>\n  ggplot(aes(x = yearID, y = G, fill = teamID)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Glenn Burke: A Brief Time in the Major Leagues\",\n       subtitle = \"He spent seasons with the Dodgers and the Athletics\",\n       caption = \"Spark 01\",\n       x = \"season\", y = \"games played\")"
  },
  {
    "objectID": "posts/04_Barplots/04_boxplots.html#bar-plot-by-count",
    "href": "posts/04_Barplots/04_boxplots.html#bar-plot-by-count",
    "title": "4: Barplots",
    "section": "Bar Plot (by count)",
    "text": "Bar Plot (by count)\nWhen we want the bar plot to reflect the number of observations (i.e. number of rows) for each category, then use the stat = \"count\" parameter.\n\ndf_Burke |>\n  ggplot(aes(x = teamID, fill = teamID)) +\n  geom_bar(stat = \"count\") +\n  labs(title = \"Glenn Burke: A Brief Time in the Major Leagues\",\n       subtitle = \"He spent seasons with the Dodgers and the Athletics\",\n       caption = \"Spark 01\",\n       x = \"team\", y = \"seasons played\")"
  },
  {
    "objectID": "posts/04_Barplots/04_boxplots.html#epilogue",
    "href": "posts/04_Barplots/04_boxplots.html#epilogue",
    "title": "4: Barplots",
    "section": "Epilogue",
    "text": "Epilogue\n\n\n\n\n\nImage Credit: Washington Post\n\n\n\nGlenn Burke left MLB in 1980\n\nplayed in the Gay Olympics\ndealt with drug addiction\ndied of AIDS in 1995"
  },
  {
    "objectID": "posts/04_Barplots/04_boxplots.html#references",
    "href": "posts/04_Barplots/04_boxplots.html#references",
    "title": "4: Barplots",
    "section": "References",
    "text": "References\n\nLahman Data Package\nBaseball Reference\n“The trials of baseball’s first openly gay player, Glenn Burke, four decades ago” — Washington Post\n“Today is National High Five Day — this photo from 1977 shows the first ever high five” — Business Insider\nSingled Out by Andrew Maraniss"
  },
  {
    "objectID": "posts/04_Barplots/04_barplots.html",
    "href": "posts/04_Barplots/04_barplots.html",
    "title": "4: Barplots",
    "section": "",
    "text": "Glenn Burke was an outfielder with the 1977 National-League champion Dodgers. He was born in Oakland in 1952.\n\n\n\nImage credit: Washington Post\n\n\n\n\nThe tidyverse suite of packages are streamlined to make data science processes easier. We can load the packages with the library() command.\n\n# library(\"Lahman\") #baseball data set\nlibrary(\"readxl\")\nlibrary(\"tidyverse\")\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.1\n✔ readr   2.1.2     ✔ forcats 0.5.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n# subset of the Batting data in the Lahman database\n# df_Burke <- Batting |>\n  \n  # focus on Glenn Burke\n  # abbreviation found via playerInfo() helper function\n  # filter(playerID == \"burkegl01\")\n\n# df_1977 <- Batting |>\n  # filter(yearID == 1977) |>\n  # filter(H > 0) #to ease later histogram (remove players who had zero hits)\n\n# readr::write_csv(df_Burke, \"data_Burke.csv\")\n# readr::write_csv(df_1977, \"data_1977.csv\")\n\nToday’s data set comes from the Lahman package, which contains a lot of historical data about Major League Baseball."
  },
  {
    "objectID": "posts/04_Barplots/04_barplots.html#look-at-the-data",
    "href": "posts/04_Barplots/04_barplots.html#look-at-the-data",
    "title": "4: Barplots",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df_1977)\n\n# A tibble: 6 × 22\n  playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n  <chr>      <dbl> <dbl> <chr>  <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 adamsbo04   1977     1 DET    AL       15    24     2     6     1     0     2\n2 adamsgl01   1977     1 MIN    AL       95   269    32    91    17     0     6\n3 aikenwi01   1977     1 CAL    AL       42    91     5    18     4     0     0\n4 alcalsa01   1977     2 MON    NL       31    25     1     2     0     0     1\n5 alexaga01   1977     1 SFN    NL       51   119    17    36     4     2     5\n6 alexama01   1977     1 OAK    AL       90    42    24    10     1     0     0\n# … with 10 more variables: RBI <dbl>, SB <dbl>, CS <dbl>, BB <dbl>, SO <dbl>,\n#   IBB <dbl>, HBP <dbl>, SH <dbl>, SF <dbl>, GIDP <dbl>\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df_1977, give.attr = FALSE)\n\nspec_tbl_df [658 × 22] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ playerID: chr [1:658] \"adamsbo04\" \"adamsgl01\" \"aikenwi01\" \"alcalsa01\" ...\n $ yearID  : num [1:658] 1977 1977 1977 1977 1977 ...\n $ stint   : num [1:658] 1 1 1 2 1 1 1 1 1 1 ...\n $ teamID  : chr [1:658] \"DET\" \"MIN\" \"CAL\" \"MON\" ...\n $ lgID    : chr [1:658] \"AL\" \"AL\" \"AL\" \"NL\" ...\n $ G       : num [1:658] 15 95 42 31 51 90 54 155 69 22 ...\n $ AB      : num [1:658] 24 269 91 25 119 42 171 613 83 40 ...\n $ R       : num [1:658] 2 32 5 1 17 24 19 75 21 10 ...\n $ H       : num [1:658] 6 91 18 2 36 10 41 160 22 13 ...\n $ X2B     : num [1:658] 1 17 4 0 4 1 4 18 3 4 ...\n $ X3B     : num [1:658] 0 0 0 0 2 0 0 11 0 0 ...\n $ HR      : num [1:658] 2 6 0 1 5 0 5 2 1 1 ...\n $ RBI     : num [1:658] 2 49 6 2 20 2 31 43 11 4 ...\n $ SB      : num [1:658] 0 0 1 0 3 26 1 20 4 3 ...\n $ CS      : num [1:658] 0 2 2 0 1 14 3 9 3 3 ...\n $ BB      : num [1:658] 0 18 10 0 20 4 24 37 8 3 ...\n $ SO      : num [1:658] 5 30 23 13 33 6 36 114 13 4 ...\n $ IBB     : num [1:658] 0 3 2 0 2 0 0 1 0 0 ...\n $ HBP     : num [1:658] 0 0 0 0 2 0 1 0 1 0 ...\n $ SH      : num [1:658] 0 0 0 2 0 1 0 20 4 1 ...\n $ SF      : num [1:658] 0 3 0 0 2 0 4 0 1 1 ...\n $ GIDP    : num [1:658] 0 5 1 0 5 0 4 14 0 2 ...\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df_1977)\n\n [1] \"playerID\" \"yearID\"   \"stint\"    \"teamID\"   \"lgID\"     \"G\"       \n [7] \"AB\"       \"R\"        \"H\"        \"X2B\"      \"X3B\"      \"HR\"      \n[13] \"RBI\"      \"SB\"       \"CS\"       \"BB\"       \"SO\"       \"IBB\"     \n[19] \"HBP\"      \"SH\"       \"SF\"       \"GIDP\""
  },
  {
    "objectID": "posts/04_Barplots/04_barplots.html#a-starter-histogram",
    "href": "posts/04_Barplots/04_barplots.html#a-starter-histogram",
    "title": "4: Barplots",
    "section": "A Starter Histogram",
    "text": "A Starter Histogram\nA histogram is used to visualize the distribution of a numerical variable.\n\ndf_1977 |>\n  ggplot(aes(x = H)) +\n  geom_histogram() +\n  labs(title = \"Hits\",\n       subtitle = \"1977 season\",\n       caption = \"Spark 01\",\n       x = \"hits\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "posts/04_Barplots/04_barplots.html#colors",
    "href": "posts/04_Barplots/04_barplots.html#colors",
    "title": "4: Barplots",
    "section": "Colors",
    "text": "Colors\nThis is a distribution the the number of clean hits by MLB batters in the 1977 season.\n\ndf_1977 |>\n  ggplot(aes(x = H)) +\n  geom_histogram(fill = \"blue\", color = \"black\") +\n  labs(title = \"Hits\",\n       subtitle = \"1977 season\",\n       caption = \"Spark 01\",\n       x = \"hits\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "posts/04_Barplots/04_barplots.html#labels",
    "href": "posts/04_Barplots/04_barplots.html#labels",
    "title": "4: Barplots",
    "section": "Label(s)",
    "text": "Label(s)\nGlenn Burke himself had 43 hits (playing a bench role).\n\ndf_1977 |>\n  ggplot(aes(x = H)) +\n  geom_histogram(fill = \"blue\", color = \"black\") +\n  geom_segment(aes(x = 93, y = 50, xend = 43, yend = 0),\n               arrow = arrow(), color = \"red\", size = 3) +\n  geom_label(aes(x = 43, y = 0, label = \"Glenn Burke\"),\n             nudge_x = 50, nudge_y = 50) +\n  labs(title = \"Hits\",\n       subtitle = \"1977 season\",\n       caption = \"Spark 01\",\n       x = \"hits\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nRemember that we can get also get a sense of a player comparing them to the summary statistics.\n\ndf_1977 |>\n  summarize(xbar = mean(H, na.rm = TRUE),\n            median = median(H, na.rm = TRUE),\n            sd = sd(H, na.rm = TRUE))\n\n# A tibble: 1 × 3\n   xbar median    sd\n  <dbl>  <dbl> <dbl>\n1  57.8     29  59.6"
  },
  {
    "objectID": "posts/04_Barplots/04_barplots.html#cultural-icon",
    "href": "posts/04_Barplots/04_barplots.html#cultural-icon",
    "title": "4: Barplots",
    "section": "Cultural Icon",
    "text": "Cultural Icon\n\n\n\nImage Credit: Business Insider"
  },
  {
    "objectID": "posts/04_Barplots/04_barplots.html#look-at-the-data-1",
    "href": "posts/04_Barplots/04_barplots.html#look-at-the-data-1",
    "title": "4: Barplots",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df_Burke)\n\n# A tibble: 5 × 22\n  playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n  <chr>      <dbl> <dbl> <chr>  <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 burkegl01   1976     1 LAN    NL       25    46     9    11     2     0     0\n2 burkegl01   1977     1 LAN    NL       83   169    16    43     8     0     1\n3 burkegl01   1978     1 LAN    NL       16    19     2     4     0     0     0\n4 burkegl01   1978     2 OAK    AL       78   200    19    47     6     1     1\n5 burkegl01   1979     1 OAK    AL       23    89     4    19     2     1     0\n# … with 10 more variables: RBI <dbl>, SB <dbl>, CS <dbl>, BB <dbl>, SO <dbl>,\n#   IBB <dbl>, HBP <dbl>, SH <dbl>, SF <dbl>, GIDP <dbl>\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df_Burke, give.attr = FALSE)\n\ntibble [5 × 22] (S3: tbl_df/tbl/data.frame)\n $ playerID: chr [1:5] \"burkegl01\" \"burkegl01\" \"burkegl01\" \"burkegl01\" ...\n $ yearID  : num [1:5] 1976 1977 1978 1978 1979\n $ stint   : num [1:5] 1 1 1 2 1\n $ teamID  : chr [1:5] \"LAN\" \"LAN\" \"LAN\" \"OAK\" ...\n $ lgID    : chr [1:5] \"NL\" \"NL\" \"NL\" \"AL\" ...\n $ G       : num [1:5] 25 83 16 78 23\n $ AB      : num [1:5] 46 169 19 200 89\n $ R       : num [1:5] 9 16 2 19 4\n $ H       : num [1:5] 11 43 4 47 19\n $ X2B     : num [1:5] 2 8 0 6 2\n $ X3B     : num [1:5] 0 0 0 1 1\n $ HR      : num [1:5] 0 1 0 1 0\n $ RBI     : num [1:5] 5 13 2 14 4\n $ SB      : num [1:5] 3 13 1 15 3\n $ CS      : num [1:5] 2 5 0 8 1\n $ BB      : num [1:5] 3 5 0 10 4\n $ SO      : num [1:5] 8 22 4 26 10\n $ IBB     : num [1:5] 0 1 0 1 1\n $ HBP     : num [1:5] 1 1 0 0 0\n $ SH      : num [1:5] 1 0 0 6 1\n $ SF      : num [1:5] 0 0 0 1 0\n $ GIDP    : num [1:5] 1 3 0 7 3\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df_Burke)\n\n [1] \"playerID\" \"yearID\"   \"stint\"    \"teamID\"   \"lgID\"     \"G\"       \n [7] \"AB\"       \"R\"        \"H\"        \"X2B\"      \"X3B\"      \"HR\"      \n[13] \"RBI\"      \"SB\"       \"CS\"       \"BB\"       \"SO\"       \"IBB\"     \n[19] \"HBP\"      \"SH\"       \"SF\"       \"GIDP\""
  },
  {
    "objectID": "posts/04_Barplots/04_barplots.html#bar-plot-by-identity",
    "href": "posts/04_Barplots/04_barplots.html#bar-plot-by-identity",
    "title": "4: Barplots",
    "section": "Bar Plot (by identity)",
    "text": "Bar Plot (by identity)\nBar plots are easy for readers to understand, but a little tricky to produce. We usually make bar plots with a categorical variable on the \\(x\\)-axis and a numerical variable on the \\(y\\)-axis.\nWhen we want to use the numbers from the data frame directly, be sure to specify the stat = \"identity\" parameter.\n\ndf_Burke |>\n  ggplot(aes(x = yearID, y = G, fill = teamID)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Glenn Burke: A Brief Time in the Major Leagues\",\n       subtitle = \"He spent seasons with the Dodgers and the Athletics\",\n       caption = \"Spark 01\",\n       x = \"season\", y = \"games played\")"
  },
  {
    "objectID": "posts/04_Barplots/04_barplots.html#bar-plot-by-count",
    "href": "posts/04_Barplots/04_barplots.html#bar-plot-by-count",
    "title": "4: Barplots",
    "section": "Bar Plot (by count)",
    "text": "Bar Plot (by count)\nWhen we want the bar plot to reflect the number of observations (i.e. number of rows) for each category, then use the stat = \"count\" parameter.\n\ndf_Burke |>\n  ggplot(aes(x = teamID, fill = teamID)) +\n  geom_bar(stat = \"count\") +\n  labs(title = \"Glenn Burke: A Brief Time in the Major Leagues\",\n       subtitle = \"He spent seasons with the Dodgers and the Athletics\",\n       caption = \"Spark 01\",\n       x = \"team\", y = \"seasons played\")"
  },
  {
    "objectID": "posts/04_Barplots/04_barplots.html#epilogue",
    "href": "posts/04_Barplots/04_barplots.html#epilogue",
    "title": "4: Barplots",
    "section": "Epilogue",
    "text": "Epilogue\n\n\n\n\n\nImage Credit: Washington Post\n\n\n\nGlenn Burke left MLB in 1980\n\nplayed in the Gay Olympics\ndealt with drug addiction\ndied of AIDS in 1995"
  },
  {
    "objectID": "posts/04_Barplots/04_barplots.html#references",
    "href": "posts/04_Barplots/04_barplots.html#references",
    "title": "4: Barplots",
    "section": "References",
    "text": "References\n\nLahman Data Package\nBaseball Reference\n“The trials of baseball’s first openly gay player, Glenn Burke, four decades ago” — Washington Post\n“Today is National High Five Day — this photo from 1977 shows the first ever high five” — Business Insider\nSingled Out by Andrew Maraniss"
  },
  {
    "objectID": "posts/05_Scatterplots/05_scatterplots.html",
    "href": "posts/05_Scatterplots/05_scatterplots.html",
    "title": "5: Scatterplots",
    "section": "",
    "text": "The tidyverse suite of packages are streamlined to make data science processes easier. We can load the packages with the library() command.\n\nlibrary(\"Lahman\")\nlibrary(\"tidyverse\")\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.1\n✔ readr   2.1.2     ✔ forcats 0.5.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\n\ncorrelatedValues = function(x, r = 0.9){\n  r2 = r**2\n  ve = 1-r2\n  SD = sqrt(ve)\n  e  = rnorm(length(x), mean=0, sd=SD)\n  y  = r*x + e\n  return(y)\n}"
  },
  {
    "objectID": "posts/05_Scatterplots/05_scatterplots.html#look-at-the-data",
    "href": "posts/05_Scatterplots/05_scatterplots.html#look-at-the-data",
    "title": "5: Scatterplots",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df)\n\n# A tibble: 6 × 48\n  yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n   <dbl> <chr> <chr>  <chr>    <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>  <chr>\n1   1990 NL    ATL    ATL      W         6   162    81    65    97 N      <NA> \n2   1990 AL    BAL    BAL      E         5   161    80    76    85 N      <NA> \n3   1990 AL    BOS    BOS      E         1   162    81    88    74 Y      <NA> \n4   1990 AL    CAL    ANA      W         4   162    81    80    82 N      <NA> \n5   1990 AL    CHA    CHW      W         2   162    80    94    68 N      <NA> \n6   1990 NL    CHN    CHC      E         4   162    81    77    85 N      <NA> \n# … with 36 more variables: LgWin <chr>, WSWin <chr>, R <dbl>, AB <dbl>,\n#   H <dbl>, X2B <dbl>, X3B <dbl>, HR <dbl>, BB <dbl>, SO <dbl>, SB <dbl>,\n#   CS <dbl>, HBP <dbl>, SF <dbl>, RA <dbl>, ER <dbl>, ERA <dbl>, CG <dbl>,\n#   SHO <dbl>, SV <dbl>, IPouts <dbl>, HA <dbl>, HRA <dbl>, BBA <dbl>,\n#   SOA <dbl>, E <dbl>, DP <dbl>, FP <dbl>, name <chr>, park <chr>,\n#   attendance <dbl>, BPF <dbl>, PPF <dbl>, teamIDBR <chr>,\n#   teamIDlahman45 <chr>, teamIDretro <chr>\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df, give.attr = FALSE)\n\nspec_tbl_df [278 × 48] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ yearID        : num [1:278] 1990 1990 1990 1990 1990 1990 1990 1990 1990 1990 ...\n $ lgID          : chr [1:278] \"NL\" \"AL\" \"AL\" \"AL\" ...\n $ teamID        : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ franchID      : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"ANA\" ...\n $ divID         : chr [1:278] \"W\" \"E\" \"E\" \"W\" ...\n $ Rank          : num [1:278] 6 5 1 4 2 4 1 4 3 4 ...\n $ G             : num [1:278] 162 161 162 162 162 162 162 162 162 162 ...\n $ Ghome         : num [1:278] 81 80 81 81 80 81 81 81 81 81 ...\n $ W             : num [1:278] 65 76 88 80 94 77 91 77 79 75 ...\n $ L             : num [1:278] 97 85 74 82 68 85 71 85 83 87 ...\n $ DivWin        : chr [1:278] \"N\" \"N\" \"Y\" \"N\" ...\n $ WCWin         : chr [1:278] NA NA NA NA ...\n $ LgWin         : chr [1:278] \"N\" \"N\" \"N\" \"N\" ...\n $ WSWin         : chr [1:278] \"N\" \"N\" \"N\" \"N\" ...\n $ R             : num [1:278] 682 669 699 690 682 690 693 732 750 573 ...\n $ AB            : num [1:278] 5504 5410 5516 5570 5402 ...\n $ H             : num [1:278] 1376 1328 1502 1448 1393 ...\n $ X2B           : num [1:278] 263 234 298 237 251 240 284 266 241 209 ...\n $ X3B           : num [1:278] 26 22 31 27 44 36 40 41 32 32 ...\n $ HR            : num [1:278] 162 132 106 147 106 136 125 110 172 94 ...\n $ BB            : num [1:278] 473 660 598 566 478 406 466 458 634 548 ...\n $ SO            : num [1:278] 1010 962 795 1000 903 869 913 836 952 997 ...\n $ SB            : num [1:278] 92 94 53 69 140 151 166 107 82 179 ...\n $ CS            : num [1:278] 55 52 52 43 90 50 66 52 57 83 ...\n $ HBP           : num [1:278] 27 40 28 28 36 30 42 29 34 28 ...\n $ SF            : num [1:278] 31 41 44 45 47 51 42 61 41 41 ...\n $ RA            : num [1:278] 821 698 664 706 633 774 597 737 754 656 ...\n $ ER            : num [1:278] 727 644 596 613 581 695 549 676 697 581 ...\n $ ERA           : num [1:278] 4.58 4.04 3.72 3.79 3.61 4.34 3.39 4.26 4.39 3.61 ...\n $ CG            : num [1:278] 17 10 15 21 17 13 14 12 15 12 ...\n $ SHO           : num [1:278] 8 5 13 13 10 7 12 10 12 6 ...\n $ SV            : num [1:278] 30 43 44 42 68 42 50 47 45 37 ...\n $ IPouts        : num [1:278] 4289 4306 4326 4362 4348 ...\n $ HA            : num [1:278] 1527 1445 1439 1482 1313 ...\n $ HRA           : num [1:278] 128 161 92 106 106 121 124 163 154 130 ...\n $ BBA           : num [1:278] 579 537 519 544 548 572 543 518 661 496 ...\n $ SOA           : num [1:278] 938 776 997 944 914 ...\n $ E             : num [1:278] 158 93 123 142 124 124 102 117 131 131 ...\n $ DP            : num [1:278] 133 151 154 186 169 136 126 146 178 124 ...\n $ FP            : num [1:278] 0.974 0.985 0.98 0.978 0.98 0.98 0.983 0.981 0.979 0.978 ...\n $ name          : chr [1:278] \"Atlanta Braves\" \"Baltimore Orioles\" \"Boston Red Sox\" \"California Angels\" ...\n $ park          : chr [1:278] \"Atlanta-Fulton County Stadium\" \"Memorial Stadium\" \"Fenway Park II\" \"Anaheim Stadium\" ...\n $ attendance    : num [1:278] 980129 2415189 2528986 2555688 2002357 ...\n $ BPF           : num [1:278] 105 97 105 97 98 108 105 100 101 97 ...\n $ PPF           : num [1:278] 106 98 105 97 98 108 105 100 102 98 ...\n $ teamIDBR      : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ teamIDlahman45: chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ teamIDretro   : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df)\n\n [1] \"yearID\"         \"lgID\"           \"teamID\"         \"franchID\"      \n [5] \"divID\"          \"Rank\"           \"G\"              \"Ghome\"         \n [9] \"W\"              \"L\"              \"DivWin\"         \"WCWin\"         \n[13] \"LgWin\"          \"WSWin\"          \"R\"              \"AB\"            \n[17] \"H\"              \"X2B\"            \"X3B\"            \"HR\"            \n[21] \"BB\"             \"SO\"             \"SB\"             \"CS\"            \n[25] \"HBP\"            \"SF\"             \"RA\"             \"ER\"            \n[29] \"ERA\"            \"CG\"             \"SHO\"            \"SV\"            \n[33] \"IPouts\"         \"HA\"             \"HRA\"            \"BBA\"           \n[37] \"SOA\"            \"E\"              \"DP\"             \"FP\"            \n[41] \"name\"           \"park\"           \"attendance\"     \"BPF\"           \n[45] \"PPF\"            \"teamIDBR\"       \"teamIDlahman45\" \"teamIDretro\""
  },
  {
    "objectID": "posts/05_Scatterplots/05_scatterplots.html#examples",
    "href": "posts/05_Scatterplots/05_scatterplots.html#examples",
    "title": "5: Scatterplots",
    "section": "Examples",
    "text": "Examples\n\n12345\n\n\n\nx <- rnorm(100, mean = 0, sd = 1)\ny <- correlatedValues(x, r = -0.9)\n\ncor_value <- cor(x,y, use = \"pairwise.complete.obs\")\n\ndf_for_graph <- data.frame(x,y)\ndf_for_graph |>\n  ggplot(aes(x = x, y = y)) +\n  geom_point() +\n  labs(title = \"Correlation Example\",\n       subtitle = paste0(\"r = \", round(cor_value, 4), \n                         \", strongly and negatively correlated\"),\n       caption = \"Spark 01\")\n\n\n\n\n\n\n\nx <- rnorm(100, mean = 0, sd = 1)\ny <- correlatedValues(x, r = -0.5)\n\ncor_value <- cor(x,y, use = \"pairwise.complete.obs\")\n\ndf_for_graph <- data.frame(x,y)\ndf_for_graph |>\n  ggplot(aes(x = x, y = y)) +\n  geom_point() +\n  labs(title = \"Correlation Example\",\n       subtitle = paste0(\"r = \", round(cor_value, 4), \n                         \", slightly and negatively correlated\"),\n       caption = \"Spark 01\")\n\n\n\n\n\n\n\nx <- rnorm(100, mean = 0, sd = 1)\ny <- correlatedValues(x, r = 0)\n\ncor_value <- cor(x,y, use = \"pairwise.complete.obs\")\n\ndf_for_graph <- data.frame(x,y)\ndf_for_graph |>\n  ggplot(aes(x = x, y = y)) +\n  geom_point() +\n  labs(title = \"Correlation Example\",\n       subtitle = paste0(\"r = \", round(cor_value, 4), \n                         \", virtually uncorrelated\"),\n       caption = \"Spark 01\")\n\n\n\n\n\n\n\nx <- rnorm(100, mean = 0, sd = 1)\ny <- correlatedValues(x, r = 0.5)\n\ncor_value <- cor(x,y, use = \"pairwise.complete.obs\")\n\ndf_for_graph <- data.frame(x,y)\ndf_for_graph |>\n  ggplot(aes(x = x, y = y)) +\n  geom_point() +\n  labs(title = \"Correlation Example\",\n       subtitle = paste0(\"r = \", round(cor_value, 4), \n                         \", slightly and positively correlated\"),\n       caption = \"Spark 01\")\n\n\n\n\n\n\n\nx <- rnorm(100, mean = 0, sd = 1)\ny <- correlatedValues(x, r = 0.9)\n\ncor_value <- cor(x,y, use = \"pairwise.complete.obs\")\n\ndf_for_graph <- data.frame(x,y)\ndf_for_graph |>\n  ggplot(aes(x = x, y = y)) +\n  geom_point() +\n  labs(title = \"Correlation Example\",\n       subtitle = paste0(\"r = \", round(cor_value, 4), \n                         \", strongly and positively correlated\"),\n       caption = \"Spark 01\")"
  },
  {
    "objectID": "posts/05_Scatterplots/05_scatterplots.html#adding-correlation-to-visualization",
    "href": "posts/05_Scatterplots/05_scatterplots.html#adding-correlation-to-visualization",
    "title": "5: Scatterplots",
    "section": "Adding Correlation to Visualization",
    "text": "Adding Correlation to Visualization\n\ncor_value <- df |>\n  summarize(r = cor(R, W, use = \"pairwise.complete.obs\")) |>\n  unlist()\n\ndf |>\n  ggplot(aes(x = R, y = W)) +\n  geom_point(color = \"blue\") + #makes the scatterplot\n  labs(title = \"MLB Data\",\n       subtitle = paste0(\"r = \", round(cor_value, 4), \n                         \", slightly and positively correlated\"),\n       caption = \"seasons 1990 to 1999\",\n       x = \"runs scored\",\n       y = \"wins\")"
  },
  {
    "objectID": "posts/06_Regression/06_regression.html",
    "href": "posts/06_Regression/06_regression.html",
    "title": "6: Linear Regression",
    "section": "",
    "text": "The tidyverse suite of packages are streamlined to make data science processes easier. We can load the packages with the library() command.\n\nlibrary(\"Lahman\")\nlibrary(\"tidyverse\")\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.1\n✔ readr   2.1.2     ✔ forcats 0.5.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\n\ncorrelatedValues = function(x, r = 0.9){\n  r2 = r**2\n  ve = 1-r2\n  SD = sqrt(ve)\n  e  = rnorm(length(x), mean=0, sd=SD)\n  y  = r*x + e\n  return(y)\n}"
  },
  {
    "objectID": "posts/06_Regression/06_regression.html#look-at-the-data",
    "href": "posts/06_Regression/06_regression.html#look-at-the-data",
    "title": "6: Linear Regression",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df)\n\n# A tibble: 6 × 48\n  yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n   <dbl> <chr> <chr>  <chr>    <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>  <chr>\n1   1990 NL    ATL    ATL      W         6   162    81    65    97 N      <NA> \n2   1990 AL    BAL    BAL      E         5   161    80    76    85 N      <NA> \n3   1990 AL    BOS    BOS      E         1   162    81    88    74 Y      <NA> \n4   1990 AL    CAL    ANA      W         4   162    81    80    82 N      <NA> \n5   1990 AL    CHA    CHW      W         2   162    80    94    68 N      <NA> \n6   1990 NL    CHN    CHC      E         4   162    81    77    85 N      <NA> \n# … with 36 more variables: LgWin <chr>, WSWin <chr>, R <dbl>, AB <dbl>,\n#   H <dbl>, X2B <dbl>, X3B <dbl>, HR <dbl>, BB <dbl>, SO <dbl>, SB <dbl>,\n#   CS <dbl>, HBP <dbl>, SF <dbl>, RA <dbl>, ER <dbl>, ERA <dbl>, CG <dbl>,\n#   SHO <dbl>, SV <dbl>, IPouts <dbl>, HA <dbl>, HRA <dbl>, BBA <dbl>,\n#   SOA <dbl>, E <dbl>, DP <dbl>, FP <dbl>, name <chr>, park <chr>,\n#   attendance <dbl>, BPF <dbl>, PPF <dbl>, teamIDBR <chr>,\n#   teamIDlahman45 <chr>, teamIDretro <chr>\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df, give.attr = FALSE)\n\nspec_tbl_df [278 × 48] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ yearID        : num [1:278] 1990 1990 1990 1990 1990 1990 1990 1990 1990 1990 ...\n $ lgID          : chr [1:278] \"NL\" \"AL\" \"AL\" \"AL\" ...\n $ teamID        : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ franchID      : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"ANA\" ...\n $ divID         : chr [1:278] \"W\" \"E\" \"E\" \"W\" ...\n $ Rank          : num [1:278] 6 5 1 4 2 4 1 4 3 4 ...\n $ G             : num [1:278] 162 161 162 162 162 162 162 162 162 162 ...\n $ Ghome         : num [1:278] 81 80 81 81 80 81 81 81 81 81 ...\n $ W             : num [1:278] 65 76 88 80 94 77 91 77 79 75 ...\n $ L             : num [1:278] 97 85 74 82 68 85 71 85 83 87 ...\n $ DivWin        : chr [1:278] \"N\" \"N\" \"Y\" \"N\" ...\n $ WCWin         : chr [1:278] NA NA NA NA ...\n $ LgWin         : chr [1:278] \"N\" \"N\" \"N\" \"N\" ...\n $ WSWin         : chr [1:278] \"N\" \"N\" \"N\" \"N\" ...\n $ R             : num [1:278] 682 669 699 690 682 690 693 732 750 573 ...\n $ AB            : num [1:278] 5504 5410 5516 5570 5402 ...\n $ H             : num [1:278] 1376 1328 1502 1448 1393 ...\n $ X2B           : num [1:278] 263 234 298 237 251 240 284 266 241 209 ...\n $ X3B           : num [1:278] 26 22 31 27 44 36 40 41 32 32 ...\n $ HR            : num [1:278] 162 132 106 147 106 136 125 110 172 94 ...\n $ BB            : num [1:278] 473 660 598 566 478 406 466 458 634 548 ...\n $ SO            : num [1:278] 1010 962 795 1000 903 869 913 836 952 997 ...\n $ SB            : num [1:278] 92 94 53 69 140 151 166 107 82 179 ...\n $ CS            : num [1:278] 55 52 52 43 90 50 66 52 57 83 ...\n $ HBP           : num [1:278] 27 40 28 28 36 30 42 29 34 28 ...\n $ SF            : num [1:278] 31 41 44 45 47 51 42 61 41 41 ...\n $ RA            : num [1:278] 821 698 664 706 633 774 597 737 754 656 ...\n $ ER            : num [1:278] 727 644 596 613 581 695 549 676 697 581 ...\n $ ERA           : num [1:278] 4.58 4.04 3.72 3.79 3.61 4.34 3.39 4.26 4.39 3.61 ...\n $ CG            : num [1:278] 17 10 15 21 17 13 14 12 15 12 ...\n $ SHO           : num [1:278] 8 5 13 13 10 7 12 10 12 6 ...\n $ SV            : num [1:278] 30 43 44 42 68 42 50 47 45 37 ...\n $ IPouts        : num [1:278] 4289 4306 4326 4362 4348 ...\n $ HA            : num [1:278] 1527 1445 1439 1482 1313 ...\n $ HRA           : num [1:278] 128 161 92 106 106 121 124 163 154 130 ...\n $ BBA           : num [1:278] 579 537 519 544 548 572 543 518 661 496 ...\n $ SOA           : num [1:278] 938 776 997 944 914 ...\n $ E             : num [1:278] 158 93 123 142 124 124 102 117 131 131 ...\n $ DP            : num [1:278] 133 151 154 186 169 136 126 146 178 124 ...\n $ FP            : num [1:278] 0.974 0.985 0.98 0.978 0.98 0.98 0.983 0.981 0.979 0.978 ...\n $ name          : chr [1:278] \"Atlanta Braves\" \"Baltimore Orioles\" \"Boston Red Sox\" \"California Angels\" ...\n $ park          : chr [1:278] \"Atlanta-Fulton County Stadium\" \"Memorial Stadium\" \"Fenway Park II\" \"Anaheim Stadium\" ...\n $ attendance    : num [1:278] 980129 2415189 2528986 2555688 2002357 ...\n $ BPF           : num [1:278] 105 97 105 97 98 108 105 100 101 97 ...\n $ PPF           : num [1:278] 106 98 105 97 98 108 105 100 102 98 ...\n $ teamIDBR      : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ teamIDlahman45: chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ teamIDretro   : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df)\n\n [1] \"yearID\"         \"lgID\"           \"teamID\"         \"franchID\"      \n [5] \"divID\"          \"Rank\"           \"G\"              \"Ghome\"         \n [9] \"W\"              \"L\"              \"DivWin\"         \"WCWin\"         \n[13] \"LgWin\"          \"WSWin\"          \"R\"              \"AB\"            \n[17] \"H\"              \"X2B\"            \"X3B\"            \"HR\"            \n[21] \"BB\"             \"SO\"             \"SB\"             \"CS\"            \n[25] \"HBP\"            \"SF\"             \"RA\"             \"ER\"            \n[29] \"ERA\"            \"CG\"             \"SHO\"            \"SV\"            \n[33] \"IPouts\"         \"HA\"             \"HRA\"            \"BBA\"           \n[37] \"SOA\"            \"E\"              \"DP\"             \"FP\"            \n[41] \"name\"           \"park\"           \"attendance\"     \"BPF\"           \n[45] \"PPF\"            \"teamIDBR\"       \"teamIDlahman45\" \"teamIDretro\""
  },
  {
    "objectID": "posts/07_WAR/07_WAR.html",
    "href": "posts/07_WAR/07_WAR.html",
    "title": "7: WAR",
    "section": "",
    "text": "“As originally defined by Bill James in 1980, sabermetrics is ‘the search for objective knowledge about baseball.’ James coined the phrase in part to honor the Society for American Baseball Research.”\n\n\n\n\nBill James"
  },
  {
    "objectID": "posts/07_WAR/07_WAR.html#box-scores",
    "href": "posts/07_WAR/07_WAR.html#box-scores",
    "title": "7: WAR",
    "section": "Box Scores",
    "text": "Box Scores\n\n\n\nBox Score in a Newspaper"
  },
  {
    "objectID": "posts/07_WAR/07_WAR.html#war",
    "href": "posts/07_WAR/07_WAR.html#war",
    "title": "7: WAR",
    "section": "WAR",
    "text": "WAR\n\n\n\n\n\n\nWAR\n\n\n\nWAR (wins above replacement) gives an analyst a sense of how much a player contributes to the team versus a replacement-level player.\n\n\n\n\n\n\n\n\nTwo Types of WAR\n\n\n\nThere are two main sources that calculate WAR, but with different formulas:\n\nBaseball Reference\nFanGraphs"
  },
  {
    "objectID": "posts/07_WAR/07_WAR.html#bwar",
    "href": "posts/07_WAR/07_WAR.html#bwar",
    "title": "7: WAR",
    "section": "bWAR",
    "text": "bWAR\nThe WAR calculation over at Baseball Reference is called bWAR, and the overall scheme is\n\\[bWar = (P_{\\text{runs}} - A_{\\text{runs}}) + (A_{\\text{runs}} - R_{\\text{runs}})\\]\nwhose terms are computed with factors such as\n\nbatting runs\nbaserunning runs\nruns added or lost due to grounding into double plays\nfielding runs\npositional adjustment runs\n\nThese factors are compared to the league average where a value of 0 represents an average player.\n\n\n\n\n\n\nwOBA\n\n\n\n\n\nBatting runs depends on weighted runs above average\n\\[wRAA = \\frac{wOBA - 0.320}{1.25}*(AB + BB + HBP + SF + SH)\\]\nwhere\n\\[wOBA = \\frac{ \\alpha_{1}*uBB + \\alpha_{2}*HBP + \\alpha_{3}*1B + \\alpha_{4}*2B + \\alpha_{5}*3B + \\alpha_{6}*HR + \\alpha_{7}*SB - \\alpha_{8}*CS }{ AB + BB - IBB + HBP + SF }\\]"
  },
  {
    "objectID": "posts/07_WAR/07_WAR.html#fwar",
    "href": "posts/07_WAR/07_WAR.html#fwar",
    "title": "7: WAR",
    "section": "fWAR",
    "text": "fWAR\nThe FanGraphs formula for position players involves offense, defense, and baserunning.\n\\[fWAR = wRAA + UZR + position + \\frac{20}{600}*PA\\]\n\nruns above average\nultimate zone rating\nultimate base running\npark factors"
  },
  {
    "objectID": "posts/07_WAR/07_WAR.html#comparing-current-players",
    "href": "posts/07_WAR/07_WAR.html#comparing-current-players",
    "title": "7: WAR",
    "section": "Comparing Current Players",
    "text": "Comparing Current Players\n\n\nAaron Judge\n\nbWAR: 10.6\nfWAR: 11.4\n\n\n\nShohei Ohtani\n\nbWAR: 9.6\nfWAR: 9.5\n\n\n\nSandy Alcantara\n\nbWAR: 8.1\nfWAR: 5.7"
  },
  {
    "objectID": "posts/07_WAR/07_WAR.html#comparing-careers",
    "href": "posts/07_WAR/07_WAR.html#comparing-careers",
    "title": "7: WAR",
    "section": "Comparing Careers",
    "text": "Comparing Careers\n\n\nAaron Judge\n\nbWAR: 36.9\nfWAR: 36.5\n\n\n\nShohei Ohtani\n\nbWAR: 24.7\nfWAR: 13.3\n\n\n\nSandy Alcantara\n\nbWAR: 16.7\nfWAR: 13.2"
  },
  {
    "objectID": "posts/07_WAR/07_WAR.html#references",
    "href": "posts/07_WAR/07_WAR.html#references",
    "title": "7: WAR",
    "section": "References",
    "text": "References\n\nhttps://www.baseball-reference.com/about/war_explained.shtml\nhttps://en.wikipedia.org/wiki/Box_score_(baseball)\nhttps://www.fangraphs.com/leaders/war\nhttps://sabr.org/sabermetrics\nhttps://en.wikipedia.org/wiki/Wins_Above_Replacement"
  },
  {
    "objectID": "posts/08_Odds/08_Odds.html",
    "href": "posts/08_Odds/08_Odds.html",
    "title": "8: Odds",
    "section": "",
    "text": "The odds that an event occurs with probability \\(p\\) (\\(0 \\leq p \\leq 1\\)) is\n\\[\\text{odds = } \\frac{p}{1-p}\\]\nIn gambling, we often see moneyline odds (AKA American odds) per $100 bet. For example,\n\nodds: 4 to 1\nmoneyline odds: +400\ni.e. a $100 bet could win $400"
  },
  {
    "objectID": "posts/08_Odds/08_Odds.html#todays-moneyline-odds",
    "href": "posts/08_Odds/08_Odds.html#todays-moneyline-odds",
    "title": "8: Odds",
    "section": "Today’s Moneyline Odds",
    "text": "Today’s Moneyline Odds\nBetMGM is the official gambling partner of Major League Baseball"
  },
  {
    "objectID": "posts/08_Odds/08_Odds.html#world-series-odds",
    "href": "posts/08_Odds/08_Odds.html#world-series-odds",
    "title": "8: Odds",
    "section": "World Series Odds",
    "text": "World Series Odds\nWebsites like VegasInsider present futures."
  },
  {
    "objectID": "posts/08_Odds/08_Odds.html#black-sox",
    "href": "posts/08_Odds/08_Odds.html#black-sox",
    "title": "8: Odds",
    "section": "Black Sox",
    "text": "Black Sox\nIn 1919, eight players of the Chicago White Sox were accusing of throwing games, including the World Series.\n\n\n\nBlack Sox Scandal"
  },
  {
    "objectID": "posts/08_Odds/08_Odds.html#pete-rose",
    "href": "posts/08_Odds/08_Odds.html#pete-rose",
    "title": "8: Odds",
    "section": "Pete Rose",
    "text": "Pete Rose\nIn 1986, Pete Rose—the all-time MLB leader in hits and manager of the Cincinnati Reds—was accused to betting on their own baseball games.\n\nbanned from MLB\nnot reinstated; not in the Hall of Fame\n\n\n\n\nPete Rose"
  },
  {
    "objectID": "posts/08_Odds/08_Odds.html#presence",
    "href": "posts/08_Odds/08_Odds.html#presence",
    "title": "8: Odds",
    "section": "Presence",
    "text": "Presence\nHere is a map of online gambling in the United States"
  },
  {
    "objectID": "posts/08_Odds/08_Odds.html#references",
    "href": "posts/08_Odds/08_Odds.html#references",
    "title": "8: Odds",
    "section": "References",
    "text": "References\n\nBetMGM — official gambling partner of MLB\nOdds Wikipedia article\nOddshark\nVegasInsider"
  },
  {
    "objectID": "posts/09_Determination/09_determination.html",
    "href": "posts/09_Determination/09_determination.html",
    "title": "9: Coefficient of Determination",
    "section": "",
    "text": "The tidyverse suite of packages are streamlined to make data science processes easier. We can load the packages with the library() command.\n\nlibrary(\"Lahman\")\nlibrary(\"tidyverse\")\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.1\n✔ readr   2.1.2     ✔ forcats 0.5.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\n\ncorrelatedValues = function(x, r = 0.9){\n  r2 = r**2\n  ve = 1-r2\n  SD = sqrt(ve)\n  e  = rnorm(length(x), mean=0, sd=SD)\n  y  = r*x + e\n  return(y)\n}"
  },
  {
    "objectID": "posts/09_Determination/09_determination.html#look-at-the-data",
    "href": "posts/09_Determination/09_determination.html#look-at-the-data",
    "title": "9: Coefficient of Determination",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df)\n\n# A tibble: 6 × 48\n  yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n   <dbl> <chr> <chr>  <chr>    <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>  <chr>\n1   1990 NL    ATL    ATL      W         6   162    81    65    97 N      <NA> \n2   1990 AL    BAL    BAL      E         5   161    80    76    85 N      <NA> \n3   1990 AL    BOS    BOS      E         1   162    81    88    74 Y      <NA> \n4   1990 AL    CAL    ANA      W         4   162    81    80    82 N      <NA> \n5   1990 AL    CHA    CHW      W         2   162    80    94    68 N      <NA> \n6   1990 NL    CHN    CHC      E         4   162    81    77    85 N      <NA> \n# … with 36 more variables: LgWin <chr>, WSWin <chr>, R <dbl>, AB <dbl>,\n#   H <dbl>, X2B <dbl>, X3B <dbl>, HR <dbl>, BB <dbl>, SO <dbl>, SB <dbl>,\n#   CS <dbl>, HBP <dbl>, SF <dbl>, RA <dbl>, ER <dbl>, ERA <dbl>, CG <dbl>,\n#   SHO <dbl>, SV <dbl>, IPouts <dbl>, HA <dbl>, HRA <dbl>, BBA <dbl>,\n#   SOA <dbl>, E <dbl>, DP <dbl>, FP <dbl>, name <chr>, park <chr>,\n#   attendance <dbl>, BPF <dbl>, PPF <dbl>, teamIDBR <chr>,\n#   teamIDlahman45 <chr>, teamIDretro <chr>\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df, give.attr = FALSE)\n\nspec_tbl_df [278 × 48] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ yearID        : num [1:278] 1990 1990 1990 1990 1990 1990 1990 1990 1990 1990 ...\n $ lgID          : chr [1:278] \"NL\" \"AL\" \"AL\" \"AL\" ...\n $ teamID        : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ franchID      : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"ANA\" ...\n $ divID         : chr [1:278] \"W\" \"E\" \"E\" \"W\" ...\n $ Rank          : num [1:278] 6 5 1 4 2 4 1 4 3 4 ...\n $ G             : num [1:278] 162 161 162 162 162 162 162 162 162 162 ...\n $ Ghome         : num [1:278] 81 80 81 81 80 81 81 81 81 81 ...\n $ W             : num [1:278] 65 76 88 80 94 77 91 77 79 75 ...\n $ L             : num [1:278] 97 85 74 82 68 85 71 85 83 87 ...\n $ DivWin        : chr [1:278] \"N\" \"N\" \"Y\" \"N\" ...\n $ WCWin         : chr [1:278] NA NA NA NA ...\n $ LgWin         : chr [1:278] \"N\" \"N\" \"N\" \"N\" ...\n $ WSWin         : chr [1:278] \"N\" \"N\" \"N\" \"N\" ...\n $ R             : num [1:278] 682 669 699 690 682 690 693 732 750 573 ...\n $ AB            : num [1:278] 5504 5410 5516 5570 5402 ...\n $ H             : num [1:278] 1376 1328 1502 1448 1393 ...\n $ X2B           : num [1:278] 263 234 298 237 251 240 284 266 241 209 ...\n $ X3B           : num [1:278] 26 22 31 27 44 36 40 41 32 32 ...\n $ HR            : num [1:278] 162 132 106 147 106 136 125 110 172 94 ...\n $ BB            : num [1:278] 473 660 598 566 478 406 466 458 634 548 ...\n $ SO            : num [1:278] 1010 962 795 1000 903 869 913 836 952 997 ...\n $ SB            : num [1:278] 92 94 53 69 140 151 166 107 82 179 ...\n $ CS            : num [1:278] 55 52 52 43 90 50 66 52 57 83 ...\n $ HBP           : num [1:278] 27 40 28 28 36 30 42 29 34 28 ...\n $ SF            : num [1:278] 31 41 44 45 47 51 42 61 41 41 ...\n $ RA            : num [1:278] 821 698 664 706 633 774 597 737 754 656 ...\n $ ER            : num [1:278] 727 644 596 613 581 695 549 676 697 581 ...\n $ ERA           : num [1:278] 4.58 4.04 3.72 3.79 3.61 4.34 3.39 4.26 4.39 3.61 ...\n $ CG            : num [1:278] 17 10 15 21 17 13 14 12 15 12 ...\n $ SHO           : num [1:278] 8 5 13 13 10 7 12 10 12 6 ...\n $ SV            : num [1:278] 30 43 44 42 68 42 50 47 45 37 ...\n $ IPouts        : num [1:278] 4289 4306 4326 4362 4348 ...\n $ HA            : num [1:278] 1527 1445 1439 1482 1313 ...\n $ HRA           : num [1:278] 128 161 92 106 106 121 124 163 154 130 ...\n $ BBA           : num [1:278] 579 537 519 544 548 572 543 518 661 496 ...\n $ SOA           : num [1:278] 938 776 997 944 914 ...\n $ E             : num [1:278] 158 93 123 142 124 124 102 117 131 131 ...\n $ DP            : num [1:278] 133 151 154 186 169 136 126 146 178 124 ...\n $ FP            : num [1:278] 0.974 0.985 0.98 0.978 0.98 0.98 0.983 0.981 0.979 0.978 ...\n $ name          : chr [1:278] \"Atlanta Braves\" \"Baltimore Orioles\" \"Boston Red Sox\" \"California Angels\" ...\n $ park          : chr [1:278] \"Atlanta-Fulton County Stadium\" \"Memorial Stadium\" \"Fenway Park II\" \"Anaheim Stadium\" ...\n $ attendance    : num [1:278] 980129 2415189 2528986 2555688 2002357 ...\n $ BPF           : num [1:278] 105 97 105 97 98 108 105 100 101 97 ...\n $ PPF           : num [1:278] 106 98 105 97 98 108 105 100 102 98 ...\n $ teamIDBR      : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ teamIDlahman45: chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ teamIDretro   : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ..."
  },
  {
    "objectID": "posts/09_Determination/09_determination.html#coefficient-of-determination",
    "href": "posts/09_Determination/09_determination.html#coefficient-of-determination",
    "title": "9: Coefficient of Determination",
    "section": "Coefficient of Determination",
    "text": "Coefficient of Determination\n\\[R^{2} = \\frac{\\text{explained variation}}{\\text{overall variation}}\\]\n\nfor linear regression, \\(R^{2}\\) is literally the square of the correlation coefficient \\(r\\)\nwant more “explained variation”, so larger numbers are better. Suggested interpretation:\n\nno effect: \\(0 < R^{2} < 0.4\\)\nmild effect: \\(0.4 < R^{2} < 0.7\\)\nlarge effect: \\(0.7 < R^{2} < 1.0\\)"
  },
  {
    "objectID": "posts/09_Determination/09_determination.html#custom-variables",
    "href": "posts/09_Determination/09_determination.html#custom-variables",
    "title": "9: Coefficient of Determination",
    "section": "Custom Variables",
    "text": "Custom Variables\n\\[BA = \\frac{H}{AB}\\]\n\\[OBP = \\frac{H + BB + HBP}{AB}\\]\n\\[SLG = \\frac{H + 2B + 2*3B + 3*HR}{AB}\\]\n\\[OPS = OBP + SLG\\]\n\ndf <- df |>\n  mutate(BA = H/AB,       #batting average\n         OBP = (H + BB + HBP)/AB, #on-base percentage\n         SLG = (H + X2B + 2*X3B + 3*HR)/AB, #slugging percentage\n         OPS = OBP + SLG) #on-base plus slugging"
  },
  {
    "objectID": "posts/10_Scandal/10_Scandal.html",
    "href": "posts/10_Scandal/10_Scandal.html",
    "title": "10: Scandals",
    "section": "",
    "text": "image source: NBC Sports\n\n\n\nThe 2017 Astros won the World Series\nWins (out of 162 games):\n\n2011: 56\n2012: 55\n2013: 51\n2014: 70\n2015: 86\n2016: 84\n2017: 101"
  },
  {
    "objectID": "posts/10_Scandal/10_Scandal.html#strikeout-reduction",
    "href": "posts/10_Scandal/10_Scandal.html#strikeout-reduction",
    "title": "10: Scandals",
    "section": "Strikeout Reduction",
    "text": "Strikeout Reduction\n\n\n\n\n\nimage source: DRaysBay\n\n\n\nThe 2017 Astros won the World Series\nTeam strikeouts (Astros’ hitters):\n\n2011: 1164\n2012: 1365\n2013: 1535\n2014: 1442\n2015: 1392\n2016: 1452\n2017: 1087"
  },
  {
    "objectID": "posts/10_Scandal/10_Scandal.html#mike-fiers",
    "href": "posts/10_Scandal/10_Scandal.html#mike-fiers",
    "title": "10: Scandals",
    "section": "Mike Fiers",
    "text": "Mike Fiers\n\n\n\n\n\nimage source: WhiteCleatBeat\n\n\n\n“Mike Fiers Admits Astros Stole Signs Electronically During 2017 MLB Season” — Bleacher Report, November, 2019\n\n2011 - 2015: Milwaukee\n2015 - 2018: Houston\n2018 - 2019: Detroit\n2019 - 2021: Oakland\n\nHouston was also accused of cheating during the 2018 and 2019 playoffs."
  },
  {
    "objectID": "posts/10_Scandal/10_Scandal.html#danny-farquhar",
    "href": "posts/10_Scandal/10_Scandal.html#danny-farquhar",
    "title": "10: Scandals",
    "section": "Danny Farquhar",
    "text": "Danny Farquhar\n\n\n\n\n\nimage source: CBS Sports\n\n\n\n“there was a banging from the dugout, almost like a bat hitting the bat rack every time a changeup signal got put down. After the third one, I stepped off. I was throwing some really good changeups and they were getting fouled off. After the third bang, I stepped off.” — referring to a White Sox at Astros game on September 21, 2017\nJomboy Media breakdown"
  },
  {
    "objectID": "posts/10_Scandal/10_Scandal.html#fallout",
    "href": "posts/10_Scandal/10_Scandal.html#fallout",
    "title": "10: Scandals",
    "section": "Fallout",
    "text": "Fallout\n\n“Manager AJ Hinch and general manager Jeff Luhnow were suspended for a year by Major League Baseball”\n“The Astros were fined $5 million … They also will forfeit their first- and second-round picks in the 2020 and 2021 drafts.”\nInterviews with Astros players"
  },
  {
    "objectID": "posts/10_Scandal/10_Scandal.html#pitch-type",
    "href": "posts/10_Scandal/10_Scandal.html#pitch-type",
    "title": "10: Scandals",
    "section": "Pitch Type",
    "text": "Pitch Type\n\nanalysis credit: Fangraphs"
  },
  {
    "objectID": "posts/10_Scandal/10_Scandal.html#splits",
    "href": "posts/10_Scandal/10_Scandal.html#splits",
    "title": "10: Scandals",
    "section": "Splits",
    "text": "Splits\n\nanalysis credit: Fangraphs\nAlso: highest-leverage at-bats"
  },
  {
    "objectID": "posts/10_Scandal/10_Scandal.html#splits-1",
    "href": "posts/10_Scandal/10_Scandal.html#splits-1",
    "title": "10: Scandals",
    "section": "Splits",
    "text": "Splits\n\nanalysis credit: Fangraphs"
  },
  {
    "objectID": "posts/10_Scandal/10_Scandal.html#references",
    "href": "posts/10_Scandal/10_Scandal.html#references",
    "title": "10: Scandals",
    "section": "References",
    "text": "References\n\nhttps://www.baseball-reference.com/teams/HOU/\nhttps://bleacherreport.com/articles/2862408-mike-fiers-admits-astros-stole-signs-electronically-during-2017-mlb-season\nhttps://www.chicagotribune.com/sports/white-sox/ct-cb-houston-astros-sign-stealing-danny-farquhar-white-sox-20200117-ckfumn2wfzhabbb25ltl24gfb4-story.html https://blogs.fangraphs.com/which-players-might-have-benefited-from-the-astros-sign-stealing/\n\nReddit deep dives:\n\nhttps://old.reddit.com/r/baseball/comments/fdh3iu/astros_cheating_analysis/\nhttps://old.reddit.com/r/baseball/comments/f9csgg/analyzing_astros_trash_can_banging_signal/\nhttps://old.reddit.com/r/baseball/comments/dw1u4g/astros_sign_stealing_video_footage_megathread_for/\nhttps://old.reddit.com/r/baseball/comments/evopl2/adams_im_an_astros_fan_to_understand_the_scope_of/\nhttps://old.reddit.com/r/baseball/comments/exkkoz/i_went_through_the_footage_provided_by_uatadams/"
  },
  {
    "objectID": "posts/11_Confidence_Intervals/11_Confidence_Intervals.html",
    "href": "posts/11_Confidence_Intervals/11_Confidence_Intervals.html",
    "title": "11: Confidence Intervals",
    "section": "",
    "text": "library(\"infer\")\nlibrary(\"moderndive\")\n\nWarning: package 'moderndive' was built under R version 4.2.2\n\nlibrary(\"patchwork\") #easy graph layouts\nlibrary(\"tidyverse\")\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.1\n✔ readr   2.1.2     ✔ forcats 0.5.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nSource: Statistical Inference via Data Science: A Modern Dive into R and the Tidyverse"
  },
  {
    "objectID": "posts/11_Confidence_Intervals/11_Confidence_Intervals.html#look-at-the-data",
    "href": "posts/11_Confidence_Intervals/11_Confidence_Intervals.html#look-at-the-data",
    "title": "11: Confidence Intervals",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df)\n\n# A tibble: 6 × 48\n  yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n   <dbl> <chr> <chr>  <chr>    <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>  <chr>\n1   1990 NL    ATL    ATL      W         6   162    81    65    97 N      <NA> \n2   1990 AL    BAL    BAL      E         5   161    80    76    85 N      <NA> \n3   1990 AL    BOS    BOS      E         1   162    81    88    74 Y      <NA> \n4   1990 AL    CAL    ANA      W         4   162    81    80    82 N      <NA> \n5   1990 AL    CHA    CHW      W         2   162    80    94    68 N      <NA> \n6   1990 NL    CHN    CHC      E         4   162    81    77    85 N      <NA> \n# … with 36 more variables: LgWin <chr>, WSWin <chr>, R <dbl>, AB <dbl>,\n#   H <dbl>, X2B <dbl>, X3B <dbl>, HR <dbl>, BB <dbl>, SO <dbl>, SB <dbl>,\n#   CS <dbl>, HBP <dbl>, SF <dbl>, RA <dbl>, ER <dbl>, ERA <dbl>, CG <dbl>,\n#   SHO <dbl>, SV <dbl>, IPouts <dbl>, HA <dbl>, HRA <dbl>, BBA <dbl>,\n#   SOA <dbl>, E <dbl>, DP <dbl>, FP <dbl>, name <chr>, park <chr>,\n#   attendance <dbl>, BPF <dbl>, PPF <dbl>, teamIDBR <chr>,\n#   teamIDlahman45 <chr>, teamIDretro <chr>\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df, give.attr = FALSE)\n\nspec_tbl_df [278 × 48] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ yearID        : num [1:278] 1990 1990 1990 1990 1990 1990 1990 1990 1990 1990 ...\n $ lgID          : chr [1:278] \"NL\" \"AL\" \"AL\" \"AL\" ...\n $ teamID        : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ franchID      : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"ANA\" ...\n $ divID         : chr [1:278] \"W\" \"E\" \"E\" \"W\" ...\n $ Rank          : num [1:278] 6 5 1 4 2 4 1 4 3 4 ...\n $ G             : num [1:278] 162 161 162 162 162 162 162 162 162 162 ...\n $ Ghome         : num [1:278] 81 80 81 81 80 81 81 81 81 81 ...\n $ W             : num [1:278] 65 76 88 80 94 77 91 77 79 75 ...\n $ L             : num [1:278] 97 85 74 82 68 85 71 85 83 87 ...\n $ DivWin        : chr [1:278] \"N\" \"N\" \"Y\" \"N\" ...\n $ WCWin         : chr [1:278] NA NA NA NA ...\n $ LgWin         : chr [1:278] \"N\" \"N\" \"N\" \"N\" ...\n $ WSWin         : chr [1:278] \"N\" \"N\" \"N\" \"N\" ...\n $ R             : num [1:278] 682 669 699 690 682 690 693 732 750 573 ...\n $ AB            : num [1:278] 5504 5410 5516 5570 5402 ...\n $ H             : num [1:278] 1376 1328 1502 1448 1393 ...\n $ X2B           : num [1:278] 263 234 298 237 251 240 284 266 241 209 ...\n $ X3B           : num [1:278] 26 22 31 27 44 36 40 41 32 32 ...\n $ HR            : num [1:278] 162 132 106 147 106 136 125 110 172 94 ...\n $ BB            : num [1:278] 473 660 598 566 478 406 466 458 634 548 ...\n $ SO            : num [1:278] 1010 962 795 1000 903 869 913 836 952 997 ...\n $ SB            : num [1:278] 92 94 53 69 140 151 166 107 82 179 ...\n $ CS            : num [1:278] 55 52 52 43 90 50 66 52 57 83 ...\n $ HBP           : num [1:278] 27 40 28 28 36 30 42 29 34 28 ...\n $ SF            : num [1:278] 31 41 44 45 47 51 42 61 41 41 ...\n $ RA            : num [1:278] 821 698 664 706 633 774 597 737 754 656 ...\n $ ER            : num [1:278] 727 644 596 613 581 695 549 676 697 581 ...\n $ ERA           : num [1:278] 4.58 4.04 3.72 3.79 3.61 4.34 3.39 4.26 4.39 3.61 ...\n $ CG            : num [1:278] 17 10 15 21 17 13 14 12 15 12 ...\n $ SHO           : num [1:278] 8 5 13 13 10 7 12 10 12 6 ...\n $ SV            : num [1:278] 30 43 44 42 68 42 50 47 45 37 ...\n $ IPouts        : num [1:278] 4289 4306 4326 4362 4348 ...\n $ HA            : num [1:278] 1527 1445 1439 1482 1313 ...\n $ HRA           : num [1:278] 128 161 92 106 106 121 124 163 154 130 ...\n $ BBA           : num [1:278] 579 537 519 544 548 572 543 518 661 496 ...\n $ SOA           : num [1:278] 938 776 997 944 914 ...\n $ E             : num [1:278] 158 93 123 142 124 124 102 117 131 131 ...\n $ DP            : num [1:278] 133 151 154 186 169 136 126 146 178 124 ...\n $ FP            : num [1:278] 0.974 0.985 0.98 0.978 0.98 0.98 0.983 0.981 0.979 0.978 ...\n $ name          : chr [1:278] \"Atlanta Braves\" \"Baltimore Orioles\" \"Boston Red Sox\" \"California Angels\" ...\n $ park          : chr [1:278] \"Atlanta-Fulton County Stadium\" \"Memorial Stadium\" \"Fenway Park II\" \"Anaheim Stadium\" ...\n $ attendance    : num [1:278] 980129 2415189 2528986 2555688 2002357 ...\n $ BPF           : num [1:278] 105 97 105 97 98 108 105 100 101 97 ...\n $ PPF           : num [1:278] 106 98 105 97 98 108 105 100 102 98 ...\n $ teamIDBR      : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ teamIDlahman45: chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ teamIDretro   : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df)\n\n [1] \"yearID\"         \"lgID\"           \"teamID\"         \"franchID\"      \n [5] \"divID\"          \"Rank\"           \"G\"              \"Ghome\"         \n [9] \"W\"              \"L\"              \"DivWin\"         \"WCWin\"         \n[13] \"LgWin\"          \"WSWin\"          \"R\"              \"AB\"            \n[17] \"H\"              \"X2B\"            \"X3B\"            \"HR\"            \n[21] \"BB\"             \"SO\"             \"SB\"             \"CS\"            \n[25] \"HBP\"            \"SF\"             \"RA\"             \"ER\"            \n[29] \"ERA\"            \"CG\"             \"SHO\"            \"SV\"            \n[33] \"IPouts\"         \"HA\"             \"HRA\"            \"BBA\"           \n[37] \"SOA\"            \"E\"              \"DP\"             \"FP\"            \n[41] \"name\"           \"park\"           \"attendance\"     \"BPF\"           \n[45] \"PPF\"            \"teamIDBR\"       \"teamIDlahman45\" \"teamIDretro\""
  },
  {
    "objectID": "posts/11_Confidence_Intervals/11_Confidence_Intervals.html#one-sample",
    "href": "posts/11_Confidence_Intervals/11_Confidence_Intervals.html#one-sample",
    "title": "11: Confidence Intervals",
    "section": "One Sample",
    "text": "One Sample\n\nHR_sample <- df |> select(HR)\n\n\np1 <- HR_sample |>\n  ggplot(aes(x = HR)) +\n  geom_histogram(binwidth = 5, color = \"black\", fill = \"blue\") +\n  labs(title = \"Distribution of Home Runs\",\n       subtitle = \"Based on a sample of data\",\n       caption = \"Spark 01\") +\n  theme_minimal()\n\n# print\np1"
  },
  {
    "objectID": "posts/11_Confidence_Intervals/11_Confidence_Intervals.html#resampling",
    "href": "posts/11_Confidence_Intervals/11_Confidence_Intervals.html#resampling",
    "title": "11: Confidence Intervals",
    "section": "Resampling",
    "text": "Resampling\nUsing the available sample of data to fabricate another sample is called resampling.\n\nHR_resampled <- HR_sample |>\n  sample_n(replace = TRUE, size = nrow(HR_sample))\n\n\np2 <- HR_resampled |>\n  ggplot(aes(x = HR)) +\n  geom_histogram(binwidth = 5, color = \"black\", fill = \"blue\") +\n  labs(title = \"Distribution of Home Runs\",\n       subtitle = \"Based on a sample of data\",\n       caption = \"Spark 01\") +\n  theme_minimal()\n\n# print\np2\n\n\n\n\n\n# patchwork\np1 + p2"
  },
  {
    "objectID": "posts/11_Confidence_Intervals/11_Confidence_Intervals.html#resampling-many-times",
    "href": "posts/11_Confidence_Intervals/11_Confidence_Intervals.html#resampling-many-times",
    "title": "11: Confidence Intervals",
    "section": "Resampling Many Times",
    "text": "Resampling Many Times\n\nsummary(HR_sample)\n\n       HR       \n Min.   : 68.0  \n 1st Qu.:120.0  \n Median :147.0  \n Mean   :148.7  \n 3rd Qu.:172.0  \n Max.   :264.0  \n\n\nSuppose now that we have each person in a 23-student classroom repeat the act of drawing that home run data with replacement.\n\nHR_resampled_many <- HR_sample |>\n  rep_sample_n(replace = TRUE, reps = 23, size = nrow(HR_sample))\n\n\nHR_resampled_many %>%\n  group_by(replicate) %>%\n  mutate(mean_HR = mean(HR)) %>%\n  ungroup() %>%\n  select(replicate, mean_HR) %>%\n  distinct() %>%\n  ggplot(aes(x = mean_HR)) +\n  geom_histogram(binwidth = 1, color = \"black\", fill = \"blue\") +\n  labs(title = \"Resampling Results\",\n       subtitle = \"N = 23 resamples\",\n       caption = \"Source: Modern Dive\")\n\n\n\n\nOut of curiosity, let us push this process to \\(N = 1337\\) resamples.\n\nHR_resampled_many <- HR_sample |>\n  rep_sample_n(replace = TRUE, reps = 1337, size = nrow(HR_sample))\n\n\nHR_resampled_many %>%\n  group_by(replicate) %>%\n  mutate(mean_HR = mean(HR)) %>%\n  ungroup() %>%\n  select(replicate, mean_HR) %>%\n  distinct() %>%\n  ggplot(aes(x = mean_HR)) +\n  geom_histogram(binwidth = 1, color = \"black\", fill = \"blue\") +\n  labs(title = \"Resampling Results\",\n       subtitle = \"N = 23 resamples\",\n       caption = \"Source: Modern Dive\")"
  },
  {
    "objectID": "posts/13_Clustering/13_Clustering.html",
    "href": "posts/13_Clustering/13_Clustering.html",
    "title": "13: Clustering",
    "section": "",
    "text": "library(\"tidymodels\")\n\nWarning: package 'tidymodels' was built under R version 4.2.2\n\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.0.0 ──\n\n\n✔ broom        1.0.1     ✔ recipes      1.0.3\n✔ dials        1.1.0     ✔ rsample      1.1.0\n✔ dplyr        1.0.9     ✔ tibble       3.1.8\n✔ ggplot2      3.3.6     ✔ tidyr        1.2.0\n✔ infer        1.0.3     ✔ tune         1.0.1\n✔ modeldata    1.0.1     ✔ workflows    1.1.2\n✔ parsnip      1.0.3     ✔ workflowsets 1.0.0\n✔ purrr        0.3.4     ✔ yardstick    1.1.0\n\n\nWarning: package 'broom' was built under R version 4.2.2\n\n\nWarning: package 'dials' was built under R version 4.2.2\n\n\nWarning: package 'infer' was built under R version 4.2.2\n\n\nWarning: package 'modeldata' was built under R version 4.2.2\n\n\nWarning: package 'parsnip' was built under R version 4.2.2\n\n\nWarning: package 'recipes' was built under R version 4.2.2\n\n\nWarning: package 'rsample' was built under R version 4.2.2\n\n\nWarning: package 'tune' was built under R version 4.2.2\n\n\nWarning: package 'workflowsets' was built under R version 4.2.2\n\n\nWarning: package 'yardstick' was built under R version 4.2.2\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard() masks scales::discard()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ recipes::step()  masks stats::step()\n• Learn how to get started at https://www.tidymodels.org/start/\n\nlibrary(\"tidyverse\")\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ readr   2.1.2     ✔ forcats 0.5.1\n✔ stringr 1.4.1     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ readr::col_factor() masks scales::col_factor()\n✖ purrr::discard()    masks scales::discard()\n✖ dplyr::filter()     masks stats::filter()\n✖ stringr::fixed()    masks recipes::fixed()\n✖ dplyr::lag()        masks stats::lag()\n✖ readr::spec()       masks yardstick::spec()\nSource: tidymodels\nhttps://www.tidymodels.org/learn/statistics/k-means/"
  },
  {
    "objectID": "posts/13_Clustering/13_Clustering.html#look-at-the-data",
    "href": "posts/13_Clustering/13_Clustering.html#look-at-the-data",
    "title": "13: Clustering",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df)\n\n# A tibble: 6 × 48\n  yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n   <dbl> <chr> <chr>  <chr>    <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>  <chr>\n1   1990 NL    ATL    ATL      W         6   162    81    65    97 N      <NA> \n2   1990 AL    BAL    BAL      E         5   161    80    76    85 N      <NA> \n3   1990 AL    BOS    BOS      E         1   162    81    88    74 Y      <NA> \n4   1990 AL    CAL    ANA      W         4   162    81    80    82 N      <NA> \n5   1990 AL    CHA    CHW      W         2   162    80    94    68 N      <NA> \n6   1990 NL    CHN    CHC      E         4   162    81    77    85 N      <NA> \n# … with 36 more variables: LgWin <chr>, WSWin <chr>, R <dbl>, AB <dbl>,\n#   H <dbl>, X2B <dbl>, X3B <dbl>, HR <dbl>, BB <dbl>, SO <dbl>, SB <dbl>,\n#   CS <dbl>, HBP <dbl>, SF <dbl>, RA <dbl>, ER <dbl>, ERA <dbl>, CG <dbl>,\n#   SHO <dbl>, SV <dbl>, IPouts <dbl>, HA <dbl>, HRA <dbl>, BBA <dbl>,\n#   SOA <dbl>, E <dbl>, DP <dbl>, FP <dbl>, name <chr>, park <chr>,\n#   attendance <dbl>, BPF <dbl>, PPF <dbl>, teamIDBR <chr>,\n#   teamIDlahman45 <chr>, teamIDretro <chr>\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df, give.attr = FALSE)\n\nspc_tbl_ [278 × 48] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ yearID        : num [1:278] 1990 1990 1990 1990 1990 1990 1990 1990 1990 1990 ...\n $ lgID          : chr [1:278] \"NL\" \"AL\" \"AL\" \"AL\" ...\n $ teamID        : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ franchID      : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"ANA\" ...\n $ divID         : chr [1:278] \"W\" \"E\" \"E\" \"W\" ...\n $ Rank          : num [1:278] 6 5 1 4 2 4 1 4 3 4 ...\n $ G             : num [1:278] 162 161 162 162 162 162 162 162 162 162 ...\n $ Ghome         : num [1:278] 81 80 81 81 80 81 81 81 81 81 ...\n $ W             : num [1:278] 65 76 88 80 94 77 91 77 79 75 ...\n $ L             : num [1:278] 97 85 74 82 68 85 71 85 83 87 ...\n $ DivWin        : chr [1:278] \"N\" \"N\" \"Y\" \"N\" ...\n $ WCWin         : chr [1:278] NA NA NA NA ...\n $ LgWin         : chr [1:278] \"N\" \"N\" \"N\" \"N\" ...\n $ WSWin         : chr [1:278] \"N\" \"N\" \"N\" \"N\" ...\n $ R             : num [1:278] 682 669 699 690 682 690 693 732 750 573 ...\n $ AB            : num [1:278] 5504 5410 5516 5570 5402 ...\n $ H             : num [1:278] 1376 1328 1502 1448 1393 ...\n $ X2B           : num [1:278] 263 234 298 237 251 240 284 266 241 209 ...\n $ X3B           : num [1:278] 26 22 31 27 44 36 40 41 32 32 ...\n $ HR            : num [1:278] 162 132 106 147 106 136 125 110 172 94 ...\n $ BB            : num [1:278] 473 660 598 566 478 406 466 458 634 548 ...\n $ SO            : num [1:278] 1010 962 795 1000 903 869 913 836 952 997 ...\n $ SB            : num [1:278] 92 94 53 69 140 151 166 107 82 179 ...\n $ CS            : num [1:278] 55 52 52 43 90 50 66 52 57 83 ...\n $ HBP           : num [1:278] 27 40 28 28 36 30 42 29 34 28 ...\n $ SF            : num [1:278] 31 41 44 45 47 51 42 61 41 41 ...\n $ RA            : num [1:278] 821 698 664 706 633 774 597 737 754 656 ...\n $ ER            : num [1:278] 727 644 596 613 581 695 549 676 697 581 ...\n $ ERA           : num [1:278] 4.58 4.04 3.72 3.79 3.61 4.34 3.39 4.26 4.39 3.61 ...\n $ CG            : num [1:278] 17 10 15 21 17 13 14 12 15 12 ...\n $ SHO           : num [1:278] 8 5 13 13 10 7 12 10 12 6 ...\n $ SV            : num [1:278] 30 43 44 42 68 42 50 47 45 37 ...\n $ IPouts        : num [1:278] 4289 4306 4326 4362 4348 ...\n $ HA            : num [1:278] 1527 1445 1439 1482 1313 ...\n $ HRA           : num [1:278] 128 161 92 106 106 121 124 163 154 130 ...\n $ BBA           : num [1:278] 579 537 519 544 548 572 543 518 661 496 ...\n $ SOA           : num [1:278] 938 776 997 944 914 ...\n $ E             : num [1:278] 158 93 123 142 124 124 102 117 131 131 ...\n $ DP            : num [1:278] 133 151 154 186 169 136 126 146 178 124 ...\n $ FP            : num [1:278] 0.974 0.985 0.98 0.978 0.98 0.98 0.983 0.981 0.979 0.978 ...\n $ name          : chr [1:278] \"Atlanta Braves\" \"Baltimore Orioles\" \"Boston Red Sox\" \"California Angels\" ...\n $ park          : chr [1:278] \"Atlanta-Fulton County Stadium\" \"Memorial Stadium\" \"Fenway Park II\" \"Anaheim Stadium\" ...\n $ attendance    : num [1:278] 980129 2415189 2528986 2555688 2002357 ...\n $ BPF           : num [1:278] 105 97 105 97 98 108 105 100 101 97 ...\n $ PPF           : num [1:278] 106 98 105 97 98 108 105 100 102 98 ...\n $ teamIDBR      : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ teamIDlahman45: chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ teamIDretro   : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df)\n\n [1] \"yearID\"         \"lgID\"           \"teamID\"         \"franchID\"      \n [5] \"divID\"          \"Rank\"           \"G\"              \"Ghome\"         \n [9] \"W\"              \"L\"              \"DivWin\"         \"WCWin\"         \n[13] \"LgWin\"          \"WSWin\"          \"R\"              \"AB\"            \n[17] \"H\"              \"X2B\"            \"X3B\"            \"HR\"            \n[21] \"BB\"             \"SO\"             \"SB\"             \"CS\"            \n[25] \"HBP\"            \"SF\"             \"RA\"             \"ER\"            \n[29] \"ERA\"            \"CG\"             \"SHO\"            \"SV\"            \n[33] \"IPouts\"         \"HA\"             \"HRA\"            \"BBA\"           \n[37] \"SOA\"            \"E\"              \"DP\"             \"FP\"            \n[41] \"name\"           \"park\"           \"attendance\"     \"BPF\"           \n[45] \"PPF\"            \"teamIDBR\"       \"teamIDlahman45\" \"teamIDretro\""
  },
  {
    "objectID": "posts/13_Clustering/13_Clustering.html#example-of-clustering-old-code",
    "href": "posts/13_Clustering/13_Clustering.html#example-of-clustering-old-code",
    "title": "13: Clustering",
    "section": "Example of Clustering (old code)",
    "text": "Example of Clustering (old code)\n\ndf_num <- df |>\n  select(H, HR)\nhead(df_num)\n\n# A tibble: 6 × 2\n      H    HR\n  <dbl> <dbl>\n1  1376   162\n2  1328   132\n3  1502   106\n4  1448   147\n5  1393   106\n6  1474   136\n\n\n\n# scatterplot\ndf |>\n  select(H, HR) |>\n  ggplot(aes(x = H, y = HR)) +\n  geom_point() +\n  labs(title = \"MLB Offense\",\n       subtitle = \"1990s\",\n       caption = \"Spark 01\") +\n  theme_minimal()\n\n\n\n\n\n# k-means clustering\nclusters <- df |>\n  select(H, HR) |>\n  kmeans(centers = 5)\n\n\n# extraction\ndf_centers <- data.frame(x1 = clusters$centers[,1],\n                         x2 = clusters$centers[,2])\ndf <- df |>\n  mutate(cluster = clusters$cluster)\n\n\ndf |>\n  ggplot(aes(x = H, y = HR)) +\n  geom_point() +\n  \n  # centers\n  geom_point(aes(x = x1, y = x2),\n             color = \"red\",\n             data = df_centers,\n             size = 5) +\n  \nlabs(title = \"MLB Offense\",\n       subtitle = \"1990s\",\n       caption = \"Spark 01\") +\n  theme_minimal()\n\n\n\n\n\ndf |>\n  ggplot(aes(x = H, y = HR)) +\n  geom_point(aes(color = factor(cluster))) +\n  \nlabs(title = \"MLB Offense\",\n       subtitle = \"1990s\",\n       caption = \"Spark 01\") +\n  theme_minimal()\n\n\n\n\n\nHow many clusters should we use?"
  },
  {
    "objectID": "posts/13_Clustering/13_Clustering.html#clustering-with-tidymodels-modern-code",
    "href": "posts/13_Clustering/13_Clustering.html#clustering-with-tidymodels-modern-code",
    "title": "13: Clustering",
    "section": "Clustering with TidyModels (modern code)",
    "text": "Clustering with TidyModels (modern code)\n\n# remember to use numerical columns\ndf_num <- df |>\n  select(H, HR)\n\n# try k = 1 cluster, k = 2 clusters, etc.\nkclusts <- \n  tibble(k = 1:9) %>%\n  mutate(\n    kclust = map(k, ~kmeans(df_num, .x)),\n    tidied = map(kclust, tidy),\n    glanced = map(kclust, glance),\n    augmented = map(kclust, augment, df_num)\n  )\n\n\n# visualizing 9 possibilities\nkclusts |>\n  unnest(cols = c(augmented)) |>\n  ggplot(aes(x = H, y = HR)) +\n  geom_point(aes(color = .cluster), alpha = 0.75) +\n  facet_wrap( ~ k) +\n  theme_minimal()\n\n\n\n\n\n# Scree plot\nkclusts |>\n  unnest(cols = c(glanced)) |>\n  ggplot(aes(k, tot.withinss)) +\n  geom_line() +\n  geom_point() +\n  labs(title = \"Scree Plot\",\n       subtitle = \"for k-means clustering\",\n       caption = \"Spark 01\",\n       x = \"number of clusters\",\n       y = \"total within SSE\") +\n  scale_x_continuous(breaks = 1:9) +\n  theme_minimal()\n\n\n\n\nAfter finding the “elbow” for the recommended number of clusters\n\n# visualizing clustering\nkclusts |>\n  unnest(cols = c(augmented)) |>\n  filter(k == 3) |> #put number of clusters here\n  ggplot(aes(x = H, y = HR)) +\n  geom_point(aes(color = .cluster), alpha = 0.75) +\n  labs(title = \"MLB Offense\",\n       subtitle = \"1990s\",\n       caption = \"Spark 01\") +\n  theme_minimal()"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html",
    "href": "posts/01_syllabus/01_introductions.html",
    "title": "1: Introduction",
    "section": "",
    "text": "Fall 2023\n\n\n\n\n\n\n\nCourse Description\n\n\n\nThis semester seminar will introduce budding analysts to the field of growing field of sports analytics. Instruction will start with baseball sabermetrics, but will evolve to allow students to research, discuss, and become an expert of their favorite professional sport. Activities include participation in fantasy sports, corporate presentations, debates, and computer programming calculations.\n\n\n\n\n\n\n\n\n  \n    \n    \n      section\n      CRN\n      day\n      time\n      room\n    \n  \n  \n    26\n38119\nTuTh\n230 PM to 420 PM\nGRAN 120\n    36\n38322\nTuTh\n1130 AM to 120 PM\nADMIN 265\n    28\n38533\nTuTh\n430 PM to 620 PM\nGRAN 120"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#introducting-the-presenter",
    "href": "posts/01_syllabus/01_introductions.html#introducting-the-presenter",
    "title": "1: Introduction",
    "section": "Introducting the Presenter",
    "text": "Introducting the Presenter\n\n\n\nLecturer: Derek Sollberger\n\nI go by “Derek” or “teacher”\n\nBA in Applied Mathematics, UC Berkeley\nMS in Applied Mathematics, CSULB\nMS in Applied Mathematics, UC Merced"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#introducting-the-presenter-1",
    "href": "posts/01_syllabus/01_introductions.html#introducting-the-presenter-1",
    "title": "1: Introduction",
    "section": "Introducting the Presenter",
    "text": "Introducting the Presenter\n\n\n\n\n\nContinuing Lecturer in Applied Mathematics\n10+ years of teaching at UC Merced\nCourses:\n\nBio 18: Data Science\nBio 175: Biostatistics\nBio 184: Python for Bioinformatics\nMath 32: Probability and Statistics"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#current-research-in-pedagogy",
    "href": "posts/01_syllabus/01_introductions.html#current-research-in-pedagogy",
    "title": "1: Introduction",
    "section": "Current Research in Pedagogy",
    "text": "Current Research in Pedagogy\n\n\n\n\n\nactive learning\ncomputer programming\nflipped classrooms"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#identity-statement",
    "href": "posts/01_syllabus/01_introductions.html#identity-statement",
    "title": "1: Introduction",
    "section": "Identity Statement",
    "text": "Identity Statement\n\n\n\nOriginally from Los Angeles\nMath: easier to understand through graphs\nComputer Programming: years of experience with R, Python, MATLAB, PHP, HTML, etc.\nLearning: drawn to puzzles and manageable tasks\nPersonality: shy, introvert"
  },
  {
    "objectID": "posts/02_Exploring Data/02_exploring_data.html",
    "href": "posts/02_Exploring Data/02_exploring_data.html",
    "title": "02_-_Exploring Data",
    "section": "",
    "text": "The tidyverse suite of packages are streamlined to make data science processes easier. We can load the packages with the library() command.\n\nlibrary(\"tidyverse\")\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "posts/02_Exploring Data/02_exploring_data.html#load-the-tidyverse",
    "href": "posts/02_Exploring Data/02_exploring_data.html#load-the-tidyverse",
    "title": "02_-_Exploring Data",
    "section": "",
    "text": "The tidyverse suite of packages are streamlined to make data science processes easier. We can load the packages with the library() command.\n\nlibrary(\"tidyverse\")\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "posts/02_Exploring Data/02_exploring_data.html#load-the-data",
    "href": "posts/02_Exploring Data/02_exploring_data.html#load-the-data",
    "title": "02_-_Exploring Data",
    "section": "Load the Data",
    "text": "Load the Data\nSince we have CSV files (comma-separated values), the read_csv() command in the readr package will be convenient here. I tend to save data set into a variable df (stands for “data frame”).\nToday’s data set comes from Baseball Reference. In particular, we are looking at the team batting statistics for the 2021 season.\n\ndf &lt;- readr::read_csv(\"baseball_2021_batting.csv\")\n\nRows: 32 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): Tm\ndbl (28): #Bat, BatAge, R/G, G, PA, AB, R, H, 2B, 3B, HR, RBI, SB, CS, BB, S...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "posts/02_Exploring Data/02_exploring_data.html#look-at-the-data",
    "href": "posts/02_Exploring Data/02_exploring_data.html#look-at-the-data",
    "title": "02_-_Exploring Data",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df)\n\n# A tibble: 6 × 29\n  Tm         `#Bat` BatAge `R/G`     G    PA    AB     R     H  `2B`  `3B`    HR\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Arizona D…     64   28.9  4.19   162  6144  5489   679  1297   308    31   144\n2 Atlanta B…     56   28.2  4.91   161  6056  5363   790  1307   269    20   239\n3 Baltimore…     62   26.7  4.07   162  5983  5420   659  1296   266    15   195\n4 Boston Re…     56   28    5.12   162  6122  5495   829  1434   330    23   219\n5 Chicago C…     69   29.1  4.35   162  5972  5306   705  1255   225    26   210\n6 Chicago W…     47   28    4.91   162  6084  5357   796  1373   275    22   190\n# ℹ 17 more variables: RBI &lt;dbl&gt;, SB &lt;dbl&gt;, CS &lt;dbl&gt;, BB &lt;dbl&gt;, SO &lt;dbl&gt;,\n#   BA &lt;dbl&gt;, OBP &lt;dbl&gt;, SLG &lt;dbl&gt;, OPS &lt;dbl&gt;, `OPS+` &lt;dbl&gt;, TB &lt;dbl&gt;,\n#   GDP &lt;dbl&gt;, HBP &lt;dbl&gt;, SH &lt;dbl&gt;, SF &lt;dbl&gt;, IBB &lt;dbl&gt;, LOB &lt;dbl&gt;\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df, give.attr = FALSE)\n\nspc_tbl_ [32 × 29] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Tm    : chr [1:32] \"Arizona Diamondbacks\" \"Atlanta Braves\" \"Baltimore Orioles\" \"Boston Red Sox\" ...\n $ #Bat  : num [1:32] 64 56 62 56 69 47 55 48 45 49 ...\n $ BatAge: num [1:32] 28.9 28.2 26.7 28 29.1 28 28.9 26.7 28.1 28.1 ...\n $ R/G   : num [1:32] 4.19 4.91 4.07 5.12 4.35 4.91 4.85 4.43 4.59 4.3 ...\n $ G     : num [1:32] 162 161 162 162 162 162 162 162 161 162 ...\n $ PA    : num [1:32] 6144 6056 5983 6122 5972 ...\n $ AB    : num [1:32] 5489 5363 5420 5495 5306 ...\n $ R     : num [1:32] 679 790 659 829 705 796 786 717 739 697 ...\n $ H     : num [1:32] 1297 1307 1296 1434 1255 ...\n $ 2B    : num [1:32] 308 269 266 330 225 275 295 248 275 236 ...\n $ 3B    : num [1:32] 31 20 15 23 26 22 13 22 34 37 ...\n $ HR    : num [1:32] 144 239 195 219 210 190 222 203 182 179 ...\n $ RBI   : num [1:32] 644 762 632 783 672 757 756 686 709 675 ...\n $ SB    : num [1:32] 43 59 54 40 86 57 36 109 76 88 ...\n $ CS    : num [1:32] 16 19 23 21 37 20 24 17 23 25 ...\n $ BB    : num [1:32] 537 549 451 512 502 586 553 453 491 490 ...\n $ SO    : num [1:32] 1465 1453 1454 1386 1596 ...\n $ BA    : num [1:32] 0.236 0.244 0.239 0.261 0.237 0.256 0.249 0.238 0.249 0.242 ...\n $ OBP   : num [1:32] 0.309 0.319 0.304 0.328 0.312 0.336 0.328 0.303 0.317 0.308 ...\n $ SLG   : num [1:32] 0.382 0.435 0.402 0.449 0.407 0.422 0.431 0.407 0.414 0.399 ...\n $ OPS   : num [1:32] 0.692 0.754 0.705 0.777 0.719 0.758 0.759 0.71 0.731 0.707 ...\n $ OPS+  : num [1:32] 86 98 91 106 93 106 95 94 87 95 ...\n $ TB    : num [1:32] 2099 2333 2177 2467 2162 ...\n $ GDP   : num [1:32] 99 81 105 100 133 139 129 105 98 113 ...\n $ HBP   : num [1:32] 54 67 65 61 92 78 105 64 58 44 ...\n $ SH    : num [1:32] 32 32 14 10 40 24 35 20 48 17 ...\n $ SF    : num [1:32] 28 43 31 42 30 39 45 36 36 50 ...\n $ IBB   : num [1:32] 24 36 12 22 17 10 22 18 24 8 ...\n $ LOB   : num [1:32] 1152 1072 1046 1093 1019 ...\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df)\n\n [1] \"Tm\"     \"#Bat\"   \"BatAge\" \"R/G\"    \"G\"      \"PA\"     \"AB\"     \"R\"     \n [9] \"H\"      \"2B\"     \"3B\"     \"HR\"     \"RBI\"    \"SB\"     \"CS\"     \"BB\"    \n[17] \"SO\"     \"BA\"     \"OBP\"    \"SLG\"    \"OPS\"    \"OPS+\"   \"TB\"     \"GDP\"   \n[25] \"HBP\"    \"SH\"     \"SF\"     \"IBB\"    \"LOB\""
  },
  {
    "objectID": "posts/02_Exploring Data/02_exploring_data.html#measures-of-centrality",
    "href": "posts/02_Exploring Data/02_exploring_data.html#measures-of-centrality",
    "title": "02_-_Exploring Data",
    "section": "Measures of Centrality",
    "text": "Measures of Centrality\nNow let us practice computing means and medians of some of the numerical data.\n\nmean(df$HR)\n\n[1] 377.6875\n\n\nDuring the 2021 season, MLB teams hit about 378 home runs on average.\n\nmedian(df$HR)\n\n[1] 198\n\n\nDuring the 2021 season, the median number of home runs per team was 198.\n\nmean(df$SB)\n\n[1] 140.625\n\n\nDuring the 2021 season, MLB teams stole about 141 bases on average.\n\nmedian(df$SB)\n\n[1] 75\n\n\nDuring the 2021 season, the median number of stolen bases per team was 75."
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#sports-analytics",
    "href": "posts/01_syllabus/01_introductions.html#sports-analytics",
    "title": "1: Introduction",
    "section": "",
    "text": "Fall 2023\n\n\n\n\n\n\n\nCourse Description\n\n\n\nThis semester seminar will introduce budding analysts to the field of growing field of sports analytics. Instruction will start with baseball sabermetrics, but will evolve to allow students to research, discuss, and become an expert of their favorite professional sport. Activities include participation in fantasy sports, corporate presentations, debates, and computer programming calculations.\n\n\n\n\n\n\n\n\n  \n    \n    \n      section\n      CRN\n      day\n      time\n      room\n    \n  \n  \n    26\n38119\nTuTh\n230 PM to 420 PM\nGRAN 120\n    36\n38322\nTuTh\n1130 AM to 120 PM\nADMIN 265\n    28\n38533\nTuTh\n430 PM to 620 PM\nGRAN 120"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#lecturer",
    "href": "posts/01_syllabus/01_introductions.html#lecturer",
    "title": "1: Introduction",
    "section": "Lecturer",
    "text": "Lecturer\n\n\n\n\n\nContinuing Lecturer in Applied Mathematics\n10+ years of teaching at UC Merced\nCourses:\n\nBio 18: Data Science\nBio 175: Biostatistics\nBio 184: Python for Bioinformatics\nMath 32: Probability and Statistics\nSpark 10: Sports Analytics"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#before-lecture",
    "href": "posts/01_syllabus/01_introductions.html#before-lecture",
    "title": "1: Introduction",
    "section": "Before Lecture",
    "text": "Before Lecture\n\n5 percent of semester grade\nreview or preview of statistics ideas\nmust be completed before class\nmay be repeated until correct\nlowest 2 scores dropped"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#essays",
    "href": "posts/01_syllabus/01_introductions.html#essays",
    "title": "1: Introduction",
    "section": "Essays",
    "text": "Essays\n\n20 percent of semester grade\nmost essays will be assigned in segments\n\ntopic proposal\nrough draft\nfinal version\n\none-page maximum per essay\nlowest 2 scores dropped\n\n\n\n\n\n\n\nGrading Rubric\n\n\n\n\n\nEssays—the ones deemed ‘final’—will be graded with the following rubric.\n\n\n\ngrading rubric"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#grammar-review",
    "href": "posts/01_syllabus/01_introductions.html#grammar-review",
    "title": "1: Introduction",
    "section": "Grammar Review",
    "text": "Grammar Review\n\n5 percent of semester grade\nreview of elementary English grammar\nmay be repeated until correct\nlowest 2 scores dropped"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#learnr-assignments",
    "href": "posts/01_syllabus/01_introductions.html#learnr-assignments",
    "title": "1: Introduction",
    "section": "LearnR Assignments",
    "text": "LearnR Assignments\n\n20 percent of semester grade\nThis is where the computer programming learning takes place\nApps are designed to give instant feedback\nlowest score dropped"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#grading-rubric",
    "href": "posts/01_syllabus/01_introductions.html#grading-rubric",
    "title": "1: Introduction",
    "section": "Grading Rubric",
    "text": "Grading Rubric\nEssays—the ones deemed ‘final’—will be graded with the following rubric.\n\n\n\ngrading rubric\n\n\n:::"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#collaboration",
    "href": "posts/01_syllabus/01_introductions.html#collaboration",
    "title": "1: Introduction",
    "section": "Collaboration",
    "text": "Collaboration\n\n25 percent of semester grade\nThis is where the data science learning takes place\nstudents will be present and active in class\nsports groups will work on assigned data-driven tasks"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#presentation",
    "href": "posts/01_syllabus/01_introductions.html#presentation",
    "title": "1: Introduction",
    "section": "Presentation",
    "text": "Presentation\n\n25 percent of semester grade\nsports groups will turn in deliverables (code output)\nsports groups will present their findings and progress weekly\naudience members will provide feedback"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#administrative",
    "href": "posts/01_syllabus/01_introductions.html#administrative",
    "title": "1: Introduction",
    "section": "Administrative",
    "text": "Administrative\n\n\n\n\n\n\nProgram Learning Outcomes\n\n\n\n\n\nAs aligned with the mission of the General Education Program at UC Merced, this Spark section meets the following PLOs:\n\nLife at the Research University: Asking Questions\nReasoning: Thinking Critically\nCommunication: Explaining and Persuading\n\n\n\n\n\n\n\n\n\n\nCourse Learning Outcomes\n\n\n\n\n\n\nUse descriptive statistics to organize, summarize, and analyze data.\nObtain substantial amounts of data about sports athletes and franchises\nArgue about the validity and value of sports metrics\nOrganize information into engaging narratives\n\n\n\n\n\n\n\n\n\n\nStudent Accessibility Services\n\n\n\n\n\nUniversity of California, Merced is committed to creating learning environments that are accessible to all. If you anticipate or experience physical or academic barriers based on a disability, please feel welcome to contact me privately so we can discuss options. In addition, please contact Student Accessibility Services (SAS) at (209) 228-6996 or access@ucmerced.edu as soon as possible to explore reasonable accommodations. All accommodations must have prior approval from Student Accessibility Services on the basis of appropriate documentation.\nIf you anticipate or experience barriers due to pregnancy, temporary medical condition, or injury, please feel welcome to contact me so we can discuss options. You are encouraged to contact the Dean of Students for support and resources at (209) 228-3633 or https://studentaffairs.ucmerced.edu/dean-students.\n\n\n\n\n\n\n\n\n\nAcademic Integrity Policy\n\n\n\n\n\nAcademic integrity is the foundation of an academic community and without it none of the educational or research goals of the university can be achieved. All members of the community are responsible for its academic integrity. Existing policies forbid cheating on examinations, plagiarism and other forms of academic dishonesty. The UC Merced Academic Honesty Policy can be found on the Student Conduct website. Infractions against academic integrity will incur consequences such as an “F” on the assignment/exam and/or a report to the Academic Senate (http://studentconduct.ucmerced.edu)"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#cooperative-classroom",
    "href": "posts/01_syllabus/01_introductions.html#cooperative-classroom",
    "title": "1: Introduction",
    "section": "Cooperative Classroom",
    "text": "Cooperative Classroom\nLearning in a cooperative environment should be stimulating, demanding, and fair. Because this approach to learning is different from the competitive classroom structure that many other courses used to be based on, it is important for us to be clear about mutual expectations. Below are my expectations for students in this class. This set of expectations is intended to maximize debate and exchange of ideas in an atmosphere of mutual respect while preserving individual ownership of ideas and written words. If you feel you do not understand or cannot agree to these expectations, you should discuss this with your instructor and classmates.\n\nStudents are expected to work cooperatively with other members of the class and show respect for the ideas and contributions of other people.\nWhen working as part of a group, students should strive to be good contributors to the group, listen to others, not dominate, and recognize the contributions of others. Students should try to ensure that everyone in the group is welcome to contribute and recognize that everyone contributes in different ways to a group process.\nStudents should explore data, make observations, and develop inferences as part of a group. If you use material from published sources, you must provide appropriate attribution.\n\n\n\n(Students will be asked to acknowledge this document in an online form.)\nThis document has been adapted from Scientific Teaching by Jo Handelsman, Sarah Miller, and Christine Pfund\n\n\n\n\nScientific Teaching"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#pep-talk",
    "href": "posts/01_syllabus/01_introductions.html#pep-talk",
    "title": "1: Introduction",
    "section": "Pep Talk",
    "text": "Pep Talk\nLearning R can be difficult at first—it is like learning a new language, just like Spanish, French, or Chinese. Hadley Wickham—the chief data scientist at RStudio and the author of some amazing R packages you will be using like ggplot2—made this wise observation:\n\n\n\n\n\n\nWisdom from Hadley Wickham\n\n\n\n\n\nIt’s easy when you start out programming to get really frustrated and think, “Oh it’s me, I’m really stupid,” or, “I’m not made out to program.” But, that is absolutely not the case. Everyone gets frustrated. I still get frustrated occasionally when writing R code. It’s just a natural part of programming. So, it happens to everyone and gets less and less over time. Don’t blame yourself. Just take a break, do something fun, and then come back and try again later.\n\n\n\nIf you are finding yourself taking way too long hitting your head against a wall and not understanding, take a break, talk to classmates, ask questions … e-mail [Derek], etc. I promise you can do this.\n—Andrew Heiss, Georgia State University"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#inclusion-statement",
    "href": "posts/01_syllabus/01_introductions.html#inclusion-statement",
    "title": "1: Introduction",
    "section": "Inclusion Statement",
    "text": "Inclusion Statement\nI value all students regardless of their background, country of origin, race, religion, ethnicity, gender, sexual orientation, disability status, etc. and am committed to providing a climate of excellence and inclusiveness within all aspects of the course. If there are aspects of your culture or identity that you would like to share with me as they relate to your success in this class, I am happy to meet to discuss. Likewise, if you have any concerns in this area or facing any special issues or challenges, you are encouraged to discuss the matter with me (set up a meeting by e-mail) with an assurance of full confidentiality (only exception being mandatory reporting of academic integrity code violations or sexual harassment)."
  },
  {
    "objectID": "posts/02_quarto/02_quarto.html",
    "href": "posts/02_quarto/02_quarto.html",
    "title": "2: Quarto",
    "section": "",
    "text": "Quarto is a markdown language that we can use here in RStudio to\n\nwrite R code\ninclude math formulas\ntype reports and descriptions\nand more"
  },
  {
    "objectID": "posts/02_quarto/02_quarto.html#chip",
    "href": "posts/02_quarto/02_quarto.html#chip",
    "title": "2: Quarto",
    "section": "Chip",
    "text": "Chip\n\n\n\n\n\nChip\n\n\n\n\nmajor: chemistry\nfrom: Milipitas\ngoal: gain leadership skills\nvery enthusiastic about university, but is not sure what to expect"
  },
  {
    "objectID": "posts/02_quarto/02_quarto.html#dale",
    "href": "posts/02_quarto/02_quarto.html#dale",
    "title": "2: Quarto",
    "section": "Dale",
    "text": "Dale\n\n\n\n\n\nDale\n\n\n\n\nmajor: psychology\nfrom: Rancho Cordova\ngoal: party every weekend\nhappy to be an adult and start a new stage of life in Merced"
  },
  {
    "objectID": "posts/02_quarto/02_quarto.html#gadget",
    "href": "posts/02_quarto/02_quarto.html#gadget",
    "title": "2: Quarto",
    "section": "Gadget",
    "text": "Gadget\n\n\n\n\n\nGadget\n\n\n\n\nmajor: mechanical engineering\nfrom: West Covina\ngoal: join a robotics club\nhas a lot of computer programming experience, but is not as confident in mathematics"
  },
  {
    "objectID": "posts/02_quarto/02_quarto.html#monty",
    "href": "posts/02_quarto/02_quarto.html#monty",
    "title": "2: Quarto",
    "section": "Monty",
    "text": "Monty\n\n\n\n\n\nMonty\n\n\n\n\nmajor: biology\nfrom: Atwater\ngoal: get the cheese!\nhas no computer programming experience, but is willing to learn"
  },
  {
    "objectID": "posts/02_quarto/02_quarto.html#group-page",
    "href": "posts/02_quarto/02_quarto.html#group-page",
    "title": "2: Quarto",
    "section": "Group Page",
    "text": "Group Page\n\nCreate a page in CatCourses in your group space\n\ninclude your names and e-mail addresses\ncome up with a creative name for your group"
  },
  {
    "objectID": "posts/02_quarto/02_quarto.html#introductions",
    "href": "posts/02_quarto/02_quarto.html#introductions",
    "title": "2: Quarto",
    "section": "Introductions",
    "text": "Introductions\n\nCreate a Quarto slideshow to introduce yourselves\n\na slide for each group member: name, major, goal(s)\na slide of song recommendations\n\nsong titles in italics\nsong artists in boldface"
  },
  {
    "objectID": "posts/03_summaries/03_summaries.html",
    "href": "posts/03_summaries/03_summaries.html",
    "title": "3: Summaries",
    "section": "",
    "text": "Today we are going to try out convenient code packages to quickly explore our sports data sets.\n\nExample\nTo install a package, we use the install.packages() function in the console. For example, when I want to install the skimr package, I use the following line of code.\n\n# install.packages(\"skimr\")\n\n\n# load the code packages\nlibrary(\"skimr\")\nlibrary(\"tidyverse\")\n\nSince we have a CSV file, I recommend using the read_csv() function in the readr package (a part of the tidyverse). At first, I like to save the data into a variable called df (“data frame”).\n\n# load the data\ndf &lt;- readr::read_csv(\"baseball_data_90s.csv\")\n\nRows: 278 Columns: 48\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (13): lgID, teamID, franchID, divID, DivWin, WCWin, LgWin, WSWin, name, ...\ndbl (35): yearID, Rank, G, Ghome, W, L, R, AB, H, X2B, X3B, HR, BB, SO, SB, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nNow, having read the skimr documentation, I can try out its summary function on the df data frame.\n\nskimr::skim(df)\n\n\nData summary\n\n\nName\ndf\n\n\nNumber of rows\n278\n\n\nNumber of columns\n48\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n13\n\n\nnumeric\n35\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nlgID\n0\n1.00\n2\n2\n0\n2\n0\n\n\nteamID\n0\n1.00\n3\n3\n0\n32\n0\n\n\nfranchID\n0\n1.00\n3\n3\n0\n30\n0\n\n\ndivID\n0\n1.00\n1\n1\n0\n3\n0\n\n\nDivWin\n28\n0.90\n1\n1\n0\n2\n0\n\n\nWCWin\n134\n0.52\n1\n1\n0\n2\n0\n\n\nLgWin\n28\n0.90\n1\n1\n0\n2\n0\n\n\nWSWin\n28\n0.90\n1\n1\n0\n2\n0\n\n\nname\n0\n1.00\n12\n21\n0\n31\n0\n\n\npark\n0\n1.00\n7\n29\n0\n43\n0\n\n\nteamIDBR\n0\n1.00\n3\n3\n0\n31\n0\n\n\nteamIDlahman45\n0\n1.00\n3\n3\n0\n32\n0\n\n\nteamIDretro\n0\n1.00\n3\n3\n0\n31\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nyearID\n0\n1\n1994.63\n2.88\n1990.00\n1992.00\n1995.00\n1997.00\n1999.00\n▇▇▇▇▇\n\n\nRank\n0\n1\n3.23\n1.66\n1.00\n2.00\n3.00\n4.00\n7.00\n▇▃▃▃▂\n\n\nG\n0\n1\n155.35\n14.78\n112.00\n161.00\n162.00\n162.00\n163.00\n▁▁▁▁▇\n\n\nGhome\n0\n1\n77.67\n7.55\n44.00\n80.00\n81.00\n81.00\n84.00\n▁▁▁▁▇\n\n\nW\n0\n1\n77.65\n12.83\n47.00\n69.00\n77.00\n86.00\n114.00\n▂▅▇▃▁\n\n\nL\n0\n1\n77.65\n12.80\n40.00\n68.00\n78.00\n86.75\n109.00\n▁▅▇▇▂\n\n\nR\n0\n1\n726.55\n104.51\n466.00\n660.50\n729.00\n790.75\n1009.00\n▂▅▇▃▁\n\n\nAB\n0\n1\n5319.98\n502.22\n3856.00\n5410.00\n5503.00\n5584.75\n5781.00\n▁▁▁▁▇\n\n\nH\n0\n1\n1407.67\n146.34\n963.00\n1363.50\n1423.00\n1494.75\n1684.00\n▁▁▃▇▂\n\n\nX2B\n0\n1\n263.27\n37.26\n159.00\n240.00\n266.00\n289.00\n373.00\n▁▃▇▅▁\n\n\nX3B\n0\n1\n31.07\n8.88\n11.00\n24.00\n30.00\n37.00\n59.00\n▂▇▆▃▁\n\n\nHR\n0\n1\n148.74\n38.90\n68.00\n120.00\n147.00\n172.00\n264.00\n▃▇▇▃▁\n\n\nBB\n0\n1\n532.72\n86.39\n319.00\n475.00\n528.50\n593.75\n770.00\n▂▆▇▅▁\n\n\nSO\n0\n1\n955.18\n134.67\n568.00\n873.25\n956.50\n1055.75\n1268.00\n▁▃▇▇▂\n\n\nSB\n0\n1\n112.88\n38.12\n25.00\n84.00\n109.50\n134.00\n256.00\n▂▇▆▂▁\n\n\nCS\n0\n1\n52.37\n15.83\n13.00\n43.00\n51.00\n60.00\n118.00\n▁▇▅▁▁\n\n\nHBP\n0\n1\n43.38\n14.60\n18.00\n33.00\n41.00\n52.00\n100.00\n▆▇▅▁▁\n\n\nSF\n0\n1\n46.94\n9.81\n23.00\n41.00\n47.00\n52.00\n72.00\n▂▅▇▃▁\n\n\nRA\n0\n1\n726.55\n108.55\n448.00\n655.25\n721.00\n794.00\n1103.00\n▂▇▇▃▁\n\n\nER\n0\n1\n659.85\n101.97\n407.00\n590.00\n652.50\n733.00\n1015.00\n▂▇▇▂▁\n\n\nERA\n0\n1\n4.29\n0.59\n3.06\n3.83\n4.26\n4.70\n6.38\n▅▇▇▂▁\n\n\nCG\n0\n1\n11.55\n5.91\n1.00\n7.00\n10.00\n16.00\n29.00\n▅▇▃▃▁\n\n\nSHO\n0\n1\n8.06\n3.79\n0.00\n5.00\n8.00\n10.75\n24.00\n▃▇▅▁▁\n\n\nSV\n0\n1\n39.81\n8.41\n20.00\n34.00\n40.00\n45.00\n68.00\n▂▇▇▂▁\n\n\nIPouts\n0\n1\n4164.92\n398.65\n2952.00\n4282.50\n4327.50\n4359.75\n4467.00\n▁▁▁▁▇\n\n\nHA\n0\n1\n1407.67\n152.58\n929.00\n1346.25\n1423.50\n1509.75\n1734.00\n▁▁▇▇▂\n\n\nHRA\n0\n1\n148.74\n32.30\n76.00\n124.00\n147.50\n171.00\n241.00\n▂▇▇▃▁\n\n\nBBA\n0\n1\n532.72\n80.39\n288.00\n482.00\n536.50\n586.25\n784.00\n▁▃▇▃▁\n\n\nSOA\n0\n1\n955.18\n139.21\n560.00\n870.25\n964.00\n1044.00\n1245.00\n▁▃▇▇▃\n\n\nE\n0\n1\n113.91\n20.26\n57.00\n101.00\n113.00\n127.00\n174.00\n▁▅▇▃▁\n\n\nDP\n0\n1\n144.59\n23.02\n82.00\n130.00\n146.00\n161.00\n202.00\n▁▅▇▆▂\n\n\nFP\n0\n1\n0.98\n0.00\n0.97\n0.98\n0.98\n0.98\n0.99\n▁▂▇▃▁\n\n\nattendance\n0\n1\n2166373.31\n745438.25\n773277.00\n1638876.50\n2051325.00\n2587245.50\n4483350.00\n▅▇▆▂▁\n\n\nBPF\n0\n1\n100.24\n4.89\n91.00\n98.00\n100.00\n102.00\n129.00\n▃▇▁▁▁\n\n\nPPF\n0\n1\n100.27\n4.99\n91.00\n98.00\n100.00\n102.00\n129.00\n▅▇▁▁▁\n\n\n\n\n\n\n\nExercise\nNow it is your turn! First, instead of skimr, install the package that has been assigned to your group.\n\nDataExplorer::plot_intro()\ndataMaid::visualize()\ngtExtras::gt_plt_summary()\nSmartEDA::ExpData()\nsummarytools::dfSummary()\n\nNext, load the code package using the library() function.\nSince we have a CSV file, I recommend using the read_csv() function in the readr package (a part of the tidyverse). Use the file that is available for your group.\nFinally, look at the documentation for your group’s code package, and use the summary function that has been recommended.\n\n\nWrap Up\n\nClick Render to create the HTML file\nCheck the checkbox next to the HTML file (in the Files pane)\nClick the gear (“More”), and then click “Export”\nUpload the HTML file back into our CatCourses space"
  },
  {
    "objectID": "posts/04_boxplots/04_boxplots.html",
    "href": "posts/04_boxplots/04_boxplots.html",
    "title": "04: Boxplots",
    "section": "",
    "text": "The tidyverse suite of packages are streamlined to make data science processes easier. We can load the packages with the library() command.\n\nlibrary(\"tidyverse\")"
  },
  {
    "objectID": "posts/04_boxplots/04_boxplots.html#load-the-tidyverse",
    "href": "posts/04_boxplots/04_boxplots.html#load-the-tidyverse",
    "title": "04: Boxplots",
    "section": "",
    "text": "The tidyverse suite of packages are streamlined to make data science processes easier. We can load the packages with the library() command.\n\nlibrary(\"tidyverse\")"
  },
  {
    "objectID": "posts/04_boxplots/04_boxplots.html#load-the-data",
    "href": "posts/04_boxplots/04_boxplots.html#load-the-data",
    "title": "04: Boxplots",
    "section": "Load the Data",
    "text": "Load the Data\nSince we have CSV files (comma-separated values), the read_csv() command in the readr package will be convenient here. I tend to save data set into a variable df (stands for “data frame”).\nToday’s data set comes from the Lahman package, which contains a lot of historical data about Major League Baseball.\n\ndf &lt;- readr::read_csv(\"baseball_teams_data.csv\")"
  },
  {
    "objectID": "posts/04_boxplots/04_boxplots.html#look-at-the-data",
    "href": "posts/04_boxplots/04_boxplots.html#look-at-the-data",
    "title": "04: Boxplots",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df)\n\n# A tibble: 6 × 48\n  yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;\n1   2012 NL    ARI    ARI      W         3   162    81    81    81 N      N    \n2   2012 NL    ATL    ATL      E         2   162    81    94    68 N      Y    \n3   2012 AL    BAL    BAL      E         2   162    81    93    69 N      Y    \n4   2012 AL    BOS    BOS      E         5   162    81    69    93 N      N    \n5   2012 AL    CHA    CHW      C         2   162    81    85    77 N      N    \n6   2012 NL    CHN    CHC      C         5   162    81    61   101 N      N    \n# ℹ 36 more variables: LgWin &lt;chr&gt;, WSWin &lt;chr&gt;, R &lt;dbl&gt;, AB &lt;dbl&gt;, H &lt;dbl&gt;,\n#   X2B &lt;dbl&gt;, X3B &lt;dbl&gt;, HR &lt;dbl&gt;, BB &lt;dbl&gt;, SO &lt;dbl&gt;, SB &lt;dbl&gt;, CS &lt;dbl&gt;,\n#   HBP &lt;dbl&gt;, SF &lt;dbl&gt;, RA &lt;dbl&gt;, ER &lt;dbl&gt;, ERA &lt;dbl&gt;, CG &lt;dbl&gt;, SHO &lt;dbl&gt;,\n#   SV &lt;dbl&gt;, IPouts &lt;dbl&gt;, HA &lt;dbl&gt;, HRA &lt;dbl&gt;, BBA &lt;dbl&gt;, SOA &lt;dbl&gt;, E &lt;dbl&gt;,\n#   DP &lt;dbl&gt;, FP &lt;dbl&gt;, name &lt;chr&gt;, park &lt;chr&gt;, attendance &lt;dbl&gt;, BPF &lt;dbl&gt;,\n#   PPF &lt;dbl&gt;, teamIDBR &lt;chr&gt;, teamIDlahman45 &lt;chr&gt;, teamIDretro &lt;chr&gt;\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df, give.attr = FALSE)\n\nspc_tbl_ [300 × 48] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ yearID        : num [1:300] 2012 2012 2012 2012 2012 ...\n $ lgID          : chr [1:300] \"NL\" \"NL\" \"AL\" \"AL\" ...\n $ teamID        : chr [1:300] \"ARI\" \"ATL\" \"BAL\" \"BOS\" ...\n $ franchID      : chr [1:300] \"ARI\" \"ATL\" \"BAL\" \"BOS\" ...\n $ divID         : chr [1:300] \"W\" \"E\" \"E\" \"E\" ...\n $ Rank          : num [1:300] 3 2 2 5 2 5 1 4 5 1 ...\n $ G             : num [1:300] 162 162 162 162 162 162 162 162 162 162 ...\n $ Ghome         : num [1:300] 81 81 81 81 81 81 81 81 81 81 ...\n $ W             : num [1:300] 81 94 93 69 85 61 97 68 64 88 ...\n $ L             : num [1:300] 81 68 69 93 77 101 65 94 98 74 ...\n $ DivWin        : chr [1:300] \"N\" \"N\" \"N\" \"N\" ...\n $ WCWin         : chr [1:300] \"N\" \"Y\" \"Y\" \"N\" ...\n $ LgWin         : chr [1:300] \"N\" \"N\" \"N\" \"N\" ...\n $ WSWin         : chr [1:300] \"N\" \"N\" \"N\" \"N\" ...\n $ R             : num [1:300] 734 700 712 734 748 613 669 667 758 726 ...\n $ AB            : num [1:300] 5462 5425 5560 5604 5518 ...\n $ H             : num [1:300] 1416 1341 1375 1459 1409 ...\n $ X2B           : num [1:300] 307 263 270 339 228 265 296 266 306 279 ...\n $ X3B           : num [1:300] 33 30 16 16 29 36 30 24 52 39 ...\n $ HR            : num [1:300] 165 149 214 165 211 137 172 136 166 163 ...\n $ BB            : num [1:300] 539 567 480 428 461 447 481 555 450 511 ...\n $ SO            : num [1:300] 1266 1289 1315 1197 1203 ...\n $ SB            : num [1:300] 93 101 58 97 109 94 87 110 100 59 ...\n $ CS            : num [1:300] 51 32 29 31 43 45 27 44 40 23 ...\n $ HBP           : num [1:300] 41 34 50 45 65 43 47 59 36 57 ...\n $ SF            : num [1:300] 45 46 30 55 36 24 37 39 39 39 ...\n $ RA            : num [1:300] 688 600 705 806 676 759 588 845 890 670 ...\n $ ER            : num [1:300] 626 549 642 754 646 708 540 766 824 596 ...\n $ ERA           : num [1:300] 3.93 3.42 3.9 4.7 4.02 4.51 3.34 4.78 5.22 3.75 ...\n $ CG            : num [1:300] 4 5 1 6 6 1 9 2 0 9 ...\n $ SHO           : num [1:300] 9 16 10 4 11 9 12 6 7 8 ...\n $ SV            : num [1:300] 39 47 55 35 37 28 56 43 36 40 ...\n $ IPouts        : num [1:300] 4301 4336 4449 4329 4337 ...\n $ HA            : num [1:300] 1432 1310 1433 1449 1365 ...\n $ HRA           : num [1:300] 155 145 184 190 186 175 152 174 198 151 ...\n $ BBA           : num [1:300] 417 464 481 529 503 573 427 543 566 438 ...\n $ SOA           : num [1:300] 1200 1232 1177 1176 1246 ...\n $ E             : num [1:300] 90 86 106 101 70 105 89 96 122 99 ...\n $ DP            : num [1:300] 146 147 151 159 154 148 113 157 139 127 ...\n $ FP            : num [1:300] 0.985 0.986 0.983 0.983 0.988 0.982 0.985 0.984 0.98 0.983 ...\n $ name          : chr [1:300] \"Arizona Diamondbacks\" \"Atlanta Braves\" \"Baltimore Orioles\" \"Boston Red Sox\" ...\n $ park          : chr [1:300] \"Chase Field\" \"Turner Field\" \"Oriole Park at Camden Yards\" \"Fenway Park II\" ...\n $ attendance    : num [1:300] 2177617 2420171 2102240 3043003 1965955 ...\n $ BPF           : num [1:300] 105 102 102 106 106 98 107 93 120 104 ...\n $ PPF           : num [1:300] 106 101 103 106 106 99 107 95 121 103 ...\n $ teamIDBR      : chr [1:300] \"ARI\" \"ATL\" \"BAL\" \"BOS\" ...\n $ teamIDlahman45: chr [1:300] \"ARI\" \"ATL\" \"BAL\" \"BOS\" ...\n $ teamIDretro   : chr [1:300] \"ARI\" \"ATL\" \"BAL\" \"BOS\" ...\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df)\n\n [1] \"yearID\"         \"lgID\"           \"teamID\"         \"franchID\"      \n [5] \"divID\"          \"Rank\"           \"G\"              \"Ghome\"         \n [9] \"W\"              \"L\"              \"DivWin\"         \"WCWin\"         \n[13] \"LgWin\"          \"WSWin\"          \"R\"              \"AB\"            \n[17] \"H\"              \"X2B\"            \"X3B\"            \"HR\"            \n[21] \"BB\"             \"SO\"             \"SB\"             \"CS\"            \n[25] \"HBP\"            \"SF\"             \"RA\"             \"ER\"            \n[29] \"ERA\"            \"CG\"             \"SHO\"            \"SV\"            \n[33] \"IPouts\"         \"HA\"             \"HRA\"            \"BBA\"           \n[37] \"SOA\"            \"E\"              \"DP\"             \"FP\"            \n[41] \"name\"           \"park\"           \"attendance\"     \"BPF\"           \n[45] \"PPF\"            \"teamIDBR\"       \"teamIDlahman45\" \"teamIDretro\""
  },
  {
    "objectID": "posts/04_boxplots/04_boxplots.html#a-starter-boxplot",
    "href": "posts/04_boxplots/04_boxplots.html#a-starter-boxplot",
    "title": "04: Boxplots",
    "section": "A Starter Boxplot",
    "text": "A Starter Boxplot\n\ndf |&gt;\n  ggplot(aes(y = W)) +\n  geom_boxplot() +\n  labs(title = \"MLB Wins\",\n       subtitle = \"2012 to 2021 seasons\",\n       caption = \"Spark 10\",\n       y = \"wins\")\n\n\n\n\nThe thick line in the middle of the boxplot is at the median value of the data. The start and end of the box are at the 25th and 75th percentiles. Statisticians call the difference between the 25th and 75th percentiles the interquartile range (IQR). The “whiskers” extend 1.5 times the IQR. Finally, additional points beyond the whiskers may be thought of as outliers."
  },
  {
    "objectID": "posts/04_boxplots/04_boxplots.html#comparisons",
    "href": "posts/04_boxplots/04_boxplots.html#comparisons",
    "title": "04: Boxplots",
    "section": "Comparisons",
    "text": "Comparisons\nThis is the code block that most students will want to use.\n\ndf |&gt;\n  ggplot(aes(x = lgID, y = R),\n         color = \"yellow\", fill = \"blue\") +\n  geom_boxplot() +\n  labs(title = \"MLB Runs by League\",\n       subtitle = \"2012 to 2021 seasons\",\n       caption = \"Spark 10\",\n       x = \"league\",\n       y = \"runs scored\")\n\n\n\n\nBoxplots are particularly useful to graph a numerical variable (on the \\(y\\)-axis) across a categorical variable (on the \\(x\\)-axis). A lot of research is shown with side-by-side boxplots."
  },
  {
    "objectID": "posts/04_boxplots/04_boxplots.html#grouping",
    "href": "posts/04_boxplots/04_boxplots.html#grouping",
    "title": "04: Boxplots",
    "section": "Grouping",
    "text": "Grouping\nHere are some advanced examples. We can use the group parameter to tell R how to organize the data.\n\ndf |&gt;\n  ggplot(aes(x = franchID, y = W, group = franchID)) +\n  geom_boxplot() +\n  labs(title = \"MLB Wins by Team\",\n       subtitle = \"2012 to 2021 seasons\",\n       caption = \"Spark 10\",\n       x = \"team\",\n       y = \"wins\")\n\n\n\n\nEspecially in sports, the categorical data might have too many labels for a visually-pleasing graph (here: too many teams to teams to think about simultaneously). We can use the filter commend (SQL skills) to help us look at a small amount of labels and make the graph easier to read.\n\ndf |&gt;\n  filter(franchID %in% c(\"ARI\", \"COL\", \"LAD\", \"SDP\", \"SFG\")) |&gt;\n  ggplot(aes(x = franchID, y = W, group = franchID)) +\n  geom_boxplot(aes(color = franchID, fill = franchID)) +\n  \n  # https://teamcolorcodes.com/mlb-color-codes/\n  scale_color_manual(values = c(\"#E3D4AD\", \"#C4CED4\", \"#A5ACAF\", \"#FFC425\", \"#27251F\")) +\n  scale_fill_manual(values = c(\"#A71930\", \"#333366\", \"#005A9C\", \"#2F241D\", \"#FD5A1E\")) +\n\n  labs(title = \"National League West Wins by Team\",\n       subtitle = \"2012 to 2021 seasons\",\n       caption = \"Spark 10\",\n       x = \"team\",\n       y = \"wins\") +\n  theme_minimal()"
  },
  {
    "objectID": "posts/05_barplots/05_barplots.html",
    "href": "posts/05_barplots/05_barplots.html",
    "title": "5: Barplots",
    "section": "",
    "text": "Glenn Burke was an outfielder with the 1977 National-League champion Dodgers. He was born in Oakland in 1952.\n\n\n\nImage credit: Washington Post\n\n\n\n\nThe tidyverse suite of packages are streamlined to make data science processes easier. We can load the packages with the library() command.\n\n# library(\"Lahman\") #baseball data set\nlibrary(\"readxl\")\n\nWarning: package 'readxl' was built under R version 4.3.1\n\nlibrary(\"tidyverse\")\n\nWarning: package 'ggplot2' was built under R version 4.3.1\n\n\nWarning: package 'purrr' was built under R version 4.3.1\n\n\nWarning: package 'dplyr' was built under R version 4.3.1\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# subset of the Batting data in the Lahman database\n# df_Burke &lt;- Batting |&gt;\n  \n  # focus on Glenn Burke\n  # abbreviation found via playerInfo() helper function\n  # filter(playerID == \"burkegl01\")\n\n# df_1977 &lt;- Batting |&gt;\n  # filter(yearID == 1977) |&gt;\n  # filter(H &gt; 0) #to ease later histogram (remove players who had zero hits)\n\n# readr::write_csv(df_Burke, \"data_Burke.csv\")\n# readr::write_csv(df_1977, \"data_1977.csv\")\n\nToday’s data set comes from the Lahman package, which contains a lot of historical data about Major League Baseball."
  },
  {
    "objectID": "posts/05_barplots/05_barplots.html#load-the-tidyverse",
    "href": "posts/05_barplots/05_barplots.html#load-the-tidyverse",
    "title": "5: Barplots",
    "section": "",
    "text": "The tidyverse suite of packages are streamlined to make data science processes easier. We can load the packages with the library() command.\n\n# library(\"Lahman\") #baseball data set\nlibrary(\"readxl\")\n\nWarning: package 'readxl' was built under R version 4.3.1\n\nlibrary(\"tidyverse\")\n\nWarning: package 'ggplot2' was built under R version 4.3.1\n\n\nWarning: package 'purrr' was built under R version 4.3.1\n\n\nWarning: package 'dplyr' was built under R version 4.3.1\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# subset of the Batting data in the Lahman database\n# df_Burke &lt;- Batting |&gt;\n  \n  # focus on Glenn Burke\n  # abbreviation found via playerInfo() helper function\n  # filter(playerID == \"burkegl01\")\n\n# df_1977 &lt;- Batting |&gt;\n  # filter(yearID == 1977) |&gt;\n  # filter(H &gt; 0) #to ease later histogram (remove players who had zero hits)\n\n# readr::write_csv(df_Burke, \"data_Burke.csv\")\n# readr::write_csv(df_1977, \"data_1977.csv\")\n\nToday’s data set comes from the Lahman package, which contains a lot of historical data about Major League Baseball."
  },
  {
    "objectID": "posts/05_barplots/05_barplots.html#look-at-the-data",
    "href": "posts/05_barplots/05_barplots.html#look-at-the-data",
    "title": "5: Barplots",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df_1977)\n\n# A tibble: 6 × 22\n  playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n  &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 adamsbo04   1977     1 DET    AL       15    24     2     6     1     0     2\n2 adamsgl01   1977     1 MIN    AL       95   269    32    91    17     0     6\n3 aikenwi01   1977     1 CAL    AL       42    91     5    18     4     0     0\n4 alcalsa01   1977     2 MON    NL       31    25     1     2     0     0     1\n5 alexaga01   1977     1 SFN    NL       51   119    17    36     4     2     5\n6 alexama01   1977     1 OAK    AL       90    42    24    10     1     0     0\n# ℹ 10 more variables: RBI &lt;dbl&gt;, SB &lt;dbl&gt;, CS &lt;dbl&gt;, BB &lt;dbl&gt;, SO &lt;dbl&gt;,\n#   IBB &lt;dbl&gt;, HBP &lt;dbl&gt;, SH &lt;dbl&gt;, SF &lt;dbl&gt;, GIDP &lt;dbl&gt;\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df_1977, give.attr = FALSE)\n\nspc_tbl_ [658 × 22] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ playerID: chr [1:658] \"adamsbo04\" \"adamsgl01\" \"aikenwi01\" \"alcalsa01\" ...\n $ yearID  : num [1:658] 1977 1977 1977 1977 1977 ...\n $ stint   : num [1:658] 1 1 1 2 1 1 1 1 1 1 ...\n $ teamID  : chr [1:658] \"DET\" \"MIN\" \"CAL\" \"MON\" ...\n $ lgID    : chr [1:658] \"AL\" \"AL\" \"AL\" \"NL\" ...\n $ G       : num [1:658] 15 95 42 31 51 90 54 155 69 22 ...\n $ AB      : num [1:658] 24 269 91 25 119 42 171 613 83 40 ...\n $ R       : num [1:658] 2 32 5 1 17 24 19 75 21 10 ...\n $ H       : num [1:658] 6 91 18 2 36 10 41 160 22 13 ...\n $ X2B     : num [1:658] 1 17 4 0 4 1 4 18 3 4 ...\n $ X3B     : num [1:658] 0 0 0 0 2 0 0 11 0 0 ...\n $ HR      : num [1:658] 2 6 0 1 5 0 5 2 1 1 ...\n $ RBI     : num [1:658] 2 49 6 2 20 2 31 43 11 4 ...\n $ SB      : num [1:658] 0 0 1 0 3 26 1 20 4 3 ...\n $ CS      : num [1:658] 0 2 2 0 1 14 3 9 3 3 ...\n $ BB      : num [1:658] 0 18 10 0 20 4 24 37 8 3 ...\n $ SO      : num [1:658] 5 30 23 13 33 6 36 114 13 4 ...\n $ IBB     : num [1:658] 0 3 2 0 2 0 0 1 0 0 ...\n $ HBP     : num [1:658] 0 0 0 0 2 0 1 0 1 0 ...\n $ SH      : num [1:658] 0 0 0 2 0 1 0 20 4 1 ...\n $ SF      : num [1:658] 0 3 0 0 2 0 4 0 1 1 ...\n $ GIDP    : num [1:658] 0 5 1 0 5 0 4 14 0 2 ...\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df_1977)\n\n [1] \"playerID\" \"yearID\"   \"stint\"    \"teamID\"   \"lgID\"     \"G\"       \n [7] \"AB\"       \"R\"        \"H\"        \"X2B\"      \"X3B\"      \"HR\"      \n[13] \"RBI\"      \"SB\"       \"CS\"       \"BB\"       \"SO\"       \"IBB\"     \n[19] \"HBP\"      \"SH\"       \"SF\"       \"GIDP\""
  },
  {
    "objectID": "posts/05_barplots/05_barplots.html#a-starter-histogram",
    "href": "posts/05_barplots/05_barplots.html#a-starter-histogram",
    "title": "5: Barplots",
    "section": "A Starter Histogram",
    "text": "A Starter Histogram\nA histogram is used to visualize the distribution of a numerical variable.\n\ndf_1977 |&gt;\n  ggplot(aes(x = H)) +\n  geom_histogram() +\n  labs(title = \"Hits\",\n       subtitle = \"1977 season\",\n       caption = \"Spark 01\",\n       x = \"hits\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "posts/05_barplots/05_barplots.html#colors",
    "href": "posts/05_barplots/05_barplots.html#colors",
    "title": "5: Barplots",
    "section": "Colors",
    "text": "Colors\nThis is a distribution the the number of clean hits by MLB batters in the 1977 season.\n\ndf_1977 |&gt;\n  ggplot(aes(x = H)) +\n  geom_histogram(fill = \"blue\", color = \"black\") +\n  labs(title = \"Hits\",\n       subtitle = \"1977 season\",\n       caption = \"Spark 01\",\n       x = \"hits\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "posts/05_barplots/05_barplots.html#labels",
    "href": "posts/05_barplots/05_barplots.html#labels",
    "title": "5: Barplots",
    "section": "Label(s)",
    "text": "Label(s)\nGlenn Burke himself had 43 hits (playing a bench role).\n\ndf_1977 |&gt;\n  ggplot(aes(x = H)) +\n  geom_histogram(fill = \"blue\", color = \"black\") +\n  geom_segment(aes(x = 93, y = 50, xend = 43, yend = 0),\n               arrow = arrow(), color = \"red\", size = 3) +\n  geom_label(aes(x = 43, y = 0, label = \"Glenn Burke\"),\n             nudge_x = 50, nudge_y = 50) +\n  labs(title = \"Hits\",\n       subtitle = \"1977 season\",\n       caption = \"Spark 01\",\n       x = \"hits\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nRemember that we can get also get a sense of a player comparing them to the summary statistics.\n\ndf_1977 |&gt;\n  summarize(xbar = mean(H, na.rm = TRUE),\n            median = median(H, na.rm = TRUE),\n            sd = sd(H, na.rm = TRUE))\n\n# A tibble: 1 × 3\n   xbar median    sd\n  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1  57.8     29  59.6"
  },
  {
    "objectID": "posts/05_barplots/05_barplots.html#cultural-icon",
    "href": "posts/05_barplots/05_barplots.html#cultural-icon",
    "title": "5: Barplots",
    "section": "Cultural Icon",
    "text": "Cultural Icon\n\n\n\nImage Credit: Business Insider"
  },
  {
    "objectID": "posts/05_barplots/05_barplots.html#look-at-the-data-1",
    "href": "posts/05_barplots/05_barplots.html#look-at-the-data-1",
    "title": "5: Barplots",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df_Burke)\n\n# A tibble: 5 × 22\n  playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n  &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 burkegl01   1976     1 LAN    NL       25    46     9    11     2     0     0\n2 burkegl01   1977     1 LAN    NL       83   169    16    43     8     0     1\n3 burkegl01   1978     1 LAN    NL       16    19     2     4     0     0     0\n4 burkegl01   1978     2 OAK    AL       78   200    19    47     6     1     1\n5 burkegl01   1979     1 OAK    AL       23    89     4    19     2     1     0\n# ℹ 10 more variables: RBI &lt;dbl&gt;, SB &lt;dbl&gt;, CS &lt;dbl&gt;, BB &lt;dbl&gt;, SO &lt;dbl&gt;,\n#   IBB &lt;dbl&gt;, HBP &lt;dbl&gt;, SH &lt;dbl&gt;, SF &lt;dbl&gt;, GIDP &lt;dbl&gt;\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df_Burke, give.attr = FALSE)\n\ntibble [5 × 22] (S3: tbl_df/tbl/data.frame)\n $ playerID: chr [1:5] \"burkegl01\" \"burkegl01\" \"burkegl01\" \"burkegl01\" ...\n $ yearID  : num [1:5] 1976 1977 1978 1978 1979\n $ stint   : num [1:5] 1 1 1 2 1\n $ teamID  : chr [1:5] \"LAN\" \"LAN\" \"LAN\" \"OAK\" ...\n $ lgID    : chr [1:5] \"NL\" \"NL\" \"NL\" \"AL\" ...\n $ G       : num [1:5] 25 83 16 78 23\n $ AB      : num [1:5] 46 169 19 200 89\n $ R       : num [1:5] 9 16 2 19 4\n $ H       : num [1:5] 11 43 4 47 19\n $ X2B     : num [1:5] 2 8 0 6 2\n $ X3B     : num [1:5] 0 0 0 1 1\n $ HR      : num [1:5] 0 1 0 1 0\n $ RBI     : num [1:5] 5 13 2 14 4\n $ SB      : num [1:5] 3 13 1 15 3\n $ CS      : num [1:5] 2 5 0 8 1\n $ BB      : num [1:5] 3 5 0 10 4\n $ SO      : num [1:5] 8 22 4 26 10\n $ IBB     : num [1:5] 0 1 0 1 1\n $ HBP     : num [1:5] 1 1 0 0 0\n $ SH      : num [1:5] 1 0 0 6 1\n $ SF      : num [1:5] 0 0 0 1 0\n $ GIDP    : num [1:5] 1 3 0 7 3\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df_Burke)\n\n [1] \"playerID\" \"yearID\"   \"stint\"    \"teamID\"   \"lgID\"     \"G\"       \n [7] \"AB\"       \"R\"        \"H\"        \"X2B\"      \"X3B\"      \"HR\"      \n[13] \"RBI\"      \"SB\"       \"CS\"       \"BB\"       \"SO\"       \"IBB\"     \n[19] \"HBP\"      \"SH\"       \"SF\"       \"GIDP\""
  },
  {
    "objectID": "posts/05_barplots/05_barplots.html#bar-plot-by-identity",
    "href": "posts/05_barplots/05_barplots.html#bar-plot-by-identity",
    "title": "5: Barplots",
    "section": "Bar Plot (by identity)",
    "text": "Bar Plot (by identity)\nBar plots are easy for readers to understand, but a little tricky to produce. We usually make bar plots with a categorical variable on the \\(x\\)-axis and a numerical variable on the \\(y\\)-axis.\nWhen we want to use the numbers from the data frame directly, be sure to specify the stat = \"identity\" parameter.\n\ndf_Burke |&gt;\n  ggplot(aes(x = yearID, y = G, fill = teamID)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Glenn Burke: A Brief Time in the Major Leagues\",\n       subtitle = \"He spent seasons with the Dodgers and the Athletics\",\n       caption = \"Spark 10\",\n       x = \"season\", y = \"games played\")"
  },
  {
    "objectID": "posts/05_barplots/05_barplots.html#bar-plot-by-count",
    "href": "posts/05_barplots/05_barplots.html#bar-plot-by-count",
    "title": "5: Barplots",
    "section": "Bar Plot (by count)",
    "text": "Bar Plot (by count)\nWhen we want the bar plot to reflect the number of observations (i.e. number of rows) for each category, then use the stat = \"count\" parameter.\n\ndf_Burke |&gt;\n  ggplot(aes(x = teamID, fill = teamID)) +\n  geom_bar(stat = \"count\") +\n  labs(title = \"Glenn Burke: A Brief Time in the Major Leagues\",\n       subtitle = \"He spent seasons with the Dodgers and the Athletics\",\n       caption = \"Spark 10\",\n       x = \"team\", y = \"seasons played\")"
  },
  {
    "objectID": "posts/05_barplots/05_barplots.html#epilogue",
    "href": "posts/05_barplots/05_barplots.html#epilogue",
    "title": "5: Barplots",
    "section": "Epilogue",
    "text": "Epilogue\n\n\n\n\n\nImage Credit: Washington Post\n\n\n\nGlenn Burke left MLB in 1980\n\nplayed in the Gay Olympics\ndealt with drug addiction\ndied of AIDS in 1995"
  },
  {
    "objectID": "posts/05_barplots/05_barplots.html#references",
    "href": "posts/05_barplots/05_barplots.html#references",
    "title": "5: Barplots",
    "section": "References",
    "text": "References\n\nLahman Data Package\nBaseball Reference\n“The trials of baseball’s first openly gay player, Glenn Burke, four decades ago” — Washington Post\n“Today is National High Five Day — this photo from 1977 shows the first ever high five” — Business Insider\nSingled Out by Andrew Maraniss"
  },
  {
    "objectID": "posts/06_scatterplots/06_scatterplots.html",
    "href": "posts/06_scatterplots/06_scatterplots.html",
    "title": "6: Scatterplots",
    "section": "",
    "text": "The tidyverse suite of packages are streamlined to make data science processes easier. We can load the packages with the library() command.\n\n# library(\"Lahman\")\nlibrary(\"tidyverse\")\n\n\ncorrelatedValues = function(x, r = 0.9){\n  r2 = r**2\n  ve = 1-r2\n  SD = sqrt(ve)\n  e  = rnorm(length(x), mean=0, sd=SD)\n  y  = r*x + e\n  return(y)\n}"
  },
  {
    "objectID": "posts/06_scatterplots/06_scatterplots.html#load-the-tidyverse",
    "href": "posts/06_scatterplots/06_scatterplots.html#load-the-tidyverse",
    "title": "6: Scatterplots",
    "section": "",
    "text": "The tidyverse suite of packages are streamlined to make data science processes easier. We can load the packages with the library() command.\n\n# library(\"Lahman\")\nlibrary(\"tidyverse\")\n\n\ncorrelatedValues = function(x, r = 0.9){\n  r2 = r**2\n  ve = 1-r2\n  SD = sqrt(ve)\n  e  = rnorm(length(x), mean=0, sd=SD)\n  y  = r*x + e\n  return(y)\n}"
  },
  {
    "objectID": "posts/06_scatterplots/06_scatterplots.html#look-at-the-data",
    "href": "posts/06_scatterplots/06_scatterplots.html#look-at-the-data",
    "title": "6: Scatterplots",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df)\n\n# A tibble: 6 × 48\n  year_id lg_id team_id franch_id div_id  rank     g ghome     w     l div_win\n    &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;     &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;  \n1    1990 NL    ATL     ATL       W          6   162    81    65    97 N      \n2    1990 AL    BAL     BAL       E          5   161    80    76    85 N      \n3    1990 AL    BOS     BOS       E          1   162    81    88    74 Y      \n4    1990 AL    CAL     ANA       W          4   162    81    80    82 N      \n5    1990 AL    CHA     CHW       W          2   162    80    94    68 N      \n6    1990 NL    CHN     CHC       E          4   162    81    77    85 N      \n# ℹ 37 more variables: wc_win &lt;chr&gt;, lg_win &lt;chr&gt;, ws_win &lt;chr&gt;, r &lt;dbl&gt;,\n#   ab &lt;dbl&gt;, h &lt;dbl&gt;, x2b &lt;dbl&gt;, x3b &lt;dbl&gt;, hr &lt;dbl&gt;, bb &lt;dbl&gt;, so &lt;dbl&gt;,\n#   sb &lt;dbl&gt;, cs &lt;dbl&gt;, hbp &lt;dbl&gt;, sf &lt;dbl&gt;, ra &lt;dbl&gt;, er &lt;dbl&gt;, era &lt;dbl&gt;,\n#   cg &lt;dbl&gt;, sho &lt;dbl&gt;, sv &lt;dbl&gt;, i_pouts &lt;dbl&gt;, ha &lt;dbl&gt;, hra &lt;dbl&gt;,\n#   bba &lt;dbl&gt;, soa &lt;dbl&gt;, e &lt;dbl&gt;, dp &lt;dbl&gt;, fp &lt;dbl&gt;, name &lt;chr&gt;, park &lt;chr&gt;,\n#   attendance &lt;dbl&gt;, bpf &lt;dbl&gt;, ppf &lt;dbl&gt;, team_idbr &lt;chr&gt;,\n#   team_i_dlahman45 &lt;chr&gt;, team_i_dretro &lt;chr&gt;\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df, give.attr = FALSE)\n\nspc_tbl_ [278 × 48] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ year_id         : num [1:278] 1990 1990 1990 1990 1990 1990 1990 1990 1990 1990 ...\n $ lg_id           : chr [1:278] \"NL\" \"AL\" \"AL\" \"AL\" ...\n $ team_id         : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ franch_id       : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"ANA\" ...\n $ div_id          : chr [1:278] \"W\" \"E\" \"E\" \"W\" ...\n $ rank            : num [1:278] 6 5 1 4 2 4 1 4 3 4 ...\n $ g               : num [1:278] 162 161 162 162 162 162 162 162 162 162 ...\n $ ghome           : num [1:278] 81 80 81 81 80 81 81 81 81 81 ...\n $ w               : num [1:278] 65 76 88 80 94 77 91 77 79 75 ...\n $ l               : num [1:278] 97 85 74 82 68 85 71 85 83 87 ...\n $ div_win         : chr [1:278] \"N\" \"N\" \"Y\" \"N\" ...\n $ wc_win          : chr [1:278] NA NA NA NA ...\n $ lg_win          : chr [1:278] \"N\" \"N\" \"N\" \"N\" ...\n $ ws_win          : chr [1:278] \"N\" \"N\" \"N\" \"N\" ...\n $ r               : num [1:278] 682 669 699 690 682 690 693 732 750 573 ...\n $ ab              : num [1:278] 5504 5410 5516 5570 5402 ...\n $ h               : num [1:278] 1376 1328 1502 1448 1393 ...\n $ x2b             : num [1:278] 263 234 298 237 251 240 284 266 241 209 ...\n $ x3b             : num [1:278] 26 22 31 27 44 36 40 41 32 32 ...\n $ hr              : num [1:278] 162 132 106 147 106 136 125 110 172 94 ...\n $ bb              : num [1:278] 473 660 598 566 478 406 466 458 634 548 ...\n $ so              : num [1:278] 1010 962 795 1000 903 869 913 836 952 997 ...\n $ sb              : num [1:278] 92 94 53 69 140 151 166 107 82 179 ...\n $ cs              : num [1:278] 55 52 52 43 90 50 66 52 57 83 ...\n $ hbp             : num [1:278] 27 40 28 28 36 30 42 29 34 28 ...\n $ sf              : num [1:278] 31 41 44 45 47 51 42 61 41 41 ...\n $ ra              : num [1:278] 821 698 664 706 633 774 597 737 754 656 ...\n $ er              : num [1:278] 727 644 596 613 581 695 549 676 697 581 ...\n $ era             : num [1:278] 4.58 4.04 3.72 3.79 3.61 4.34 3.39 4.26 4.39 3.61 ...\n $ cg              : num [1:278] 17 10 15 21 17 13 14 12 15 12 ...\n $ sho             : num [1:278] 8 5 13 13 10 7 12 10 12 6 ...\n $ sv              : num [1:278] 30 43 44 42 68 42 50 47 45 37 ...\n $ i_pouts         : num [1:278] 4289 4306 4326 4362 4348 ...\n $ ha              : num [1:278] 1527 1445 1439 1482 1313 ...\n $ hra             : num [1:278] 128 161 92 106 106 121 124 163 154 130 ...\n $ bba             : num [1:278] 579 537 519 544 548 572 543 518 661 496 ...\n $ soa             : num [1:278] 938 776 997 944 914 ...\n $ e               : num [1:278] 158 93 123 142 124 124 102 117 131 131 ...\n $ dp              : num [1:278] 133 151 154 186 169 136 126 146 178 124 ...\n $ fp              : num [1:278] 0.974 0.985 0.98 0.978 0.98 0.98 0.983 0.981 0.979 0.978 ...\n $ name            : chr [1:278] \"Atlanta Braves\" \"Baltimore Orioles\" \"Boston Red Sox\" \"California Angels\" ...\n $ park            : chr [1:278] \"Atlanta-Fulton County Stadium\" \"Memorial Stadium\" \"Fenway Park II\" \"Anaheim Stadium\" ...\n $ attendance      : num [1:278] 980129 2415189 2528986 2555688 2002357 ...\n $ bpf             : num [1:278] 105 97 105 97 98 108 105 100 101 97 ...\n $ ppf             : num [1:278] 106 98 105 97 98 108 105 100 102 98 ...\n $ team_idbr       : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ team_i_dlahman45: chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ team_i_dretro   : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df)\n\n [1] \"year_id\"          \"lg_id\"            \"team_id\"          \"franch_id\"       \n [5] \"div_id\"           \"rank\"             \"g\"                \"ghome\"           \n [9] \"w\"                \"l\"                \"div_win\"          \"wc_win\"          \n[13] \"lg_win\"           \"ws_win\"           \"r\"                \"ab\"              \n[17] \"h\"                \"x2b\"              \"x3b\"              \"hr\"              \n[21] \"bb\"               \"so\"               \"sb\"               \"cs\"              \n[25] \"hbp\"              \"sf\"               \"ra\"               \"er\"              \n[29] \"era\"              \"cg\"               \"sho\"              \"sv\"              \n[33] \"i_pouts\"          \"ha\"               \"hra\"              \"bba\"             \n[37] \"soa\"              \"e\"                \"dp\"               \"fp\"              \n[41] \"name\"             \"park\"             \"attendance\"       \"bpf\"             \n[45] \"ppf\"              \"team_idbr\"        \"team_i_dlahman45\" \"team_i_dretro\""
  },
  {
    "objectID": "posts/06_scatterplots/06_scatterplots.html#examples",
    "href": "posts/06_scatterplots/06_scatterplots.html#examples",
    "title": "6: Scatterplots",
    "section": "Examples",
    "text": "Examples\n\n12345\n\n\n\nx &lt;- rnorm(100, mean = 0, sd = 1)\ny &lt;- correlatedValues(x, r = -0.9)\n\ncor_value &lt;- cor(x,y, use = \"pairwise.complete.obs\")\n\ndf_for_graph &lt;- data.frame(x,y)\ndf_for_graph |&gt;\n  ggplot(aes(x = x, y = y)) +\n  geom_point() +\n  labs(title = \"Correlation Example\",\n       subtitle = paste0(\"r = \", round(cor_value, 4), \n                         \", strongly and negatively correlated\"),\n       caption = \"Spark 10\")\n\n\n\n\n\n\n\nx &lt;- rnorm(100, mean = 0, sd = 1)\ny &lt;- correlatedValues(x, r = -0.5)\n\ncor_value &lt;- cor(x,y, use = \"pairwise.complete.obs\")\n\ndf_for_graph &lt;- data.frame(x,y)\ndf_for_graph |&gt;\n  ggplot(aes(x = x, y = y)) +\n  geom_point() +\n  labs(title = \"Correlation Example\",\n       subtitle = paste0(\"r = \", round(cor_value, 4), \n                         \", slightly and negatively correlated\"),\n       caption = \"Spark 10\")\n\n\n\n\n\n\n\nx &lt;- rnorm(100, mean = 0, sd = 1)\ny &lt;- correlatedValues(x, r = 0)\n\ncor_value &lt;- cor(x,y, use = \"pairwise.complete.obs\")\n\ndf_for_graph &lt;- data.frame(x,y)\ndf_for_graph |&gt;\n  ggplot(aes(x = x, y = y)) +\n  geom_point() +\n  labs(title = \"Correlation Example\",\n       subtitle = paste0(\"r = \", round(cor_value, 4), \n                         \", virtually uncorrelated\"),\n       caption = \"Spark 10\")\n\n\n\n\n\n\n\nx &lt;- rnorm(100, mean = 0, sd = 1)\ny &lt;- correlatedValues(x, r = 0.5)\n\ncor_value &lt;- cor(x,y, use = \"pairwise.complete.obs\")\n\ndf_for_graph &lt;- data.frame(x,y)\ndf_for_graph |&gt;\n  ggplot(aes(x = x, y = y)) +\n  geom_point() +\n  labs(title = \"Correlation Example\",\n       subtitle = paste0(\"r = \", round(cor_value, 4), \n                         \", slightly and positively correlated\"),\n       caption = \"Spark 10\")\n\n\n\n\n\n\n\nx &lt;- rnorm(100, mean = 0, sd = 1)\ny &lt;- correlatedValues(x, r = 0.9)\n\ncor_value &lt;- cor(x,y, use = \"pairwise.complete.obs\")\n\ndf_for_graph &lt;- data.frame(x,y)\ndf_for_graph |&gt;\n  ggplot(aes(x = x, y = y)) +\n  geom_point() +\n  labs(title = \"Correlation Example\",\n       subtitle = paste0(\"r = \", round(cor_value, 4), \n                         \", strongly and positively correlated\"),\n       caption = \"Spark 10\")"
  },
  {
    "objectID": "posts/06_scatterplots/06_scatterplots.html#adding-correlation-to-visualization",
    "href": "posts/06_scatterplots/06_scatterplots.html#adding-correlation-to-visualization",
    "title": "6: Scatterplots",
    "section": "Adding Correlation to Visualization",
    "text": "Adding Correlation to Visualization\nThis is the code block that most students will want to use.\n\ncor_value &lt;- df |&gt;\n  summarize(r = cor(x = r, \n                    y = w, \n                    use = \"pairwise.complete.obs\")) |&gt;\n  unlist()\n\ndf |&gt;\n  ggplot(aes(x = r, y = w)) +\n  geom_point(color = \"blue\") + #makes the scatterplot\n  labs(title = \"MLB Data\",\n       subtitle = paste0(\"r = \", round(cor_value, 4), \n                         \", slightly and positively correlated\"),\n       caption = \"seasons 1990 to 1999\",\n       x = \"runs scored\",\n       y = \"wins\")"
  },
  {
    "objectID": "posts/07_regression/07_regression.html",
    "href": "posts/07_regression/07_regression.html",
    "title": "7: Linear Regression",
    "section": "",
    "text": "The tidyverse suite of packages are streamlined to make data science processes easier. We can load the packages with the library() command.\n\nlibrary(\"tidyverse\")"
  },
  {
    "objectID": "posts/07_regression/07_regression.html#load-the-tidyverse",
    "href": "posts/07_regression/07_regression.html#load-the-tidyverse",
    "title": "7: Linear Regression",
    "section": "",
    "text": "The tidyverse suite of packages are streamlined to make data science processes easier. We can load the packages with the library() command.\n\nlibrary(\"tidyverse\")"
  },
  {
    "objectID": "posts/07_regression/07_regression.html#look-at-the-data",
    "href": "posts/07_regression/07_regression.html#look-at-the-data",
    "title": "7: Linear Regression",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df)\n\n# A tibble: 6 × 48\n  year_id lg_id team_id franch_id div_id  rank     g ghome     w     l div_win\n    &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;     &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;  \n1    1990 NL    ATL     ATL       W          6   162    81    65    97 N      \n2    1990 AL    BAL     BAL       E          5   161    80    76    85 N      \n3    1990 AL    BOS     BOS       E          1   162    81    88    74 Y      \n4    1990 AL    CAL     ANA       W          4   162    81    80    82 N      \n5    1990 AL    CHA     CHW       W          2   162    80    94    68 N      \n6    1990 NL    CHN     CHC       E          4   162    81    77    85 N      \n# ℹ 37 more variables: wc_win &lt;chr&gt;, lg_win &lt;chr&gt;, ws_win &lt;chr&gt;, r &lt;dbl&gt;,\n#   ab &lt;dbl&gt;, h &lt;dbl&gt;, x2b &lt;dbl&gt;, x3b &lt;dbl&gt;, hr &lt;dbl&gt;, bb &lt;dbl&gt;, so &lt;dbl&gt;,\n#   sb &lt;dbl&gt;, cs &lt;dbl&gt;, hbp &lt;dbl&gt;, sf &lt;dbl&gt;, ra &lt;dbl&gt;, er &lt;dbl&gt;, era &lt;dbl&gt;,\n#   cg &lt;dbl&gt;, sho &lt;dbl&gt;, sv &lt;dbl&gt;, i_pouts &lt;dbl&gt;, ha &lt;dbl&gt;, hra &lt;dbl&gt;,\n#   bba &lt;dbl&gt;, soa &lt;dbl&gt;, e &lt;dbl&gt;, dp &lt;dbl&gt;, fp &lt;dbl&gt;, name &lt;chr&gt;, park &lt;chr&gt;,\n#   attendance &lt;dbl&gt;, bpf &lt;dbl&gt;, ppf &lt;dbl&gt;, team_idbr &lt;chr&gt;,\n#   team_i_dlahman45 &lt;chr&gt;, team_i_dretro &lt;chr&gt;\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df, give.attr = FALSE)\n\nspc_tbl_ [278 × 48] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ year_id         : num [1:278] 1990 1990 1990 1990 1990 1990 1990 1990 1990 1990 ...\n $ lg_id           : chr [1:278] \"NL\" \"AL\" \"AL\" \"AL\" ...\n $ team_id         : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ franch_id       : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"ANA\" ...\n $ div_id          : chr [1:278] \"W\" \"E\" \"E\" \"W\" ...\n $ rank            : num [1:278] 6 5 1 4 2 4 1 4 3 4 ...\n $ g               : num [1:278] 162 161 162 162 162 162 162 162 162 162 ...\n $ ghome           : num [1:278] 81 80 81 81 80 81 81 81 81 81 ...\n $ w               : num [1:278] 65 76 88 80 94 77 91 77 79 75 ...\n $ l               : num [1:278] 97 85 74 82 68 85 71 85 83 87 ...\n $ div_win         : chr [1:278] \"N\" \"N\" \"Y\" \"N\" ...\n $ wc_win          : chr [1:278] NA NA NA NA ...\n $ lg_win          : chr [1:278] \"N\" \"N\" \"N\" \"N\" ...\n $ ws_win          : chr [1:278] \"N\" \"N\" \"N\" \"N\" ...\n $ r               : num [1:278] 682 669 699 690 682 690 693 732 750 573 ...\n $ ab              : num [1:278] 5504 5410 5516 5570 5402 ...\n $ h               : num [1:278] 1376 1328 1502 1448 1393 ...\n $ x2b             : num [1:278] 263 234 298 237 251 240 284 266 241 209 ...\n $ x3b             : num [1:278] 26 22 31 27 44 36 40 41 32 32 ...\n $ hr              : num [1:278] 162 132 106 147 106 136 125 110 172 94 ...\n $ bb              : num [1:278] 473 660 598 566 478 406 466 458 634 548 ...\n $ so              : num [1:278] 1010 962 795 1000 903 869 913 836 952 997 ...\n $ sb              : num [1:278] 92 94 53 69 140 151 166 107 82 179 ...\n $ cs              : num [1:278] 55 52 52 43 90 50 66 52 57 83 ...\n $ hbp             : num [1:278] 27 40 28 28 36 30 42 29 34 28 ...\n $ sf              : num [1:278] 31 41 44 45 47 51 42 61 41 41 ...\n $ ra              : num [1:278] 821 698 664 706 633 774 597 737 754 656 ...\n $ er              : num [1:278] 727 644 596 613 581 695 549 676 697 581 ...\n $ era             : num [1:278] 4.58 4.04 3.72 3.79 3.61 4.34 3.39 4.26 4.39 3.61 ...\n $ cg              : num [1:278] 17 10 15 21 17 13 14 12 15 12 ...\n $ sho             : num [1:278] 8 5 13 13 10 7 12 10 12 6 ...\n $ sv              : num [1:278] 30 43 44 42 68 42 50 47 45 37 ...\n $ i_pouts         : num [1:278] 4289 4306 4326 4362 4348 ...\n $ ha              : num [1:278] 1527 1445 1439 1482 1313 ...\n $ hra             : num [1:278] 128 161 92 106 106 121 124 163 154 130 ...\n $ bba             : num [1:278] 579 537 519 544 548 572 543 518 661 496 ...\n $ soa             : num [1:278] 938 776 997 944 914 ...\n $ e               : num [1:278] 158 93 123 142 124 124 102 117 131 131 ...\n $ dp              : num [1:278] 133 151 154 186 169 136 126 146 178 124 ...\n $ fp              : num [1:278] 0.974 0.985 0.98 0.978 0.98 0.98 0.983 0.981 0.979 0.978 ...\n $ name            : chr [1:278] \"Atlanta Braves\" \"Baltimore Orioles\" \"Boston Red Sox\" \"California Angels\" ...\n $ park            : chr [1:278] \"Atlanta-Fulton County Stadium\" \"Memorial Stadium\" \"Fenway Park II\" \"Anaheim Stadium\" ...\n $ attendance      : num [1:278] 980129 2415189 2528986 2555688 2002357 ...\n $ bpf             : num [1:278] 105 97 105 97 98 108 105 100 101 97 ...\n $ ppf             : num [1:278] 106 98 105 97 98 108 105 100 102 98 ...\n $ team_idbr       : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ team_i_dlahman45: chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ team_i_dretro   : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df)\n\n [1] \"year_id\"          \"lg_id\"            \"team_id\"          \"franch_id\"       \n [5] \"div_id\"           \"rank\"             \"g\"                \"ghome\"           \n [9] \"w\"                \"l\"                \"div_win\"          \"wc_win\"          \n[13] \"lg_win\"           \"ws_win\"           \"r\"                \"ab\"              \n[17] \"h\"                \"x2b\"              \"x3b\"              \"hr\"              \n[21] \"bb\"               \"so\"               \"sb\"               \"cs\"              \n[25] \"hbp\"              \"sf\"               \"ra\"               \"er\"              \n[29] \"era\"              \"cg\"               \"sho\"              \"sv\"              \n[33] \"i_pouts\"          \"ha\"               \"hra\"              \"bba\"             \n[37] \"soa\"              \"e\"                \"dp\"               \"fp\"              \n[41] \"name\"             \"park\"             \"attendance\"       \"bpf\"             \n[45] \"ppf\"              \"team_idbr\"        \"team_i_dlahman45\" \"team_i_dretro\""
  },
  {
    "objectID": "posts/07_regression/07_regression.html#scenario-1",
    "href": "posts/07_regression/07_regression.html#scenario-1",
    "title": "7: Linear Regression",
    "section": "Scenario 1",
    "text": "Scenario 1\n\ndescribe what is on the \\(x\\) axis:\ndescribe what is on the \\(y\\) axis:\n\nBuild a scatterplot, and use a geom_smooth layer to draw a linear regression line.\nUse the lm and predict functions to carry out a prediction in this scenario (i.e. you choose a reasonable number for \\(x\\)).\n\ndescribe your prediction:"
  },
  {
    "objectID": "posts/07_regression/07_regression.html#scenario-2",
    "href": "posts/07_regression/07_regression.html#scenario-2",
    "title": "7: Linear Regression",
    "section": "Scenario 2",
    "text": "Scenario 2\n\ndescribe what is on the \\(x\\) axis:\ndescribe what is on the \\(y\\) axis:\n\nBuild a scatterplot, and use a geom_smooth layer to draw a linear regression line.\nUse the lm and predict functions to carry out a prediction in this scenario (i.e. you choose a reasonable number for \\(x\\)).\n\ndescribe your prediction:"
  },
  {
    "objectID": "posts/08_ranking/08_ranking.html",
    "href": "posts/08_ranking/08_ranking.html",
    "title": "8: Rankings",
    "section": "",
    "text": "The tidyverse suite of packages are streamlined to make data science processes easier. We can load the packages with the library() command.\nThe gt package allows researchers to quickly create tables that are easy to reorganize and are highly customizable.\n\nlibrary(\"gt\") #grammar of tables\nlibrary(\"tidyverse\")\n\n\n\n\nSince we have CSV files (comma-separated values), the read_csv() command in the readr package will be convenient here. I tend to save data set into a variable df (stands for “data frame”).\nToday’s data set comes from the Lahman package, which contains a lot of historical data about Major League Baseball. For interest, this is a subset of the data from the 2004 to 2022 seasons.\n\ndf &lt;- readr::read_csv(\"baseball_2004_2022.csv\") |&gt;\n  janitor::clean_names()\n\nRows: 570 Columns: 48\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (13): lgID, teamID, franchID, divID, DivWin, WCWin, LgWin, WSWin, name, ...\ndbl (35): yearID, Rank, G, Ghome, W, L, R, AB, H, X2B, X3B, HR, BB, SO, SB, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df)\n\n# A tibble: 6 × 48\n  year_id lg_id team_id franch_id div_id  rank     g ghome     w     l div_win\n    &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;     &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;  \n1    2004 AL    ANA     ANA       W          1   162    81    92    70 Y      \n2    2004 NL    ARI     ARI       W          5   162    81    51   111 N      \n3    2004 NL    ATL     ATL       E          1   162    81    96    66 Y      \n4    2004 AL    BAL     BAL       E          3   162    81    78    84 N      \n5    2004 AL    BOS     BOS       E          2   162    81    98    64 N      \n6    2004 AL    CHA     CHW       C          2   162    81    83    79 N      \n# ℹ 37 more variables: wc_win &lt;chr&gt;, lg_win &lt;chr&gt;, ws_win &lt;chr&gt;, r &lt;dbl&gt;,\n#   ab &lt;dbl&gt;, h &lt;dbl&gt;, x2b &lt;dbl&gt;, x3b &lt;dbl&gt;, hr &lt;dbl&gt;, bb &lt;dbl&gt;, so &lt;dbl&gt;,\n#   sb &lt;dbl&gt;, cs &lt;dbl&gt;, hbp &lt;dbl&gt;, sf &lt;dbl&gt;, ra &lt;dbl&gt;, er &lt;dbl&gt;, era &lt;dbl&gt;,\n#   cg &lt;dbl&gt;, sho &lt;dbl&gt;, sv &lt;dbl&gt;, i_pouts &lt;dbl&gt;, ha &lt;dbl&gt;, hra &lt;dbl&gt;,\n#   bba &lt;dbl&gt;, soa &lt;dbl&gt;, e &lt;dbl&gt;, dp &lt;dbl&gt;, fp &lt;dbl&gt;, name &lt;chr&gt;, park &lt;chr&gt;,\n#   attendance &lt;dbl&gt;, bpf &lt;dbl&gt;, ppf &lt;dbl&gt;, team_idbr &lt;chr&gt;,\n#   team_i_dlahman45 &lt;chr&gt;, team_i_dretro &lt;chr&gt;\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df, give.attr = FALSE)\n\nspc_tbl_ [570 × 48] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ year_id         : num [1:570] 2004 2004 2004 2004 2004 ...\n $ lg_id           : chr [1:570] \"AL\" \"NL\" \"NL\" \"AL\" ...\n $ team_id         : chr [1:570] \"ANA\" \"ARI\" \"ATL\" \"BAL\" ...\n $ franch_id       : chr [1:570] \"ANA\" \"ARI\" \"ATL\" \"BAL\" ...\n $ div_id          : chr [1:570] \"W\" \"W\" \"E\" \"E\" ...\n $ rank            : num [1:570] 1 5 1 3 2 2 3 4 3 4 ...\n $ g               : num [1:570] 162 162 162 162 162 162 162 162 162 162 ...\n $ ghome           : num [1:570] 81 81 81 81 81 81 82 81 81 81 ...\n $ w               : num [1:570] 92 51 96 78 98 83 89 76 80 68 ...\n $ l               : num [1:570] 70 111 66 84 64 79 73 86 82 94 ...\n $ div_win         : chr [1:570] \"Y\" \"N\" \"Y\" \"N\" ...\n $ wc_win          : chr [1:570] \"N\" \"N\" \"N\" \"N\" ...\n $ lg_win          : chr [1:570] \"N\" \"N\" \"N\" \"N\" ...\n $ ws_win          : chr [1:570] \"N\" \"N\" \"N\" \"N\" ...\n $ r               : num [1:570] 836 615 803 842 949 865 789 750 858 833 ...\n $ ab              : num [1:570] 5675 5544 5570 5736 5720 ...\n $ h               : num [1:570] 1603 1401 1503 1614 1613 ...\n $ x2b             : num [1:570] 272 295 304 319 373 284 308 287 345 331 ...\n $ x3b             : num [1:570] 37 38 37 18 25 19 29 28 29 34 ...\n $ hr              : num [1:570] 162 135 178 169 222 242 235 194 184 202 ...\n $ bb              : num [1:570] 450 441 587 528 659 499 489 599 606 568 ...\n $ so              : num [1:570] 942 1022 1158 949 1189 ...\n $ sb              : num [1:570] 143 53 86 101 68 78 66 77 94 44 ...\n $ cs              : num [1:570] 46 32 32 41 30 51 28 25 55 33 ...\n $ hbp             : num [1:570] 73 35 59 57 69 63 38 81 78 54 ...\n $ sf              : num [1:570] 41 37 48 62 55 42 48 25 42 37 ...\n $ ra              : num [1:570] 734 899 668 830 768 831 665 907 857 923 ...\n $ er              : num [1:570] 692 794 603 760 674 782 621 832 784 883 ...\n $ era             : num [1:570] 4.28 4.98 3.74 4.7 4.18 4.91 3.81 5.19 4.81 5.54 ...\n $ cg              : num [1:570] 2 5 4 8 4 8 3 5 8 3 ...\n $ sho             : num [1:570] 11 6 13 10 12 8 6 8 8 2 ...\n $ sv              : num [1:570] 50 33 48 27 36 34 42 47 32 36 ...\n $ i_pouts         : num [1:570] 4363 4308 4350 4366 4354 ...\n $ ha              : num [1:570] 1476 1480 1475 1488 1430 ...\n $ hra             : num [1:570] 170 197 154 159 159 224 169 236 201 198 ...\n $ bba             : num [1:570] 502 668 523 687 447 527 545 572 579 697 ...\n $ soa             : num [1:570] 1164 1153 1025 1090 1132 ...\n $ e               : num [1:570] 90 139 116 110 118 100 86 113 106 89 ...\n $ dp              : num [1:570] 126 144 171 161 129 167 126 123 152 161 ...\n $ fp              : num [1:570] 0.985 0.977 0.981 0.982 0.981 0.984 0.986 0.981 0.983 0.986 ...\n $ name            : chr [1:570] \"Anaheim Angels\" \"Arizona Diamondbacks\" \"Atlanta Braves\" \"Baltimore Orioles\" ...\n $ park            : chr [1:570] \"Angels Stadium of Anaheim\" \"Bank One Ballpark\" \"Turner Field\" \"Oriole Park at Camden Yards\" ...\n $ attendance      : num [1:570] 3375677 2519560 2327565 2744018 2837294 ...\n $ bpf             : num [1:570] 97 105 101 98 106 102 103 98 94 113 ...\n $ ppf             : num [1:570] 97 107 100 99 105 102 102 99 94 114 ...\n $ team_idbr       : chr [1:570] \"ANA\" \"ARI\" \"ATL\" \"BAL\" ...\n $ team_i_dlahman45: chr [1:570] \"ANA\" \"ARI\" \"ATL\" \"BAL\" ...\n $ team_i_dretro   : chr [1:570] \"ANA\" \"ARI\" \"ATL\" \"BAL\" ...\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df)\n\n [1] \"year_id\"          \"lg_id\"            \"team_id\"          \"franch_id\"       \n [5] \"div_id\"           \"rank\"             \"g\"                \"ghome\"           \n [9] \"w\"                \"l\"                \"div_win\"          \"wc_win\"          \n[13] \"lg_win\"           \"ws_win\"           \"r\"                \"ab\"              \n[17] \"h\"                \"x2b\"              \"x3b\"              \"hr\"              \n[21] \"bb\"               \"so\"               \"sb\"               \"cs\"              \n[25] \"hbp\"              \"sf\"               \"ra\"               \"er\"              \n[29] \"era\"              \"cg\"               \"sho\"              \"sv\"              \n[33] \"i_pouts\"          \"ha\"               \"hra\"              \"bba\"             \n[37] \"soa\"              \"e\"                \"dp\"               \"fp\"              \n[41] \"name\"             \"park\"             \"attendance\"       \"bpf\"             \n[45] \"ppf\"              \"team_idbr\"        \"team_i_dlahman45\" \"team_i_dretro\""
  },
  {
    "objectID": "posts/08_ranking/08_ranking.html#load-the-tidyverse",
    "href": "posts/08_ranking/08_ranking.html#load-the-tidyverse",
    "title": "8: Rankings",
    "section": "",
    "text": "The tidyverse suite of packages are streamlined to make data science processes easier. We can load the packages with the library() command.\nThe gt package allows researchers to quickly create tables that are easy to reorganize and are highly customizable.\n\nlibrary(\"gt\") #grammar of tables\nlibrary(\"tidyverse\")"
  },
  {
    "objectID": "posts/08_ranking/08_ranking.html#load-the-data",
    "href": "posts/08_ranking/08_ranking.html#load-the-data",
    "title": "8: Rankings",
    "section": "",
    "text": "Since we have CSV files (comma-separated values), the read_csv() command in the readr package will be convenient here. I tend to save data set into a variable df (stands for “data frame”).\nToday’s data set comes from the Lahman package, which contains a lot of historical data about Major League Baseball. For interest, this is a subset of the data from the 2004 to 2022 seasons.\n\ndf &lt;- readr::read_csv(\"baseball_2004_2022.csv\") |&gt;\n  janitor::clean_names()\n\nRows: 570 Columns: 48\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (13): lgID, teamID, franchID, divID, DivWin, WCWin, LgWin, WSWin, name, ...\ndbl (35): yearID, Rank, G, Ghome, W, L, R, AB, H, X2B, X3B, HR, BB, SO, SB, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "posts/08_ranking/08_ranking.html#look-at-the-data",
    "href": "posts/08_ranking/08_ranking.html#look-at-the-data",
    "title": "8: Rankings",
    "section": "",
    "text": "One way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df)\n\n# A tibble: 6 × 48\n  year_id lg_id team_id franch_id div_id  rank     g ghome     w     l div_win\n    &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;     &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;  \n1    2004 AL    ANA     ANA       W          1   162    81    92    70 Y      \n2    2004 NL    ARI     ARI       W          5   162    81    51   111 N      \n3    2004 NL    ATL     ATL       E          1   162    81    96    66 Y      \n4    2004 AL    BAL     BAL       E          3   162    81    78    84 N      \n5    2004 AL    BOS     BOS       E          2   162    81    98    64 N      \n6    2004 AL    CHA     CHW       C          2   162    81    83    79 N      \n# ℹ 37 more variables: wc_win &lt;chr&gt;, lg_win &lt;chr&gt;, ws_win &lt;chr&gt;, r &lt;dbl&gt;,\n#   ab &lt;dbl&gt;, h &lt;dbl&gt;, x2b &lt;dbl&gt;, x3b &lt;dbl&gt;, hr &lt;dbl&gt;, bb &lt;dbl&gt;, so &lt;dbl&gt;,\n#   sb &lt;dbl&gt;, cs &lt;dbl&gt;, hbp &lt;dbl&gt;, sf &lt;dbl&gt;, ra &lt;dbl&gt;, er &lt;dbl&gt;, era &lt;dbl&gt;,\n#   cg &lt;dbl&gt;, sho &lt;dbl&gt;, sv &lt;dbl&gt;, i_pouts &lt;dbl&gt;, ha &lt;dbl&gt;, hra &lt;dbl&gt;,\n#   bba &lt;dbl&gt;, soa &lt;dbl&gt;, e &lt;dbl&gt;, dp &lt;dbl&gt;, fp &lt;dbl&gt;, name &lt;chr&gt;, park &lt;chr&gt;,\n#   attendance &lt;dbl&gt;, bpf &lt;dbl&gt;, ppf &lt;dbl&gt;, team_idbr &lt;chr&gt;,\n#   team_i_dlahman45 &lt;chr&gt;, team_i_dretro &lt;chr&gt;\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df, give.attr = FALSE)\n\nspc_tbl_ [570 × 48] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ year_id         : num [1:570] 2004 2004 2004 2004 2004 ...\n $ lg_id           : chr [1:570] \"AL\" \"NL\" \"NL\" \"AL\" ...\n $ team_id         : chr [1:570] \"ANA\" \"ARI\" \"ATL\" \"BAL\" ...\n $ franch_id       : chr [1:570] \"ANA\" \"ARI\" \"ATL\" \"BAL\" ...\n $ div_id          : chr [1:570] \"W\" \"W\" \"E\" \"E\" ...\n $ rank            : num [1:570] 1 5 1 3 2 2 3 4 3 4 ...\n $ g               : num [1:570] 162 162 162 162 162 162 162 162 162 162 ...\n $ ghome           : num [1:570] 81 81 81 81 81 81 82 81 81 81 ...\n $ w               : num [1:570] 92 51 96 78 98 83 89 76 80 68 ...\n $ l               : num [1:570] 70 111 66 84 64 79 73 86 82 94 ...\n $ div_win         : chr [1:570] \"Y\" \"N\" \"Y\" \"N\" ...\n $ wc_win          : chr [1:570] \"N\" \"N\" \"N\" \"N\" ...\n $ lg_win          : chr [1:570] \"N\" \"N\" \"N\" \"N\" ...\n $ ws_win          : chr [1:570] \"N\" \"N\" \"N\" \"N\" ...\n $ r               : num [1:570] 836 615 803 842 949 865 789 750 858 833 ...\n $ ab              : num [1:570] 5675 5544 5570 5736 5720 ...\n $ h               : num [1:570] 1603 1401 1503 1614 1613 ...\n $ x2b             : num [1:570] 272 295 304 319 373 284 308 287 345 331 ...\n $ x3b             : num [1:570] 37 38 37 18 25 19 29 28 29 34 ...\n $ hr              : num [1:570] 162 135 178 169 222 242 235 194 184 202 ...\n $ bb              : num [1:570] 450 441 587 528 659 499 489 599 606 568 ...\n $ so              : num [1:570] 942 1022 1158 949 1189 ...\n $ sb              : num [1:570] 143 53 86 101 68 78 66 77 94 44 ...\n $ cs              : num [1:570] 46 32 32 41 30 51 28 25 55 33 ...\n $ hbp             : num [1:570] 73 35 59 57 69 63 38 81 78 54 ...\n $ sf              : num [1:570] 41 37 48 62 55 42 48 25 42 37 ...\n $ ra              : num [1:570] 734 899 668 830 768 831 665 907 857 923 ...\n $ er              : num [1:570] 692 794 603 760 674 782 621 832 784 883 ...\n $ era             : num [1:570] 4.28 4.98 3.74 4.7 4.18 4.91 3.81 5.19 4.81 5.54 ...\n $ cg              : num [1:570] 2 5 4 8 4 8 3 5 8 3 ...\n $ sho             : num [1:570] 11 6 13 10 12 8 6 8 8 2 ...\n $ sv              : num [1:570] 50 33 48 27 36 34 42 47 32 36 ...\n $ i_pouts         : num [1:570] 4363 4308 4350 4366 4354 ...\n $ ha              : num [1:570] 1476 1480 1475 1488 1430 ...\n $ hra             : num [1:570] 170 197 154 159 159 224 169 236 201 198 ...\n $ bba             : num [1:570] 502 668 523 687 447 527 545 572 579 697 ...\n $ soa             : num [1:570] 1164 1153 1025 1090 1132 ...\n $ e               : num [1:570] 90 139 116 110 118 100 86 113 106 89 ...\n $ dp              : num [1:570] 126 144 171 161 129 167 126 123 152 161 ...\n $ fp              : num [1:570] 0.985 0.977 0.981 0.982 0.981 0.984 0.986 0.981 0.983 0.986 ...\n $ name            : chr [1:570] \"Anaheim Angels\" \"Arizona Diamondbacks\" \"Atlanta Braves\" \"Baltimore Orioles\" ...\n $ park            : chr [1:570] \"Angels Stadium of Anaheim\" \"Bank One Ballpark\" \"Turner Field\" \"Oriole Park at Camden Yards\" ...\n $ attendance      : num [1:570] 3375677 2519560 2327565 2744018 2837294 ...\n $ bpf             : num [1:570] 97 105 101 98 106 102 103 98 94 113 ...\n $ ppf             : num [1:570] 97 107 100 99 105 102 102 99 94 114 ...\n $ team_idbr       : chr [1:570] \"ANA\" \"ARI\" \"ATL\" \"BAL\" ...\n $ team_i_dlahman45: chr [1:570] \"ANA\" \"ARI\" \"ATL\" \"BAL\" ...\n $ team_i_dretro   : chr [1:570] \"ANA\" \"ARI\" \"ATL\" \"BAL\" ...\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df)\n\n [1] \"year_id\"          \"lg_id\"            \"team_id\"          \"franch_id\"       \n [5] \"div_id\"           \"rank\"             \"g\"                \"ghome\"           \n [9] \"w\"                \"l\"                \"div_win\"          \"wc_win\"          \n[13] \"lg_win\"           \"ws_win\"           \"r\"                \"ab\"              \n[17] \"h\"                \"x2b\"              \"x3b\"              \"hr\"              \n[21] \"bb\"               \"so\"               \"sb\"               \"cs\"              \n[25] \"hbp\"              \"sf\"               \"ra\"               \"er\"              \n[29] \"era\"              \"cg\"               \"sho\"              \"sv\"              \n[33] \"i_pouts\"          \"ha\"               \"hra\"              \"bba\"             \n[37] \"soa\"              \"e\"                \"dp\"               \"fp\"              \n[41] \"name\"             \"park\"             \"attendance\"       \"bpf\"             \n[45] \"ppf\"              \"team_idbr\"        \"team_i_dlahman45\" \"team_i_dretro\""
  },
  {
    "objectID": "posts/08_ranking/08_ranking.html#highest-values",
    "href": "posts/08_ranking/08_ranking.html#highest-values",
    "title": "8: Rankings",
    "section": "Highest Values",
    "text": "Highest Values\nIn the following example, here are the baseball teams (in the past 18 seasons) that have hit the most home runs in a season.\n\ndf |&gt;\n  select(year_id, franch_id, hr) |&gt; #select columns to keep\n  slice_max(hr, n = 10) |&gt; #finds 10 highest values by numerical variable\n  gt() |&gt; #makes nice tables\n  tab_header(title = \"Top 10 Teams by Home Runs\")\n\n\n\n\n\n  \n    \n      Top 10 Teams by Home Runs\n    \n    \n    \n      year_id\n      franch_id\n      hr\n    \n  \n  \n    2019\nMIN\n307\n    2019\nNYY\n306\n    2019\nHOU\n288\n    2019\nLAD\n279\n    2018\nNYY\n267\n    2021\nTOR\n262\n    2005\nTEX\n260\n    2010\nTOR\n257\n    2019\nOAK\n257\n    2019\nCHC\n256\n  \n  \n  \n\n\n\n\nFrom the dplyr part of the tidyverse, observe how the slice_max function will\n\nask for a numerical variable\narrange the data in descending order\nreturn the first \\(n\\) rows"
  },
  {
    "objectID": "posts/08_ranking/08_ranking.html#smallest-values",
    "href": "posts/08_ranking/08_ranking.html#smallest-values",
    "title": "8: Rankings",
    "section": "Smallest Values",
    "text": "Smallest Values\nSimilarly, the slice_min function will\n\nask for a numerical variable\narrange the data in ascending order\nreturn the first \\(n\\) rows\n\nIn the following example, here are the baseball teams (in the past 18 seasons) that had the least earned run average in a season.\n\ndf |&gt;\n  select(year_id, franch_id, era) |&gt; #select columns to keep\n  slice_min(era, n = 10) |&gt; #finds 10 loweest values by numerical variable\n  gt() |&gt; #makes nice tables\n  tab_header(title = \"Top 10 Teams by ERA\")\n\n\n\n\n\n  \n    \n      Top 10 Teams by ERA\n    \n    \n    \n      year_id\n      franch_id\n      era\n    \n  \n  \n    2022\nLAD\n2.80\n    2022\nHOU\n2.90\n    2015\nSTL\n2.94\n    2021\nLAD\n3.01\n    2011\nPHI\n3.02\n    2020\nLAD\n3.02\n    2014\nWSN\n3.03\n    2018\nHOU\n3.11\n    2016\nCHC\n3.15\n    2014\nSEA\n3.17"
  },
  {
    "objectID": "posts/08_ranking/08_ranking.html#optional-customization",
    "href": "posts/08_ranking/08_ranking.html#optional-customization",
    "title": "8: Rankings",
    "section": "Optional: Customization",
    "text": "Optional: Customization\nR programmers like the gt package because we can customize the tables in many ways. The documentation can be found here: https://gt.rstudio.com/index.html\nHere is a slightly more extensive example.\n\ndf |&gt;\n  select(year_id, franch_id, hr) |&gt; #select columns to keep\n  slice_max(hr, n = 10) |&gt; #finds 10 highest values by numerical variable\n  gt() |&gt; #makes nice tables\n  tab_header(title = md(\"Top 10 Teams by **Home Runs**\")) |&gt;\n  tab_footnote(footnote = \"2004 to 2022 seasons\") |&gt;\n  tab_options(column_labels.background.color = \"blue\") |&gt;\n  cols_align(\n    align = \"center\",\n    columns = everything()\n    ) |&gt;\n  tab_style(\n    style = list(\n      cell_fill(color = \"yellow\"),\n      cell_text(weight = \"bold\")\n    ),\n    locations = cells_body(\n      columns = hr\n    )\n  )\n\n\n\n\n\n  \n    \n      Top 10 Teams by Home Runs\n    \n    \n    \n      year_id\n      franch_id\n      hr\n    \n  \n  \n    2019\nMIN\n307\n    2019\nNYY\n306\n    2019\nHOU\n288\n    2019\nLAD\n279\n    2018\nNYY\n267\n    2021\nTOR\n262\n    2005\nTEX\n260\n    2010\nTOR\n257\n    2019\nOAK\n257\n    2019\nCHC\n256\n  \n  \n  \n    \n       2004 to 2022 seasons"
  },
  {
    "objectID": "posts/09_advanced_stats/09_advanced_stats.html",
    "href": "posts/09_advanced_stats/09_advanced_stats.html",
    "title": "9: Advanced Statistics",
    "section": "",
    "text": "Today, I wanted to use AI tools (artificial intelligence) to guide discussions about advanced statistics in our Sports Analytics course.\nIn this blog post, I entered some prompts into ChatGPT (version 3.5) do draft some responses.\n\nDescribe some common statistics in baseball\n\nBaseball is a sport rich in statistical analysis, and many different metrics are used to evaluate the performance of players and teams. Here are some common statistics in baseball:\n\n\n\nBatting Average (BA): Batting average is one of the most basic and widely recognized statistics in baseball. It measures a batter’s success in getting hits and is calculated as the number of hits divided by the number of at-bats. It is typically represented as a three-digit decimal, e.g., .300.\n\n\n\n\nOn-Base Percentage (OBP): OBP measures a player’s ability to get on base and is calculated as the sum of hits, walks, and hit by pitches divided by the sum of at-bats, walks, hit by pitches, and sacrifice flies. OBP provides a more comprehensive view of a player’s ability to reach base than batting average.\n\n\n\n\nSlugging Percentage (SLG): Slugging percentage quantifies a player’s power at the plate. It measures the total bases a player earns from hits and is calculated as the total bases divided by the number of at-bats. Slugging percentage is usually represented as a three-digit decimal, e.g., .500.\n\n\n\n\nOPS (On-Base Plus Slugging): OPS is the sum of a player’s OBP and SLG and is often used as a quick way to assess a player’s overall offensive performance. A higher OPS generally indicates a more effective hitter.\n\n\n\n\nRuns Batted In (RBI): RBI is a statistic that measures a batter’s ability to drive in runs. It counts how many runs a player is responsible for bringing in through hits, sacrifice flies, and some other means.\n\n\n\n\nRuns Scored (R): This stat counts how many times a player crosses home plate, reflecting their ability to contribute to their team’s offense.\n\n\n\n\nEarned Run Average (ERA): ERA is a key statistic for pitchers. It measures the average number of earned runs a pitcher gives up per nine innings. A lower ERA indicates a more effective pitcher.\n\n\n\n\nStrikeouts (K): This stat counts the number of batters a pitcher strikes out. High strikeout totals are generally seen as a sign of a dominant pitcher.\n\n\n\n\nWalks (BB): The number of batters a pitcher allows to reach base via a base on balls or walk. Control is important for pitchers, so a low BB count is usually favorable.\n\n\n\n\nFielding Percentage (FPCT): Fielding percentage is a measure of a player’s defensive abilities. It calculates the number of putouts and assists divided by the total chances (putouts + assists + errors). A higher fielding percentage indicates better defensive performance.\n\n\n\n\nWins (W) and Losses (L): These statistics are traditionally used to assess a pitcher’s performance. A win is credited to the pitcher of record for the winning team, and a loss to the pitcher of record for the losing team. However, these stats have become less significant as more advanced metrics have been developed.\n\n\n\n\nSaves (SV): Saves are awarded to relief pitchers who successfully preserve a lead for their team. A pitcher is credited with a save when they enter a game in a save situation and maintain the lead.\n\n\n\nThese statistics are just the tip of the iceberg when it comes to baseball analytics. In recent years, advanced statistics like WAR (Wins Above Replacement), FIP (Fielding Independent Pitching), and wOBA (Weighted On-Base Average) have gained popularity in providing a more comprehensive understanding of player and team performance.\n\n\n\nDescribe some advanced statistics in baseball\n\nAdvanced statistics in baseball go beyond the traditional metrics to provide a more in-depth and nuanced analysis of player and team performance. These stats are often used by analysts, coaches, and front offices to gain a deeper understanding of a player’s contributions. Here are some advanced statistics in baseball:\n\n\n\nWins Above Replacement (WAR): WAR is a comprehensive statistic that attempts to quantify a player’s total value by measuring how many more wins a player is worth compared to a replacement-level player (a readily available minor league or bench player). It combines a player’s contributions both at the plate and in the field, as well as their baserunning and position.\n\n\n\n\nFielding Independent Pitching (FIP): FIP is a statistic that evaluates a pitcher’s performance based solely on factors they can control: strikeouts, walks, hit by pitches, and home runs. It removes the impact of fielding and luck, providing a more accurate assessment of a pitcher’s ability.\n\n\n\n\nxFIP (Expected Fielding Independent Pitching): xFIP is an adjusted version of FIP that normalizes a pitcher’s home run rate to a league-average HR/FB (home run to fly ball) rate. It’s a better indicator of a pitcher’s true talent, as home run rates can be volatile.\n\n\n\n\nwOBA (Weighted On-Base Average): wOBA is an all-encompassing offensive statistic that assigns specific weights to different offensive events (e.g., singles, doubles, home runs) to measure a player’s overall offensive contribution. It provides a more accurate picture of a player’s offensive value than traditional stats like batting average.\n\n\n\n\nBABIP (Batting Average on Balls in Play): BABIP measures the rate at which a player’s batted balls in play become hits. It’s used to assess whether a player’s success or failure in getting hits is due to luck or skill.\n\n\n\n\nDRA (Deserved Run Average): DRA is an advanced pitching metric that takes into account a wide range of factors, including the quality of opposing batters and situational context, to provide a more accurate measure of a pitcher’s performance.\n\n\n\n\nUZR (Ultimate Zone Rating): UZR is an advanced fielding statistic that attempts to quantify a player’s defensive value by measuring their ability to turn batted balls into outs compared to the average player at their position.\n\n\n\n\nwRC+ (Weighted Runs Created Plus): wRC+ is an advanced offensive statistic that adjusts a player’s wRC (a measure of offensive productivity) for park factors and league averages. It provides a convenient way to compare a player’s offensive output to the league average, with 100 as the league average.\n\n\n\n\nSabermetrics: Sabermetrics is a collection of advanced statistical techniques and metrics used to analyze baseball. It encompasses many of the advanced stats mentioned here, as well as other innovative metrics developed by the sabermetrics community.\n\n\n\n\nExit Velocity and Launch Angle: While not a single statistic, exit velocity (the speed of the baseball off the bat) and launch angle (the angle at which the ball leaves the bat) are critical for understanding a batter’s quality of contact. These stats can help assess a player’s power and ability to make solid contact.\n\n\n\n\nSpin Rate: Spin rate measures the revolutions per minute (RPM) of a pitched baseball. It’s used to evaluate the effectiveness of various pitch types and their movement. High spin rates are often associated with pitches that are difficult for batters to hit.\n\n\n\nThese advanced statistics have become increasingly important in modern baseball analysis, providing a more accurate and comprehensive understanding of player performance and allowing for better player evaluations and game strategies.\n\n\n\nHow have advanced statistics affected the study of baseball?\n\nAdvanced statistics have had a profound impact on the study of baseball in several ways:\n\n\n\nImproved Player Evaluation: Advanced statistics provide a more comprehensive and accurate evaluation of player performance. Traditional statistics like batting average or ERA often offer limited insights, but advanced metrics like WAR, wOBA, and FIP offer a more complete picture of a player’s contributions. This has revolutionized player scouting, drafting, and free-agent signings.\n\n\n\n\nData-Driven Decision-Making: Baseball teams now rely heavily on data-driven decision-making, from in-game strategies to lineup construction. Managers and coaches use advanced statistics to determine optimal defensive shifts, pitching changes, and offensive approaches based on data and probabilities.\n\n\n\n\nInjury Prevention and Player Health: Teams use advanced metrics to monitor player workload, fatigue, and injury risk. Pitch counts, biomechanics analysis, and player tracking data are utilized to keep players healthy and maximize their performance.\n\n\n\n\nScouting and Player Development: Advanced statistics help identify and develop talent more effectively. Teams use data to assess a player’s strengths and weaknesses, make adjustments to improve their performance, and guide player development throughout their careers.\n\n\n\n\nFan Engagement: Advanced statistics have enriched the fan experience. Websites, broadcasts, and mobile apps now offer a wealth of data and metrics, allowing fans to delve deeper into the game’s analysis. This has fostered a greater understanding and appreciation of the sport.\n\n\n\n\nBroadcasting and Analysis: Television and online broadcasts have integrated advanced statistics into their coverage. Analysts frequently discuss metrics like wRC+, DRS (Defensive Runs Saved), and spin rate, enhancing the broadcast’s depth and educational value.\n\n\n\n\nFantasy Baseball: Fantasy baseball, a game based on player statistics, has become more sophisticated due to advanced metrics. Participants use these statistics to draft players, make trades, and set lineups, adding complexity and enjoyment to the fantasy baseball experience.\n\n\n\n\nRule Changes and Adaptation: The introduction of advanced statistics has led to changes in the rules and strategies of the game. Defensive shifts, “bullpenning” (relying heavily on relief pitchers), and the increased emphasis on power hitting and strikeout pitching are examples of how the game has adapted based on data.\n\n\n\n\nHistorical Analysis: Advanced statistics have enabled a reevaluation of historical players and records. For instance, using advanced metrics, it’s possible to compare players from different eras more accurately and assess the impact of ballparks on historical performance.\n\n\n\n\nIncreased Research and Innovation: The world of baseball research has expanded significantly due to advanced metrics. Analysts, researchers, and fans are constantly developing new metrics and conducting in-depth studies to gain further insights into the game.\n\n\n\nIn summary, advanced statistics have brought a new level of sophistication to the study of baseball. They have transformed how the game is played, evaluated, and understood by players, coaches, analysts, and fans. The integration of data and analytics has become a central element in the modern baseball landscape.\n\n\n\nElaborate on the definition of WAR for evaluating baseball players\n\nWins Above Replacement (WAR) is a comprehensive and widely used advanced statistic in baseball for evaluating a player’s overall contribution to their team. It quantifies a player’s value in terms of how many more wins they are worth to their team compared to a hypothetical replacement-level player. In essence, WAR answers the question: “If this player were replaced with a readily available minor league or bench player, how many more or fewer games would their team win over the course of a season?”\n\n\nHere’s an elaborate definition of WAR and how it is calculated:\n\n\n\nComponents of WAR:\n\n\n\n\nOffensive WAR (oWAR): This component evaluates a player’s offensive contributions, including hitting for average, power, and plate discipline. It considers statistics like batting average, on-base percentage, slugging percentage, and more. The oWAR is typically scaled to measure a player’s runs created compared to a replacement-level player.\n\n\n\n\nDefensive WAR (dWAR): Defensive contributions are a significant part of a player’s overall value. dWAR assesses a player’s fielding abilities, including their range, arm strength, and ability to turn batted balls into outs. Defensive metrics like Ultimate Zone Rating (UZR) and Defensive Runs Saved (DRS) are often used in the calculation.\n\n\n\n\nBase Running WAR (bWAR): Base running is another crucial aspect of a player’s value. This component evaluates a player’s ability to take extra bases, steal bases, and avoid getting caught stealing. It’s often quantified using statistics like stolen bases, caught stealing, and base-running efficiency.\n\n\n\n\nPositional Adjustment: Players are adjusted based on the defensive demands of their position. For example, a shortstop’s defensive contributions are considered more valuable than those of a first baseman, so a shortstop’s positional adjustment will be higher.\n\n\n\n\nLeague and Park Adjustments: WAR accounts for the context in which a player performs. It adjusts for the offensive environment of the league they play in and the characteristics of their home ballpark. For instance, playing in a hitter-friendly park may lead to a downward adjustment.\n\n\n\n\nReplacement Level: Replacement level refers to the expected performance of a freely available player, often a minor league call-up or a bench player. It’s a baseline for comparison, assuming that a team can replace a player who performs at or slightly below league average without much difficulty.\n\n\n\n\nCalculation:\n\n\n\nThe calculation of WAR involves various steps, but the fundamental idea is to compare a player’s actual contributions to what a replacement-level player would provide in the same playing time. The formula for WAR is adjusted slightly by different sources (e.g., FanGraphs, Baseball-Reference), but it generally follows a similar structure:\n\n\nWAR=(oWAR+dWAR+bWAR+PositionalAdjustment)/RunsperWinWAR=(oWAR+dWAR+bWAR+PositionalAdjustment)/RunsperWin\n\n\n\nCalculate oWAR, dWAR, and bWAR using appropriate statistics and metrics.\nApply the positional adjustment, which accounts for the value of playing a particular position.\nDivide the sum of oWAR, dWAR, bWAR, and positional adjustment by the estimated number of runs required for one additional win. This number varies slightly from year to year due to league scoring trends but is typically around 10 runs.\n\n\n\n\nInterpretation:\n\n\n\nA player’s WAR is typically expressed as a whole number. For example, a player with a WAR of 5.0 is considered a very valuable player, as they have contributed approximately five additional wins to their team over a replacement-level player.\n\n\nWAR has become a central tool for comparing and evaluating players across different positions and eras. It provides a more complete picture of a player’s value beyond traditional statistics and allows for more objective assessments of their contributions to their team’s success.\n\n\n\nHow do we judge the validity of advanced metrics in baseball statistics?\n\nJudging the validity of advanced metrics in baseball statistics is a crucial task to ensure that these metrics provide meaningful insights into player and team performance. Here are some key principles and considerations for evaluating the validity of advanced metrics in baseball:\n\n\n\nTransparency and Methodology: &gt; The methodology used to calculate the metric should be transparent and well-documented. It should be clear how the metric is derived, what data sources are used, and how any adjustments or calculations are made.\n\n\n\n\nPeer Review and Expert Consensus: &gt; Metrics that have been subject to peer review or have gained acceptance among baseball experts and analysts are generally more trustworthy. A broad consensus within the baseball analytics community can be a good indicator of a metric’s validity.\n\n\n\n\nData Reliability: &gt; The data used to calculate advanced metrics must be reliable and consistent. Inaccurate or incomplete data can undermine the validity of the metric. Data sources like Statcast, PitchF/X, and Play-by-Play data have become standard for advanced analytics.\n\n\n\n\nHistorical Context: &gt; Metrics that align with historical trends and provide meaningful context to past player performance are often more valid. Valid metrics should help explain why certain players or teams were successful or not in the past.\n\n\n\n\nPredictive Value: &gt; Metrics that show a strong correlation with future performance are generally more valid. If a metric consistently predicts a player’s or team’s success or struggles, it suggests that the metric captures something meaningful.\n\n\n\n\nTesting Against Outcomes: &gt; One way to assess the validity of a metric is to test it against real-world outcomes. For example, does a pitcher’s Fielding Independent Pitching (FIP) correlate well with their future performance and actual run prevention?\n\n\n\n\nExternal Validation: &gt; Metrics that align with other validated metrics or contribute to a more comprehensive understanding of a player’s performance are generally more valid. They should fit within a broader framework of baseball analysis.\n\n\n\n\nLongitudinal Studies: &gt; Long-term studies of advanced metrics and their correlation with actual performance can provide insights into their validity. This can involve looking at how metrics have evolved over time and whether they remain relevant.\n\n\n\n\nSensitivity to Player Context: &gt; Metrics that take into account player context and nuances (e.g., park effects, defense, era) and are designed to be more descriptive and explanatory are often more valid.\n\n\n\n\nAccounting for Limitations:\n\n\n\n\nMetrics should acknowledge their limitations. Every metric has some degree of error or uncertainty, and understanding these limitations is essential for proper interpretation.\n\n\n\n\nExternal Review and Critique:\n\n\n\n\nMetrics should be open to external review and critique. If the creators of a metric are willing to engage with the baseball community and address concerns or criticisms, it can enhance the metric’s validity.\n\n\n\n\nReproducibility: &gt; The calculations and methodologies behind advanced metrics should be reproducible by others. If different analysts can independently calculate the same metric with similar results, it adds to its credibility.\n\n\n\n\nPerformance Across Player Types: &gt; Metrics should work well for a wide range of player types. A valid metric should be applicable to both hitters and pitchers, as well as players with different playing styles and roles.\n\n\n\n\nAlignment with Baseball Intuition: &gt; A valid metric should make intuitive sense to baseball experts. If a metric’s results align with what seasoned observers of the game would expect, it adds to its credibility.\n\n\n\nEvaluating the validity of advanced metrics in baseball statistics is an ongoing process. Metrics may evolve and improve over time as new data sources, methodologies, and insights become available. Additionally, considering multiple metrics and contextualizing them within a broader framework of analysis can help provide a more comprehensive view of player and team performance."
  },
  {
    "objectID": "posts/10_lit_search/10_lit_search.html",
    "href": "posts/10_lit_search/10_lit_search.html",
    "title": "10: Literature Review",
    "section": "",
    "text": "Today, I wanted to use AI tools (artificial intelligence) to guide discussions about literature reviews in our Sports Analytics course. Here is a great resource to get an overview of these tools:\n\nTexas A&M University research guide on AI-based literature review tools\n\n\nBing\nMicrosoft’s search engine claims to be able to leverage AI to aid researchers. Here, I performed a search for\n\n“advanced baseball statistics papers”\n\nand I was pleased to see a few recent peer-reviewed papers listed at the top.\n\n\n\nBing search results\n\n\n\n\nSemantic Scholar\nSemantic Scholar is a website with a clean interface that allows researchers to find papers quickly in their area of interest. Here, I performed a search for\n\n“advanced baseball statistics”\n\n\n\n\nSemantic Scholar search results\n\n\nand I was happy to find a variety of papers from realms such as baseball journalism, sports fitness, and economics.\n\n\nResearch Rabbit\nOne of my colleagues told us about Research Rabbit at a workshop, so here I gave that app a test run—seeded with one of the papers that I found in a search above.\n\n\n\nResearch Rabbit citation graph\n\n\nOne of the appeals is the creation of a citation graph that connects papers. A researcher can then read through a curated selection of papers and become an expert in an arena."
  },
  {
    "objectID": "posts/11_confidence_intervals/11_confidence_intervals.html",
    "href": "posts/11_confidence_intervals/11_confidence_intervals.html",
    "title": "11: Confidence Intervals",
    "section": "",
    "text": "library(\"infer\")\nlibrary(\"moderndive\")\nlibrary(\"patchwork\") #easy graph layouts\nlibrary(\"tidyverse\")\nSource: Statistical Inference via Data Science: A Modern Dive into R and the Tidyverse"
  },
  {
    "objectID": "posts/11_confidence_intervals/11_confidence_intervals.html#look-at-the-data",
    "href": "posts/11_confidence_intervals/11_confidence_intervals.html#look-at-the-data",
    "title": "11: Confidence Intervals",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df)\n\n# A tibble: 6 × 48\n  year_id lg_id team_id franch_id div_id  rank     g ghome     w     l div_win\n    &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;     &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;  \n1    2004 AL    ANA     ANA       W          1   162    81    92    70 Y      \n2    2004 NL    ARI     ARI       W          5   162    81    51   111 N      \n3    2004 NL    ATL     ATL       E          1   162    81    96    66 Y      \n4    2004 AL    BAL     BAL       E          3   162    81    78    84 N      \n5    2004 AL    BOS     BOS       E          2   162    81    98    64 N      \n6    2004 AL    CHA     CHW       C          2   162    81    83    79 N      \n# ℹ 37 more variables: wc_win &lt;chr&gt;, lg_win &lt;chr&gt;, ws_win &lt;chr&gt;, r &lt;dbl&gt;,\n#   ab &lt;dbl&gt;, h &lt;dbl&gt;, x2b &lt;dbl&gt;, x3b &lt;dbl&gt;, hr &lt;dbl&gt;, bb &lt;dbl&gt;, so &lt;dbl&gt;,\n#   sb &lt;dbl&gt;, cs &lt;dbl&gt;, hbp &lt;dbl&gt;, sf &lt;dbl&gt;, ra &lt;dbl&gt;, er &lt;dbl&gt;, era &lt;dbl&gt;,\n#   cg &lt;dbl&gt;, sho &lt;dbl&gt;, sv &lt;dbl&gt;, i_pouts &lt;dbl&gt;, ha &lt;dbl&gt;, hra &lt;dbl&gt;,\n#   bba &lt;dbl&gt;, soa &lt;dbl&gt;, e &lt;dbl&gt;, dp &lt;dbl&gt;, fp &lt;dbl&gt;, name &lt;chr&gt;, park &lt;chr&gt;,\n#   attendance &lt;dbl&gt;, bpf &lt;dbl&gt;, ppf &lt;dbl&gt;, team_idbr &lt;chr&gt;,\n#   team_i_dlahman45 &lt;chr&gt;, team_i_dretro &lt;chr&gt;\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df, give.attr = FALSE)\n\nspc_tbl_ [570 × 48] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ year_id         : num [1:570] 2004 2004 2004 2004 2004 ...\n $ lg_id           : chr [1:570] \"AL\" \"NL\" \"NL\" \"AL\" ...\n $ team_id         : chr [1:570] \"ANA\" \"ARI\" \"ATL\" \"BAL\" ...\n $ franch_id       : chr [1:570] \"ANA\" \"ARI\" \"ATL\" \"BAL\" ...\n $ div_id          : chr [1:570] \"W\" \"W\" \"E\" \"E\" ...\n $ rank            : num [1:570] 1 5 1 3 2 2 3 4 3 4 ...\n $ g               : num [1:570] 162 162 162 162 162 162 162 162 162 162 ...\n $ ghome           : num [1:570] 81 81 81 81 81 81 82 81 81 81 ...\n $ w               : num [1:570] 92 51 96 78 98 83 89 76 80 68 ...\n $ l               : num [1:570] 70 111 66 84 64 79 73 86 82 94 ...\n $ div_win         : chr [1:570] \"Y\" \"N\" \"Y\" \"N\" ...\n $ wc_win          : chr [1:570] \"N\" \"N\" \"N\" \"N\" ...\n $ lg_win          : chr [1:570] \"N\" \"N\" \"N\" \"N\" ...\n $ ws_win          : chr [1:570] \"N\" \"N\" \"N\" \"N\" ...\n $ r               : num [1:570] 836 615 803 842 949 865 789 750 858 833 ...\n $ ab              : num [1:570] 5675 5544 5570 5736 5720 ...\n $ h               : num [1:570] 1603 1401 1503 1614 1613 ...\n $ x2b             : num [1:570] 272 295 304 319 373 284 308 287 345 331 ...\n $ x3b             : num [1:570] 37 38 37 18 25 19 29 28 29 34 ...\n $ hr              : num [1:570] 162 135 178 169 222 242 235 194 184 202 ...\n $ bb              : num [1:570] 450 441 587 528 659 499 489 599 606 568 ...\n $ so              : num [1:570] 942 1022 1158 949 1189 ...\n $ sb              : num [1:570] 143 53 86 101 68 78 66 77 94 44 ...\n $ cs              : num [1:570] 46 32 32 41 30 51 28 25 55 33 ...\n $ hbp             : num [1:570] 73 35 59 57 69 63 38 81 78 54 ...\n $ sf              : num [1:570] 41 37 48 62 55 42 48 25 42 37 ...\n $ ra              : num [1:570] 734 899 668 830 768 831 665 907 857 923 ...\n $ er              : num [1:570] 692 794 603 760 674 782 621 832 784 883 ...\n $ era             : num [1:570] 4.28 4.98 3.74 4.7 4.18 4.91 3.81 5.19 4.81 5.54 ...\n $ cg              : num [1:570] 2 5 4 8 4 8 3 5 8 3 ...\n $ sho             : num [1:570] 11 6 13 10 12 8 6 8 8 2 ...\n $ sv              : num [1:570] 50 33 48 27 36 34 42 47 32 36 ...\n $ i_pouts         : num [1:570] 4363 4308 4350 4366 4354 ...\n $ ha              : num [1:570] 1476 1480 1475 1488 1430 ...\n $ hra             : num [1:570] 170 197 154 159 159 224 169 236 201 198 ...\n $ bba             : num [1:570] 502 668 523 687 447 527 545 572 579 697 ...\n $ soa             : num [1:570] 1164 1153 1025 1090 1132 ...\n $ e               : num [1:570] 90 139 116 110 118 100 86 113 106 89 ...\n $ dp              : num [1:570] 126 144 171 161 129 167 126 123 152 161 ...\n $ fp              : num [1:570] 0.985 0.977 0.981 0.982 0.981 0.984 0.986 0.981 0.983 0.986 ...\n $ name            : chr [1:570] \"Anaheim Angels\" \"Arizona Diamondbacks\" \"Atlanta Braves\" \"Baltimore Orioles\" ...\n $ park            : chr [1:570] \"Angels Stadium of Anaheim\" \"Bank One Ballpark\" \"Turner Field\" \"Oriole Park at Camden Yards\" ...\n $ attendance      : num [1:570] 3375677 2519560 2327565 2744018 2837294 ...\n $ bpf             : num [1:570] 97 105 101 98 106 102 103 98 94 113 ...\n $ ppf             : num [1:570] 97 107 100 99 105 102 102 99 94 114 ...\n $ team_idbr       : chr [1:570] \"ANA\" \"ARI\" \"ATL\" \"BAL\" ...\n $ team_i_dlahman45: chr [1:570] \"ANA\" \"ARI\" \"ATL\" \"BAL\" ...\n $ team_i_dretro   : chr [1:570] \"ANA\" \"ARI\" \"ATL\" \"BAL\" ...\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df)\n\n [1] \"year_id\"          \"lg_id\"            \"team_id\"          \"franch_id\"       \n [5] \"div_id\"           \"rank\"             \"g\"                \"ghome\"           \n [9] \"w\"                \"l\"                \"div_win\"          \"wc_win\"          \n[13] \"lg_win\"           \"ws_win\"           \"r\"                \"ab\"              \n[17] \"h\"                \"x2b\"              \"x3b\"              \"hr\"              \n[21] \"bb\"               \"so\"               \"sb\"               \"cs\"              \n[25] \"hbp\"              \"sf\"               \"ra\"               \"er\"              \n[29] \"era\"              \"cg\"               \"sho\"              \"sv\"              \n[33] \"i_pouts\"          \"ha\"               \"hra\"              \"bba\"             \n[37] \"soa\"              \"e\"                \"dp\"               \"fp\"              \n[41] \"name\"             \"park\"             \"attendance\"       \"bpf\"             \n[45] \"ppf\"              \"team_idbr\"        \"team_i_dlahman45\" \"team_i_dretro\""
  },
  {
    "objectID": "posts/11_confidence_intervals/11_confidence_intervals.html#one-sample",
    "href": "posts/11_confidence_intervals/11_confidence_intervals.html#one-sample",
    "title": "11: Confidence Intervals",
    "section": "One Sample",
    "text": "One Sample\n\nHR_sample &lt;- df |&gt; select(hr)\n\n\np1 &lt;- HR_sample |&gt;\n  ggplot(aes(x = hr)) +\n  geom_histogram(binwidth = 5, color = \"black\", fill = \"blue\") +\n  labs(title = \"Distribution of Home Runs\",\n       subtitle = \"Based on a sample of data\",\n       caption = \"Spark 01\") +\n  theme_minimal()\n\n# print\np1"
  },
  {
    "objectID": "posts/11_confidence_intervals/11_confidence_intervals.html#resampling",
    "href": "posts/11_confidence_intervals/11_confidence_intervals.html#resampling",
    "title": "11: Confidence Intervals",
    "section": "Resampling",
    "text": "Resampling\nUsing the available sample of data to fabricate another sample is called resampling.\n\nHR_resampled &lt;- HR_sample |&gt;\n  sample_n(replace = TRUE, size = nrow(HR_sample))\n\n\np2 &lt;- HR_resampled |&gt;\n  ggplot(aes(x = hr)) +\n  geom_histogram(binwidth = 5, color = \"black\", fill = \"blue\") +\n  labs(title = \"Distribution of Home Runs\",\n       subtitle = \"Based on a sample of data\",\n       caption = \"Spark 01\") +\n  theme_minimal()\n\n# print\np2\n\n\n\n\n\n# patchwork\np1 + p2"
  },
  {
    "objectID": "posts/11_confidence_intervals/11_confidence_intervals.html#resampling-many-times",
    "href": "posts/11_confidence_intervals/11_confidence_intervals.html#resampling-many-times",
    "title": "11: Confidence Intervals",
    "section": "Resampling Many Times",
    "text": "Resampling Many Times\n\nsummary(HR_sample)\n\n       hr       \n Min.   : 51.0  \n 1st Qu.:141.2  \n Median :168.0  \n Mean   :168.6  \n 3rd Qu.:198.0  \n Max.   :307.0  \n\n\nSuppose now that we have each person in a 23-student classroom repeat the act of drawing that home run data with replacement.\n\nHR_resampled_many &lt;- HR_sample |&gt;\n  rep_sample_n(replace = TRUE, reps = 23, size = nrow(HR_sample))\n\n\nHR_resampled_many %&gt;%\n  group_by(replicate) %&gt;%\n  mutate(mean_HR = mean(hr)) %&gt;%\n  ungroup() %&gt;%\n  select(replicate, mean_HR) %&gt;%\n  distinct() %&gt;%\n  ggplot(aes(x = mean_HR)) +\n  geom_histogram(binwidth = 1, color = \"black\", fill = \"blue\") +\n  labs(title = \"Resampling Results\",\n       subtitle = \"N = 23 resamples\",\n       caption = \"Source: Modern Dive\")\n\n\n\n\nOut of curiosity, let us push this process to \\(N = 1337\\) resamples.\n\nHR_resampled_many &lt;- HR_sample |&gt;\n  rep_sample_n(replace = TRUE, reps = 1337, size = nrow(HR_sample))\n\n\nHR_resampled_many %&gt;%\n  group_by(replicate) %&gt;%\n  mutate(mean_HR = mean(hr)) %&gt;%\n  ungroup() %&gt;%\n  select(replicate, mean_HR) %&gt;%\n  distinct() %&gt;%\n  ggplot(aes(x = mean_HR)) +\n  geom_histogram(binwidth = 1, color = \"black\", fill = \"blue\") +\n  labs(title = \"Resampling Results\",\n       subtitle = \"N = 23 resamples\",\n       caption = \"Source: Modern Dive\")"
  },
  {
    "objectID": "posts/11_confidence_intervals/11_confidence_intervals.html#explore-the-data",
    "href": "posts/11_confidence_intervals/11_confidence_intervals.html#explore-the-data",
    "title": "11: Confidence Intervals",
    "section": "Explore the Data",
    "text": "Explore the Data\nLoad your data set (for your sport) using the read_csv command and save the data frame as df.\nUse the head, str, and colnames commands to look at your data set.\nToday, you are asked to build two confidence intervals, display visualizations, and describe the confidence intervals."
  },
  {
    "objectID": "posts/11_confidence_intervals/11_confidence_intervals.html#group-exercise-1",
    "href": "posts/11_confidence_intervals/11_confidence_intervals.html#group-exercise-1",
    "title": "11: Confidence Intervals",
    "section": "Group Exercise 1",
    "text": "Group Exercise 1\nChoose a numerical variable and build a bootstrap distribution from its resampling\nCompute the endpoints of the confidence interval using the get_ci function.\nUse the visualize function to view the bootstrap distribution along with a shaded overlay to display the confidence interval.\nDescribe your confidence interval in a complete sentence."
  },
  {
    "objectID": "posts/11_confidence_intervals/11_confidence_intervals.html#group-exercise-2",
    "href": "posts/11_confidence_intervals/11_confidence_intervals.html#group-exercise-2",
    "title": "11: Confidence Intervals",
    "section": "Group Exercise 2",
    "text": "Group Exercise 2\nChoose another numerical variable and build a bootstrap distribution from its resampling\nCompute the endpoints of the confidence interval using the get_ci function.\nUse the visualize function to view the bootstrap distribution along with a shaded overlay to display the confidence interval.\nDescribe your confidence interval in a complete sentence."
  },
  {
    "objectID": "posts/12_hypothesis_testing/12_hypothesis_testing.html",
    "href": "posts/12_hypothesis_testing/12_hypothesis_testing.html",
    "title": "12: Hypothesis Testing",
    "section": "",
    "text": "library(\"infer\")\nlibrary(\"moderndive\")\nlibrary(\"patchwork\") #easy graph layouts\nlibrary(\"tidyverse\")\nSource: Statistical Inference via Data Science: A Modern Dive into R and the Tidyverse"
  },
  {
    "objectID": "posts/12_hypothesis_testing/12_hypothesis_testing.html#look-at-the-data",
    "href": "posts/12_hypothesis_testing/12_hypothesis_testing.html#look-at-the-data",
    "title": "12: Hypothesis Testing",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df)\n\n# A tibble: 6 × 48\n  year_id lg_id team_id franch_id div_id  rank     g ghome     w     l div_win\n    &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;     &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;  \n1    2010 NL    ARI     ARI       W          5   162    81    65    97 N      \n2    2010 NL    ATL     ATL       E          2   162    81    91    71 N      \n3    2010 AL    BAL     BAL       E          5   162    81    66    96 N      \n4    2010 AL    BOS     BOS       E          3   162    81    89    73 N      \n5    2010 AL    CHA     CHW       C          2   162    81    88    74 N      \n6    2010 NL    CHN     CHC       C          5   162    81    75    87 N      \n# ℹ 37 more variables: wc_win &lt;chr&gt;, lg_win &lt;chr&gt;, ws_win &lt;chr&gt;, r &lt;dbl&gt;,\n#   ab &lt;dbl&gt;, h &lt;dbl&gt;, x2b &lt;dbl&gt;, x3b &lt;dbl&gt;, hr &lt;dbl&gt;, bb &lt;dbl&gt;, so &lt;dbl&gt;,\n#   sb &lt;dbl&gt;, cs &lt;dbl&gt;, hbp &lt;dbl&gt;, sf &lt;dbl&gt;, ra &lt;dbl&gt;, er &lt;dbl&gt;, era &lt;dbl&gt;,\n#   cg &lt;dbl&gt;, sho &lt;dbl&gt;, sv &lt;dbl&gt;, i_pouts &lt;dbl&gt;, ha &lt;dbl&gt;, hra &lt;dbl&gt;,\n#   bba &lt;dbl&gt;, soa &lt;dbl&gt;, e &lt;dbl&gt;, dp &lt;dbl&gt;, fp &lt;dbl&gt;, name &lt;chr&gt;, park &lt;chr&gt;,\n#   attendance &lt;dbl&gt;, bpf &lt;dbl&gt;, ppf &lt;dbl&gt;, team_idbr &lt;chr&gt;,\n#   team_i_dlahman45 &lt;chr&gt;, team_i_dretro &lt;chr&gt;\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df, give.attr = FALSE)\n\nspc_tbl_ [300 × 48] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ year_id         : num [1:300] 2010 2010 2010 2010 2010 2010 2010 2010 2010 2010 ...\n $ lg_id           : chr [1:300] \"NL\" \"NL\" \"AL\" \"AL\" ...\n $ team_id         : chr [1:300] \"ARI\" \"ATL\" \"BAL\" \"BOS\" ...\n $ franch_id       : chr [1:300] \"ARI\" \"ATL\" \"BAL\" \"BOS\" ...\n $ div_id          : chr [1:300] \"W\" \"E\" \"E\" \"E\" ...\n $ rank            : num [1:300] 5 2 5 3 2 5 1 4 3 3 ...\n $ g               : num [1:300] 162 162 162 162 162 162 162 162 162 162 ...\n $ ghome           : num [1:300] 81 81 81 81 81 81 81 81 81 81 ...\n $ w               : num [1:300] 65 91 66 89 88 75 91 69 83 81 ...\n $ l               : num [1:300] 97 71 96 73 74 87 71 93 79 81 ...\n $ div_win         : chr [1:300] \"N\" \"N\" \"N\" \"N\" ...\n $ wc_win          : chr [1:300] \"N\" \"Y\" \"N\" \"N\" ...\n $ lg_win          : chr [1:300] \"N\" \"N\" \"N\" \"N\" ...\n $ ws_win          : chr [1:300] \"N\" \"N\" \"N\" \"N\" ...\n $ r               : num [1:300] 713 738 613 818 752 685 790 646 770 751 ...\n $ ab              : num [1:300] 5473 5463 5554 5646 5484 ...\n $ h               : num [1:300] 1366 1411 1440 1511 1467 ...\n $ x2b             : num [1:300] 301 312 264 358 263 298 293 290 270 308 ...\n $ x3b             : num [1:300] 34 25 21 22 21 27 30 20 54 32 ...\n $ hr              : num [1:300] 180 139 133 211 177 149 188 128 173 152 ...\n $ bb              : num [1:300] 589 634 424 587 467 479 522 545 585 546 ...\n $ so              : num [1:300] 1529 1140 1056 1140 922 ...\n $ sb              : num [1:300] 86 63 76 68 160 55 93 91 99 69 ...\n $ cs              : num [1:300] 41 29 34 17 74 31 43 33 42 30 ...\n $ hbp             : num [1:300] 39 51 54 47 79 50 68 64 47 41 ...\n $ sf              : num [1:300] 41 35 45 46 38 38 50 33 47 41 ...\n $ ra              : num [1:300] 836 629 785 744 704 767 685 752 717 743 ...\n $ er              : num [1:300] 765 569 733 679 658 668 648 684 663 690 ...\n $ era             : num [1:300] 4.81 3.56 4.59 4.2 4.09 4.18 4.01 4.3 4.14 4.3 ...\n $ cg              : num [1:300] 3 2 3 3 6 1 4 10 6 6 ...\n $ sho             : num [1:300] 3 9 7 9 11 14 9 4 12 5 ...\n $ sv              : num [1:300] 35 41 35 44 43 40 43 34 35 32 ...\n $ i_pouts         : num [1:300] 4296 4318 4309 4370 4339 ...\n $ ha              : num [1:300] 1503 1326 1508 1402 1471 ...\n $ hra             : num [1:300] 210 126 186 152 136 154 158 147 139 142 ...\n $ bba             : num [1:300] 548 505 520 580 490 605 524 572 525 537 ...\n $ soa             : num [1:300] 1070 1241 1007 1207 1149 ...\n $ e               : num [1:300] 102 126 105 111 103 126 72 110 101 109 ...\n $ dp              : num [1:300] 152 166 141 132 158 137 142 179 182 171 ...\n $ fp              : num [1:300] 0.983 0.98 0.982 0.982 0.983 0.979 0.988 0.982 0.984 0.982 ...\n $ name            : chr [1:300] \"Arizona Diamondbacks\" \"Atlanta Braves\" \"Baltimore Orioles\" \"Boston Red Sox\" ...\n $ park            : chr [1:300] \"Chase Field\" \"Turner Field\" \"Oriole Park at Camden Yards\" \"Fenway Park II\" ...\n $ attendance      : num [1:300] 2056941 2510119 1733018 3046443 2194378 ...\n $ bpf             : num [1:300] 104 98 101 106 105 108 99 93 115 101 ...\n $ ppf             : num [1:300] 105 97 102 105 105 108 99 93 115 101 ...\n $ team_idbr       : chr [1:300] \"ARI\" \"ATL\" \"BAL\" \"BOS\" ...\n $ team_i_dlahman45: chr [1:300] \"ARI\" \"ATL\" \"BAL\" \"BOS\" ...\n $ team_i_dretro   : chr [1:300] \"ARI\" \"ATL\" \"BAL\" \"BOS\" ...\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df)\n\n [1] \"year_id\"          \"lg_id\"            \"team_id\"          \"franch_id\"       \n [5] \"div_id\"           \"rank\"             \"g\"                \"ghome\"           \n [9] \"w\"                \"l\"                \"div_win\"          \"wc_win\"          \n[13] \"lg_win\"           \"ws_win\"           \"r\"                \"ab\"              \n[17] \"h\"                \"x2b\"              \"x3b\"              \"hr\"              \n[21] \"bb\"               \"so\"               \"sb\"               \"cs\"              \n[25] \"hbp\"              \"sf\"               \"ra\"               \"er\"              \n[29] \"era\"              \"cg\"               \"sho\"              \"sv\"              \n[33] \"i_pouts\"          \"ha\"               \"hra\"              \"bba\"             \n[37] \"soa\"              \"e\"                \"dp\"               \"fp\"              \n[41] \"name\"             \"park\"             \"attendance\"       \"bpf\"             \n[45] \"ppf\"              \"team_idbr\"        \"team_i_dlahman45\" \"team_i_dretro\""
  },
  {
    "objectID": "posts/12_hypothesis_testing/12_hypothesis_testing.html#example-1",
    "href": "posts/12_hypothesis_testing/12_hypothesis_testing.html#example-1",
    "title": "12: Hypothesis Testing",
    "section": "Example 1",
    "text": "Example 1\n\nexplanatory variable (x, categorical): lg_id\nresponse variable (y, numerical): sb\nnull hypothesis: Both the National and American Leagues had the same average number of stolen bases.\nalternative hypothesis: The National and American Leagues had a different average number of stolen bases.\n\nWe can use the table command to get a quick list of the labels within a categorical variable.\n\n# tally\ntable(df$lg_id)\n\n\n AL  NL \n147 153 \n\n\nWe should use a side-by-side boxplot visualization to get a sense of two quantities.\n\n# boxplot\ndf %&gt;%\n  filter(lg_id == \"NL\" | lg_id == \"AL\") %&gt;% #use only two labels\n  ggplot(aes(x = lg_id, y = sb)) + #x-axis: categorical, y-axis: numerical\n  geom_boxplot(aes(fill = lg_id)) + \n  labs(title = \"Stolen Bases by League\",\n       subtitle = \"2010 to 2019\",\n       caption = \"Spark 10\",\n       x = \"league\",\n       y = \"stolen bases\")\n\n\n\n\nNext, we compute the observed difference in means.\n\n# compute observed difference in means\nobs_diff_means &lt;- df %&gt;%\n  filter(lg_id == \"NL\" | lg_id == \"AL\") %&gt;% #use only two labels\n  specify(formula = sb ~ lg_id) %&gt;% #response_var ~ explanatory_var\n  calculate(stat = \"diff in means\", order = c(\"AL\", \"NL\"))\n\n# print\nobs_diff_means\n\nResponse: sb (numeric)\nExplanatory: lg_id (factor)\n# A tibble: 1 × 1\n   stat\n  &lt;dbl&gt;\n1  1.19\n\n\nNow, we use the infer package to create null distribution from the null hypothesis.\n\n# build a null distribution\nnull_distribution &lt;- df %&gt;%\n  filter(lg_id == \"NL\" | lg_id == \"AL\") %&gt;%\n  specify(formula = sb ~ lg_id) %&gt;%\n  hypothesize(null = \"independence\") %&gt;%\n  generate(reps = 123, type = \"permute\") %&gt;%\n  calculate(stat = \"diff in means\", order = c(\"AL\", \"NL\"))\n\n\n# visualize the p-value\nvisualize(null_distribution, bins = 10) + \n  shade_p_value(obs_stat = obs_diff_means, direction = \"two_sided\")\n\n\n\n\n\n# get p-value\nnull_distribution %&gt;%\n  get_p_value(obs_stat = obs_diff_means, direction = \"two_sided\")\n\n# A tibble: 1 × 1\n  p_value\n    &lt;dbl&gt;\n1   0.732\n\n\nSince the p-value is greater than 0.05, we fail to reject the claim that the two leagues had the same average number of stolen bases."
  },
  {
    "objectID": "posts/12_hypothesis_testing/12_hypothesis_testing.html#example-2",
    "href": "posts/12_hypothesis_testing/12_hypothesis_testing.html#example-2",
    "title": "12: Hypothesis Testing",
    "section": "Example 2",
    "text": "Example 2\n\nexplanatory variable (x, categorical): franch_id\nresponse variable (y, numerical): w\nnull hypothesis: Both the Giants and the Padres had the same average number of wins.\nalternative hypothesis: The Giants and the Padres had a different average number of wins.\n\nWe can use the table command to get a quick list of the labels within a categorical variable.\n\n# tally\ntable(df$franch_id)\n\n\nANA ARI ATL BAL BOS CHC CHW CIN CLE COL DET FLA HOU KCR LAD MIL MIN NYM NYY OAK \n 10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10 \nPHI PIT SDP SEA SFG STL TBD TEX TOR WSN \n 10  10  10  10  10  10  10  10  10  10 \n\n\nWe should use a side-by-side boxplot visualization to get a sense of two quantities.\n\n# boxplot\ndf %&gt;%\n  filter(franch_id == \"COL\" | franch_id == \"STL\") %&gt;% #use only two labels\n  ggplot(aes(x = franch_id, y = w)) + #x-axis: categorical, y-axis: numerical\n  geom_boxplot(aes(color = franch_id, fill = franch_id)) + \n  labs(title = \"Wins by Team\",\n       subtitle = \"2010 to 2019\",\n       caption = \"Spark 10\",\n       x = \"team\",\n       y = \"wins\") +\n  scale_color_manual(values = c(\"#C4CED4\", \"#0C2340\")) +\n  scale_fill_manual(values = c(\"#333366\", \"#C41E3A\")) +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\n\n\n\nNext, we compute the observed difference in means.\n\n# compute observed difference in means\nobs_diff_means &lt;- df %&gt;%\n  filter(franch_id == \"COL\" | franch_id == \"STL\") %&gt;% #use only two labels\n  specify(formula = w ~ franch_id) %&gt;% #response_var ~ explanatory_var\n  calculate(stat = \"diff in means\", order = c(\"COL\", \"STL\"))\n\n# print\nobs_diff_means\n\nResponse: w (numeric)\nExplanatory: franch_id (factor)\n# A tibble: 1 × 1\n   stat\n  &lt;dbl&gt;\n1 -14.7\n\n\nNow, we use the infer package to create null distribution from the null hypothesis.\n\n# build a null distribution\nnull_distribution &lt;- df %&gt;%\n  filter(franch_id == \"COL\" | franch_id == \"STL\") %&gt;% #use only two labels\n  specify(formula = w ~ franch_id) %&gt;% #response_var ~ explanatory_var\n  hypothesize(null = \"independence\") %&gt;%\n  generate(reps = 123, type = \"permute\") %&gt;%\n  calculate(stat = \"diff in means\", order = c(\"COL\", \"STL\"))\n\n\n# visualize the p-value\nvisualize(null_distribution, bins = 10) + \n  shade_p_value(obs_stat = obs_diff_means, direction = \"two_sided\")\n\n\n\n\n\n# get p-value\nnull_distribution %&gt;%\n  get_p_value(obs_stat = obs_diff_means, direction = \"two_sided\")\n\nWarning: Please be cautious in reporting a p-value of 0. This result is an\napproximation based on the number of `reps` chosen in the `generate()` step.\nSee `?get_p_value()` for more information.\n\n\n# A tibble: 1 × 1\n  p_value\n    &lt;dbl&gt;\n1       0\n\n\nSince the p-value is less than 0.05, we reject the claim that the two teams had the same average number of wins."
  },
  {
    "objectID": "posts/12_hypothesis_testing/12_hypothesis_testing.html#explore-the-data",
    "href": "posts/12_hypothesis_testing/12_hypothesis_testing.html#explore-the-data",
    "title": "12: Hypothesis Testing",
    "section": "Explore the Data",
    "text": "Explore the Data\nLoad your data set (for your sport) using the read_csv command and save the data frame as df.\nUse the head, str, and colnames commands to look at your data set.\nToday, you are asked to carry out two hypothesis tests, display visualizations, and describe the results."
  },
  {
    "objectID": "posts/12_hypothesis_testing/12_hypothesis_testing.html#group-exercise-1",
    "href": "posts/12_hypothesis_testing/12_hypothesis_testing.html#group-exercise-1",
    "title": "12: Hypothesis Testing",
    "section": "Group Exercise 1",
    "text": "Group Exercise 1\nCome up with a hypothesis test and describe it here\n\nexplanatory variable (x, categorical):\nresponse variable (y, numerical):\nnull hypothesis:\nalternative hypothesis:\n\nUse the table function on the categorical variable to tally its contents.\nMake a side-by-side boxplot visualization to get a sense of two quantities.\nUse the infer package to create null distribution from the null hypothesis.\nUse the visualize function to view the null distribution along with a shaded overlay to display the p-value.\nDescribe the results of your hypothesis test in a complete sentence."
  },
  {
    "objectID": "posts/12_hypothesis_testing/12_hypothesis_testing.html#group-exercise-2",
    "href": "posts/12_hypothesis_testing/12_hypothesis_testing.html#group-exercise-2",
    "title": "12: Hypothesis Testing",
    "section": "Group Exercise 2",
    "text": "Group Exercise 2\nCome up with another hypothesis test and describe it here\n\nexplanatory variable (x, categorical):\nresponse variable (y, numerical):\nnull hypothesis:\nalternative hypothesis:\n\nUse the table function on the categorical variable to tally its contents.\nMake a side-by-side boxplot visualization to get a sense of two quantities.\nUse the infer package to create null distribution from the null hypothesis.\nUse the visualize function to view the null distribution along with a shaded overlay to display the p-value.\nDescribe the results of your hypothesis test in a complete sentence."
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#collaboration-in-person",
    "href": "posts/01_syllabus/01_introductions.html#collaboration-in-person",
    "title": "1: Introduction",
    "section": "Collaboration (in-person)",
    "text": "Collaboration (in-person)\n\n25 percent of semester grade\nThis is where the data science learning takes place\nstudents will be present and active in class\nsports groups will work on assigned data-driven tasks"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#delivery-in-person",
    "href": "posts/01_syllabus/01_introductions.html#delivery-in-person",
    "title": "1: Introduction",
    "section": "Delivery (in-person)",
    "text": "Delivery (in-person)\n\n25 percent of semester grade\nsports groups will turn in deliverables\nsports groups will present their findings and progress weekly"
  }
]