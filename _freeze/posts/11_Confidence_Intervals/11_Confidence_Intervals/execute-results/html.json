{
  "hash": "7c4e463bf5451513e32bbff4737895f3",
  "result": {
    "markdown": "---\ntitle: \"11: Confidence Intervals\"\nauthor: \"Derek Sollberger\"\ndate: \"2023-11-28\"\nformat: \n  html:\n    toc: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"infer\")\nlibrary(\"moderndive\")\nlibrary(\"patchwork\") #easy graph layouts\nlibrary(\"tidyverse\")\n```\n:::\n\n\nSource:  **Statistical Inference via Data Science:** *A Modern Dive into R and the Tidyverse*\n\n* Chapter 8: Bootstrapping and Confidence Intervals\n* [https://moderndive.com/8-confidence-intervals.html](https://moderndive.com/8-confidence-intervals.html)\n\n# Load the Data\n\nSince we have CSV files (comma-separated values), the `read_csv()` command in the  `readr` package will be convenient here.  I tend to save data set into a variable `df` (stands for \"data frame\").\n\nToday's data set comes from the `Lahman` package, which contains a lot of historical data about Major League Baseball.  For interest, this is a subset of the data from the 2004 to 2022 seasons.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- readr::read_csv(\"baseball_2004_2022.csv\") |>\n  janitor::clean_names()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 570 Columns: 48\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (13): lgID, teamID, franchID, divID, DivWin, WCWin, LgWin, WSWin, name, ...\ndbl (35): yearID, Rank, G, Ghome, W, L, R, AB, H, X2B, X3B, HR, BB, SO, SB, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n## Look at the Data\n\nOne way to get a quick look at the data set is with the `head()` command (outputs the first few rows and columns).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 48\n  year_id lg_id team_id franch_id div_id  rank     g ghome     w     l div_win\n    <dbl> <chr> <chr>   <chr>     <chr>  <dbl> <dbl> <dbl> <dbl> <dbl> <chr>  \n1    2004 AL    ANA     ANA       W          1   162    81    92    70 Y      \n2    2004 NL    ARI     ARI       W          5   162    81    51   111 N      \n3    2004 NL    ATL     ATL       E          1   162    81    96    66 Y      \n4    2004 AL    BAL     BAL       E          3   162    81    78    84 N      \n5    2004 AL    BOS     BOS       E          2   162    81    98    64 N      \n6    2004 AL    CHA     CHW       C          2   162    81    83    79 N      \n# ℹ 37 more variables: wc_win <chr>, lg_win <chr>, ws_win <chr>, r <dbl>,\n#   ab <dbl>, h <dbl>, x2b <dbl>, x3b <dbl>, hr <dbl>, bb <dbl>, so <dbl>,\n#   sb <dbl>, cs <dbl>, hbp <dbl>, sf <dbl>, ra <dbl>, er <dbl>, era <dbl>,\n#   cg <dbl>, sho <dbl>, sv <dbl>, i_pouts <dbl>, ha <dbl>, hra <dbl>,\n#   bba <dbl>, soa <dbl>, e <dbl>, dp <dbl>, fp <dbl>, name <chr>, park <chr>,\n#   attendance <dbl>, bpf <dbl>, ppf <dbl>, team_idbr <chr>,\n#   team_i_dlahman45 <chr>, team_i_dretro <chr>\n```\n:::\n:::\n\n\nWe can also look at the *structure* of a data frame with the `str()` command.  In particular, this view allows us to quickly see which variables are *numerical* and which are *categorical*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(df, give.attr = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nspc_tbl_ [570 × 48] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ year_id         : num [1:570] 2004 2004 2004 2004 2004 ...\n $ lg_id           : chr [1:570] \"AL\" \"NL\" \"NL\" \"AL\" ...\n $ team_id         : chr [1:570] \"ANA\" \"ARI\" \"ATL\" \"BAL\" ...\n $ franch_id       : chr [1:570] \"ANA\" \"ARI\" \"ATL\" \"BAL\" ...\n $ div_id          : chr [1:570] \"W\" \"W\" \"E\" \"E\" ...\n $ rank            : num [1:570] 1 5 1 3 2 2 3 4 3 4 ...\n $ g               : num [1:570] 162 162 162 162 162 162 162 162 162 162 ...\n $ ghome           : num [1:570] 81 81 81 81 81 81 82 81 81 81 ...\n $ w               : num [1:570] 92 51 96 78 98 83 89 76 80 68 ...\n $ l               : num [1:570] 70 111 66 84 64 79 73 86 82 94 ...\n $ div_win         : chr [1:570] \"Y\" \"N\" \"Y\" \"N\" ...\n $ wc_win          : chr [1:570] \"N\" \"N\" \"N\" \"N\" ...\n $ lg_win          : chr [1:570] \"N\" \"N\" \"N\" \"N\" ...\n $ ws_win          : chr [1:570] \"N\" \"N\" \"N\" \"N\" ...\n $ r               : num [1:570] 836 615 803 842 949 865 789 750 858 833 ...\n $ ab              : num [1:570] 5675 5544 5570 5736 5720 ...\n $ h               : num [1:570] 1603 1401 1503 1614 1613 ...\n $ x2b             : num [1:570] 272 295 304 319 373 284 308 287 345 331 ...\n $ x3b             : num [1:570] 37 38 37 18 25 19 29 28 29 34 ...\n $ hr              : num [1:570] 162 135 178 169 222 242 235 194 184 202 ...\n $ bb              : num [1:570] 450 441 587 528 659 499 489 599 606 568 ...\n $ so              : num [1:570] 942 1022 1158 949 1189 ...\n $ sb              : num [1:570] 143 53 86 101 68 78 66 77 94 44 ...\n $ cs              : num [1:570] 46 32 32 41 30 51 28 25 55 33 ...\n $ hbp             : num [1:570] 73 35 59 57 69 63 38 81 78 54 ...\n $ sf              : num [1:570] 41 37 48 62 55 42 48 25 42 37 ...\n $ ra              : num [1:570] 734 899 668 830 768 831 665 907 857 923 ...\n $ er              : num [1:570] 692 794 603 760 674 782 621 832 784 883 ...\n $ era             : num [1:570] 4.28 4.98 3.74 4.7 4.18 4.91 3.81 5.19 4.81 5.54 ...\n $ cg              : num [1:570] 2 5 4 8 4 8 3 5 8 3 ...\n $ sho             : num [1:570] 11 6 13 10 12 8 6 8 8 2 ...\n $ sv              : num [1:570] 50 33 48 27 36 34 42 47 32 36 ...\n $ i_pouts         : num [1:570] 4363 4308 4350 4366 4354 ...\n $ ha              : num [1:570] 1476 1480 1475 1488 1430 ...\n $ hra             : num [1:570] 170 197 154 159 159 224 169 236 201 198 ...\n $ bba             : num [1:570] 502 668 523 687 447 527 545 572 579 697 ...\n $ soa             : num [1:570] 1164 1153 1025 1090 1132 ...\n $ e               : num [1:570] 90 139 116 110 118 100 86 113 106 89 ...\n $ dp              : num [1:570] 126 144 171 161 129 167 126 123 152 161 ...\n $ fp              : num [1:570] 0.985 0.977 0.981 0.982 0.981 0.984 0.986 0.981 0.983 0.986 ...\n $ name            : chr [1:570] \"Anaheim Angels\" \"Arizona Diamondbacks\" \"Atlanta Braves\" \"Baltimore Orioles\" ...\n $ park            : chr [1:570] \"Angels Stadium of Anaheim\" \"Bank One Ballpark\" \"Turner Field\" \"Oriole Park at Camden Yards\" ...\n $ attendance      : num [1:570] 3375677 2519560 2327565 2744018 2837294 ...\n $ bpf             : num [1:570] 97 105 101 98 106 102 103 98 94 113 ...\n $ ppf             : num [1:570] 97 107 100 99 105 102 102 99 94 114 ...\n $ team_idbr       : chr [1:570] \"ANA\" \"ARI\" \"ATL\" \"BAL\" ...\n $ team_i_dlahman45: chr [1:570] \"ANA\" \"ARI\" \"ATL\" \"BAL\" ...\n $ team_i_dretro   : chr [1:570] \"ANA\" \"ARI\" \"ATL\" \"BAL\" ...\n```\n:::\n:::\n\n\nAnother convenient tool for our programming purposes is looking at the *column names* (i.e. variable names that we need to type later)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"year_id\"          \"lg_id\"            \"team_id\"          \"franch_id\"       \n [5] \"div_id\"           \"rank\"             \"g\"                \"ghome\"           \n [9] \"w\"                \"l\"                \"div_win\"          \"wc_win\"          \n[13] \"lg_win\"           \"ws_win\"           \"r\"                \"ab\"              \n[17] \"h\"                \"x2b\"              \"x3b\"              \"hr\"              \n[21] \"bb\"               \"so\"               \"sb\"               \"cs\"              \n[25] \"hbp\"              \"sf\"               \"ra\"               \"er\"              \n[29] \"era\"              \"cg\"               \"sho\"              \"sv\"              \n[33] \"i_pouts\"          \"ha\"               \"hra\"              \"bba\"             \n[37] \"soa\"              \"e\"                \"dp\"               \"fp\"              \n[41] \"name\"             \"park\"             \"attendance\"       \"bpf\"             \n[45] \"ppf\"              \"team_idbr\"        \"team_i_dlahman45\" \"team_i_dretro\"   \n```\n:::\n:::\n\n\n## One Sample\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHR_sample <- df |> select(hr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- HR_sample |>\n  ggplot(aes(x = hr)) +\n  geom_histogram(binwidth = 5, color = \"black\", fill = \"blue\") +\n  labs(title = \"Distribution of Home Runs\",\n       subtitle = \"Based on a sample of data\",\n       caption = \"Spark 01\") +\n  theme_minimal()\n\n# print\np1\n```\n\n::: {.cell-output-display}\n![](11_confidence_intervals_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## Resampling\n\nUsing the available sample of data to fabricate another sample is called *resampling*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHR_resampled <- HR_sample |>\n  sample_n(replace = TRUE, size = nrow(HR_sample))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np2 <- HR_resampled |>\n  ggplot(aes(x = hr)) +\n  geom_histogram(binwidth = 5, color = \"black\", fill = \"blue\") +\n  labs(title = \"Distribution of Home Runs\",\n       subtitle = \"Based on a sample of data\",\n       caption = \"Spark 01\") +\n  theme_minimal()\n\n# print\np2\n```\n\n::: {.cell-output-display}\n![](11_confidence_intervals_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# patchwork\np1 + p2\n```\n\n::: {.cell-output-display}\n![](11_confidence_intervals_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## Resampling Many Times\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(HR_sample)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       hr       \n Min.   : 51.0  \n 1st Qu.:141.2  \n Median :168.0  \n Mean   :168.6  \n 3rd Qu.:198.0  \n Max.   :307.0  \n```\n:::\n:::\n\n\n\nSuppose now that we have each person in a 23-student classroom repeat the act of drawing that home run data with replacement.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHR_resampled_many <- HR_sample |>\n  rep_sample_n(replace = TRUE, reps = 23, size = nrow(HR_sample))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nHR_resampled_many %>%\n  group_by(replicate) %>%\n  mutate(mean_HR = mean(hr)) %>%\n  ungroup() %>%\n  select(replicate, mean_HR) %>%\n  distinct() %>%\n  ggplot(aes(x = mean_HR)) +\n  geom_histogram(binwidth = 1, color = \"black\", fill = \"blue\") +\n  labs(title = \"Resampling Results\",\n       subtitle = \"N = 23 resamples\",\n       caption = \"Source: Modern Dive\")\n```\n\n::: {.cell-output-display}\n![](11_confidence_intervals_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nOut of curiosity, let us push this process to $N = 1337$ resamples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHR_resampled_many <- HR_sample |>\n  rep_sample_n(replace = TRUE, reps = 1337, size = nrow(HR_sample))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nHR_resampled_many %>%\n  group_by(replicate) %>%\n  mutate(mean_HR = mean(hr)) %>%\n  ungroup() %>%\n  select(replicate, mean_HR) %>%\n  distinct() %>%\n  ggplot(aes(x = mean_HR)) +\n  geom_histogram(binwidth = 1, color = \"black\", fill = \"blue\") +\n  labs(title = \"Resampling Results\",\n       subtitle = \"N = 23 resamples\",\n       caption = \"Source: Modern Dive\")\n```\n\n::: {.cell-output-display}\n![](11_confidence_intervals_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n# Example\n\nThe `infer` package streamlines the process of resampling (with replacement) to build a **bootstrap distribution**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbootstrap_distribution <- df |>\n  specify(response = hr) |> #use a numerical variable\n  generate(reps = 1337, type = \"bootstrap\") |>\n  calculate(stat = \"mean\")\n```\n:::\n\n\nThe folks who made the `infer` package provide a `visualize` helper function to quickly view the bootstrap distribution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisualize(bootstrap_distribution)\n```\n\n::: {.cell-output-display}\n![](11_confidence_intervals_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nWe can get the values of the endpoints of the confidence interval with the `get_ci` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nci_endpoints <- bootstrap_distribution |> get_ci(level = 0.95, type = \"percentile\")\n\n# print\nci_endpoints\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  lower_ci upper_ci\n     <dbl>    <dbl>\n1     165.     172.\n```\n:::\n:::\n\n\nWe can also visualize the confidence interval on top of the bootstrap distribution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisualize(bootstrap_distribution) +\n  shade_ci(ci_endpoints, color = \"#DAA900\", fill = \"#002856\") +\n  labs(title = \"Bootstrap Distribution of Home Runs\",\n       subtitle = \"95% confidence interval shaded\",\n       caption = \"Spark 10\")\n```\n\n::: {.cell-output-display}\n![](11_confidence_intervals_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nWe are 95 percent confident that the true average number of home runs hit by a team in a season is in between _____ and ____ home runs.\n\n# Exercises\n\n## Explore the Data\n\nLoad your data set (for your sport) using the `read_csv` command and save the data frame as `df`.\n\n\n::: {.cell}\n\n:::\n\n\nUse the `head`, `str`, and `colnames` commands to look at your data set.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\nToday, you are asked to build two confidence intervals, display visualizations, and describe the confidence intervals.\n\n## Group Exercise 1\n\nChoose a numerical variable and build a bootstrap distribution from its resampling\n\n\n::: {.cell}\n\n:::\n\n\nCompute the endpoints of the confidence interval using the `get_ci` function.\n\n\n::: {.cell}\n\n:::\n\n\n\nUse the `visualize` function to view the bootstrap distribution along with a shaded overlay to display the confidence interval.\n\n\n::: {.cell}\n\n:::\n\n\nDescribe your confidence interval in a complete sentence.\n\n\n\n## Group Exercise 2\n\nChoose another numerical variable and build a bootstrap distribution from its resampling\n\n\n::: {.cell}\n\n:::\n\n\nCompute the endpoints of the confidence interval using the `get_ci` function.\n\n\n::: {.cell}\n\n:::\n\n\n\nUse the `visualize` function to view the bootstrap distribution along with a shaded overlay to display the confidence interval.\n\n\n::: {.cell}\n\n:::\n\n\nDescribe your confidence interval in a complete sentence.\n\n\n# Wrap Up\n\n* Click `Render` to create the HTML file\n* Check the checkbox next to the HTML file (in the Files pane)\n* Click the gear (\"More\"), and then click \"Export\"\n* Upload the HTML file back into our CatCourses space",
    "supporting": [
      "11_confidence_intervals_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}