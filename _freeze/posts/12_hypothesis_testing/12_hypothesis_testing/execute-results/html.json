{
  "hash": "fda9e3757951d910080e164fecb41b06",
  "result": {
    "markdown": "---\ntitle: \"12: Hypothesis Testing\"\nauthor: \"Derek Sollberger\"\ndate: \"2023-10-05\"\nformat: \n  html:\n    toc: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"infer\")\nlibrary(\"moderndive\")\nlibrary(\"patchwork\") #easy graph layouts\nlibrary(\"tidyverse\")\n```\n:::\n\n\nSource:  **Statistical Inference via Data Science:** *A Modern Dive into R and the Tidyverse*\n\n* Chapter 9: Hypothesis Testing\n* [https://moderndive.com/9-hypothesis-testing.html](https://moderndive.com/9-hypothesis-testing.html)\n\n# Load the Data\n\nSince we have CSV files (comma-separated values), the `read_csv()` command in the  `readr` package will be convenient here.  I tend to save data set into a variable `df` (stands for \"data frame\").\n\nToday's data set comes from the `Lahman` package, which contains a lot of historical data about Major League Baseball.  For interest, this is a subset of the data from the 2010 to 2019 seasons.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# library(\"Lahman\")\n# df <- Teams |>\n#   filter(yearID >= 2010) |>\n#   filter(yearID < 2020)\n# \n# readr::write_csv(df, \"baseball_2010_2019.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- readr::read_csv(\"baseball_2010_2019.csv\") |>\n  janitor::clean_names()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 300 Columns: 48\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (13): lgID, teamID, franchID, divID, DivWin, WCWin, LgWin, WSWin, name, ...\ndbl (35): yearID, Rank, G, Ghome, W, L, R, AB, H, X2B, X3B, HR, BB, SO, SB, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n## Look at the Data\n\nOne way to get a quick look at the data set is with the `head()` command (outputs the first few rows and columns).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 48\n  year_id lg_id team_id franch_id div_id  rank     g ghome     w     l div_win\n    <dbl> <chr> <chr>   <chr>     <chr>  <dbl> <dbl> <dbl> <dbl> <dbl> <chr>  \n1    2010 NL    ARI     ARI       W          5   162    81    65    97 N      \n2    2010 NL    ATL     ATL       E          2   162    81    91    71 N      \n3    2010 AL    BAL     BAL       E          5   162    81    66    96 N      \n4    2010 AL    BOS     BOS       E          3   162    81    89    73 N      \n5    2010 AL    CHA     CHW       C          2   162    81    88    74 N      \n6    2010 NL    CHN     CHC       C          5   162    81    75    87 N      \n# ℹ 37 more variables: wc_win <chr>, lg_win <chr>, ws_win <chr>, r <dbl>,\n#   ab <dbl>, h <dbl>, x2b <dbl>, x3b <dbl>, hr <dbl>, bb <dbl>, so <dbl>,\n#   sb <dbl>, cs <dbl>, hbp <dbl>, sf <dbl>, ra <dbl>, er <dbl>, era <dbl>,\n#   cg <dbl>, sho <dbl>, sv <dbl>, i_pouts <dbl>, ha <dbl>, hra <dbl>,\n#   bba <dbl>, soa <dbl>, e <dbl>, dp <dbl>, fp <dbl>, name <chr>, park <chr>,\n#   attendance <dbl>, bpf <dbl>, ppf <dbl>, team_idbr <chr>,\n#   team_i_dlahman45 <chr>, team_i_dretro <chr>\n```\n:::\n:::\n\n\nWe can also look at the *structure* of a data frame with the `str()` command.  In particular, this view allows us to quickly see which variables are *numerical* and which are *categorical*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(df, give.attr = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nspc_tbl_ [300 × 48] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ year_id         : num [1:300] 2010 2010 2010 2010 2010 2010 2010 2010 2010 2010 ...\n $ lg_id           : chr [1:300] \"NL\" \"NL\" \"AL\" \"AL\" ...\n $ team_id         : chr [1:300] \"ARI\" \"ATL\" \"BAL\" \"BOS\" ...\n $ franch_id       : chr [1:300] \"ARI\" \"ATL\" \"BAL\" \"BOS\" ...\n $ div_id          : chr [1:300] \"W\" \"E\" \"E\" \"E\" ...\n $ rank            : num [1:300] 5 2 5 3 2 5 1 4 3 3 ...\n $ g               : num [1:300] 162 162 162 162 162 162 162 162 162 162 ...\n $ ghome           : num [1:300] 81 81 81 81 81 81 81 81 81 81 ...\n $ w               : num [1:300] 65 91 66 89 88 75 91 69 83 81 ...\n $ l               : num [1:300] 97 71 96 73 74 87 71 93 79 81 ...\n $ div_win         : chr [1:300] \"N\" \"N\" \"N\" \"N\" ...\n $ wc_win          : chr [1:300] \"N\" \"Y\" \"N\" \"N\" ...\n $ lg_win          : chr [1:300] \"N\" \"N\" \"N\" \"N\" ...\n $ ws_win          : chr [1:300] \"N\" \"N\" \"N\" \"N\" ...\n $ r               : num [1:300] 713 738 613 818 752 685 790 646 770 751 ...\n $ ab              : num [1:300] 5473 5463 5554 5646 5484 ...\n $ h               : num [1:300] 1366 1411 1440 1511 1467 ...\n $ x2b             : num [1:300] 301 312 264 358 263 298 293 290 270 308 ...\n $ x3b             : num [1:300] 34 25 21 22 21 27 30 20 54 32 ...\n $ hr              : num [1:300] 180 139 133 211 177 149 188 128 173 152 ...\n $ bb              : num [1:300] 589 634 424 587 467 479 522 545 585 546 ...\n $ so              : num [1:300] 1529 1140 1056 1140 922 ...\n $ sb              : num [1:300] 86 63 76 68 160 55 93 91 99 69 ...\n $ cs              : num [1:300] 41 29 34 17 74 31 43 33 42 30 ...\n $ hbp             : num [1:300] 39 51 54 47 79 50 68 64 47 41 ...\n $ sf              : num [1:300] 41 35 45 46 38 38 50 33 47 41 ...\n $ ra              : num [1:300] 836 629 785 744 704 767 685 752 717 743 ...\n $ er              : num [1:300] 765 569 733 679 658 668 648 684 663 690 ...\n $ era             : num [1:300] 4.81 3.56 4.59 4.2 4.09 4.18 4.01 4.3 4.14 4.3 ...\n $ cg              : num [1:300] 3 2 3 3 6 1 4 10 6 6 ...\n $ sho             : num [1:300] 3 9 7 9 11 14 9 4 12 5 ...\n $ sv              : num [1:300] 35 41 35 44 43 40 43 34 35 32 ...\n $ i_pouts         : num [1:300] 4296 4318 4309 4370 4339 ...\n $ ha              : num [1:300] 1503 1326 1508 1402 1471 ...\n $ hra             : num [1:300] 210 126 186 152 136 154 158 147 139 142 ...\n $ bba             : num [1:300] 548 505 520 580 490 605 524 572 525 537 ...\n $ soa             : num [1:300] 1070 1241 1007 1207 1149 ...\n $ e               : num [1:300] 102 126 105 111 103 126 72 110 101 109 ...\n $ dp              : num [1:300] 152 166 141 132 158 137 142 179 182 171 ...\n $ fp              : num [1:300] 0.983 0.98 0.982 0.982 0.983 0.979 0.988 0.982 0.984 0.982 ...\n $ name            : chr [1:300] \"Arizona Diamondbacks\" \"Atlanta Braves\" \"Baltimore Orioles\" \"Boston Red Sox\" ...\n $ park            : chr [1:300] \"Chase Field\" \"Turner Field\" \"Oriole Park at Camden Yards\" \"Fenway Park II\" ...\n $ attendance      : num [1:300] 2056941 2510119 1733018 3046443 2194378 ...\n $ bpf             : num [1:300] 104 98 101 106 105 108 99 93 115 101 ...\n $ ppf             : num [1:300] 105 97 102 105 105 108 99 93 115 101 ...\n $ team_idbr       : chr [1:300] \"ARI\" \"ATL\" \"BAL\" \"BOS\" ...\n $ team_i_dlahman45: chr [1:300] \"ARI\" \"ATL\" \"BAL\" \"BOS\" ...\n $ team_i_dretro   : chr [1:300] \"ARI\" \"ATL\" \"BAL\" \"BOS\" ...\n```\n:::\n:::\n\n\nAnother convenient tool for our programming purposes is looking at the *column names* (i.e. variable names that we need to type later)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"year_id\"          \"lg_id\"            \"team_id\"          \"franch_id\"       \n [5] \"div_id\"           \"rank\"             \"g\"                \"ghome\"           \n [9] \"w\"                \"l\"                \"div_win\"          \"wc_win\"          \n[13] \"lg_win\"           \"ws_win\"           \"r\"                \"ab\"              \n[17] \"h\"                \"x2b\"              \"x3b\"              \"hr\"              \n[21] \"bb\"               \"so\"               \"sb\"               \"cs\"              \n[25] \"hbp\"              \"sf\"               \"ra\"               \"er\"              \n[29] \"era\"              \"cg\"               \"sho\"              \"sv\"              \n[33] \"i_pouts\"          \"ha\"               \"hra\"              \"bba\"             \n[37] \"soa\"              \"e\"                \"dp\"               \"fp\"              \n[41] \"name\"             \"park\"             \"attendance\"       \"bpf\"             \n[45] \"ppf\"              \"team_idbr\"        \"team_i_dlahman45\" \"team_i_dretro\"   \n```\n:::\n:::\n\n\n\n\n# Example\n\n## Example 1\n\n* explanatory variable (x, categorical): `lg_id`\n* response variable (y, numerical): `sb`\n\n* null hypothesis: Both the National and American Leagues had the same average number of stolen bases.\n* alternative hypothesis: The National and American Leagues had a different average number of stolen bases.\n\nWe can use the `table` command to get a quick list of the labels within a categorical variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# tally\ntable(df$lg_id)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n AL  NL \n147 153 \n```\n:::\n:::\n\n\nWe should use a side-by-side boxplot visualization to get a sense of two quantities.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# boxplot\ndf %>%\n  filter(lg_id == \"NL\" | lg_id == \"AL\") %>% #use only two labels\n  ggplot(aes(x = lg_id, y = sb)) + #x-axis: categorical, y-axis: numerical\n  geom_boxplot(aes(fill = lg_id)) + \n  labs(title = \"Stolen Bases by League\",\n       subtitle = \"2010 to 2019\",\n       caption = \"Spark 10\",\n       x = \"league\",\n       y = \"stolen bases\")\n```\n\n::: {.cell-output-display}\n![](12_hypothesis_testing_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nNext, we compute the observed difference in means.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# compute observed difference in means\nobs_diff_means <- df %>%\n  filter(lg_id == \"NL\" | lg_id == \"AL\") %>% #use only two labels\n  specify(formula = sb ~ lg_id) %>% #response_var ~ explanatory_var\n  calculate(stat = \"diff in means\", order = c(\"AL\", \"NL\"))\n\n# print\nobs_diff_means\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nResponse: sb (numeric)\nExplanatory: lg_id (factor)\n# A tibble: 1 × 1\n   stat\n  <dbl>\n1  1.19\n```\n:::\n:::\n\n\nNow, we use the `infer` package to create *null distribution* from the null hypothesis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# build a null distribution\nnull_distribution <- df %>%\n  filter(lg_id == \"NL\" | lg_id == \"AL\") %>%\n  specify(formula = sb ~ lg_id) %>%\n  hypothesize(null = \"independence\") %>%\n  generate(reps = 123, type = \"permute\") %>%\n  calculate(stat = \"diff in means\", order = c(\"AL\", \"NL\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# visualize the p-value\nvisualize(null_distribution, bins = 10) + \n  shade_p_value(obs_stat = obs_diff_means, direction = \"two_sided\")\n```\n\n::: {.cell-output-display}\n![](12_hypothesis_testing_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# get p-value\nnull_distribution %>%\n  get_p_value(obs_stat = obs_diff_means, direction = \"two_sided\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  p_value\n    <dbl>\n1   0.732\n```\n:::\n:::\n\n\nSince the p-value is greater than 0.05, we *fail to reject* the claim that the two leagues had the same average number of stolen bases.\n\n\n## Example 2\n\n* explanatory variable (x, categorical): `franch_id`\n* response variable (y, numerical): `w`\n\n* null hypothesis: Both the Giants and the Padres had the same average number of wins.\n* alternative hypothesis: The Giants and the Padres had a different average number of wins.\n\nWe can use the `table` command to get a quick list of the labels within a categorical variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# tally\ntable(df$franch_id)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nANA ARI ATL BAL BOS CHC CHW CIN CLE COL DET FLA HOU KCR LAD MIL MIN NYM NYY OAK \n 10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10 \nPHI PIT SDP SEA SFG STL TBD TEX TOR WSN \n 10  10  10  10  10  10  10  10  10  10 \n```\n:::\n:::\n\n\nWe should use a side-by-side boxplot visualization to get a sense of two quantities.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# boxplot\ndf %>%\n  filter(franch_id == \"COL\" | franch_id == \"STL\") %>% #use only two labels\n  ggplot(aes(x = franch_id, y = w)) + #x-axis: categorical, y-axis: numerical\n  geom_boxplot(aes(color = franch_id, fill = franch_id)) + \n  labs(title = \"Wins by Team\",\n       subtitle = \"2010 to 2019\",\n       caption = \"Spark 10\",\n       x = \"team\",\n       y = \"wins\") +\n  scale_color_manual(values = c(\"#C4CED4\", \"#0C2340\")) +\n  scale_fill_manual(values = c(\"#333366\", \"#C41E3A\")) +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](12_hypothesis_testing_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nNext, we compute the observed difference in means.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# compute observed difference in means\nobs_diff_means <- df %>%\n  filter(franch_id == \"COL\" | franch_id == \"STL\") %>% #use only two labels\n  specify(formula = w ~ franch_id) %>% #response_var ~ explanatory_var\n  calculate(stat = \"diff in means\", order = c(\"COL\", \"STL\"))\n\n# print\nobs_diff_means\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nResponse: w (numeric)\nExplanatory: franch_id (factor)\n# A tibble: 1 × 1\n   stat\n  <dbl>\n1 -14.7\n```\n:::\n:::\n\n\nNow, we use the `infer` package to create *null distribution* from the null hypothesis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# build a null distribution\nnull_distribution <- df %>%\n  filter(franch_id == \"COL\" | franch_id == \"STL\") %>% #use only two labels\n  specify(formula = w ~ franch_id) %>% #response_var ~ explanatory_var\n  hypothesize(null = \"independence\") %>%\n  generate(reps = 123, type = \"permute\") %>%\n  calculate(stat = \"diff in means\", order = c(\"COL\", \"STL\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# visualize the p-value\nvisualize(null_distribution, bins = 10) + \n  shade_p_value(obs_stat = obs_diff_means, direction = \"two_sided\")\n```\n\n::: {.cell-output-display}\n![](12_hypothesis_testing_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# get p-value\nnull_distribution %>%\n  get_p_value(obs_stat = obs_diff_means, direction = \"two_sided\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Please be cautious in reporting a p-value of 0. This result is an\napproximation based on the number of `reps` chosen in the `generate()` step.\nSee `?get_p_value()` for more information.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  p_value\n    <dbl>\n1       0\n```\n:::\n:::\n\n\nSince the p-value is less than 0.05, we *reject* the claim that the two teams had the same average number of wins.\n\n\n# Exercises\n\n## Explore the Data\n\nLoad your data set (for your sport) using the `read_csv` command and save the data frame as `df`.\n\n\n::: {.cell}\n\n:::\n\n\nUse the `head`, `str`, and `colnames` commands to look at your data set.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\nToday, you are asked to carry out two hypothesis tests, display visualizations, and describe the results.\n\n## Group Exercise 1\n\nCome up with a hypothesis test and describe it here\n\n* explanatory variable (x, categorical): \n* response variable (y, numerical): \n* null hypothesis: \n* alternative hypothesis: \n\nUse the `table` function on the categorical variable to tally its contents.\n\n\n::: {.cell}\n\n:::\n\n\nMake a side-by-side boxplot visualization to get a sense of two quantities.\n\n\n::: {.cell}\n\n:::\n\n\nUse the infer package to create null distribution from the null hypothesis.\n\n\n::: {.cell}\n\n:::\n\n\nUse the `visualize` function to view the null distribution along with a shaded overlay to display the p-value.\n\n\n::: {.cell}\n\n:::\n\n\nDescribe the results of your hypothesis test in a complete sentence.\n\n\n\n## Group Exercise 2\n\nCome up with another hypothesis test and describe it here\n\n* explanatory variable (x, categorical): \n* response variable (y, numerical): \n* null hypothesis: \n* alternative hypothesis: \n\nUse the `table` function on the categorical variable to tally its contents.\n\n\n::: {.cell}\n\n:::\n\n\nMake a side-by-side boxplot visualization to get a sense of two quantities.\n\n\n::: {.cell}\n\n:::\n\n\nUse the infer package to create null distribution from the null hypothesis.\n\n\n::: {.cell}\n\n:::\n\n\nUse the `visualize` function to view the null distribution along with a shaded overlay to display the p-value.\n\n\n::: {.cell}\n\n:::\n\n\nDescribe the results of your hypothesis test in a complete sentence.\n\n\n\n# Wrap Up\n\n* Click `Render` to create the HTML file\n* Check the checkbox next to the HTML file (in the Files pane)\n* Click the gear (\"More\"), and then click \"Export\"\n* Upload the HTML file back into our CatCourses space",
    "supporting": [
      "12_hypothesis_testing_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}