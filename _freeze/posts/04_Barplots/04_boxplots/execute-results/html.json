{
  "hash": "685dcc397f57c5b111424db470906636",
  "result": {
    "markdown": "---\ntitle: \"4: Barplots\"\nauthor: \"Derek Sollberger\"\nformat: \n  html:\n    toc: true\n---\n\n\n# The Story of Glenn Burke\n\nGlenn Burke was an outfielder with the 1977 World Series champion Dodgers.  He was born in Oakland in 1952.\n\n![Image credit: Washington Post](GlennBurkeBatting.png)\n\n\n## Load the Tidyverse\n\nThe `tidyverse` suite of packages are streamlined to make data science processes easier.  We can load the packages with the `library()` command.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# library(\"Lahman\") #baseball data set\nlibrary(\"readxl\")\nlibrary(\"tidyverse\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.1\n✔ readr   2.1.2     ✔ forcats 0.5.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\n# subset of the Batting data in the Lahman database\n# df_Burke <- Batting |>\n  \n  # focus on Glenn Burke\n  # abbreviation found via playerInfo() helper function\n  # filter(playerID == \"burkegl01\")\n\n# df_1977 <- Batting |>\n  # filter(yearID == 1977) |>\n  # filter(H > 0) #to ease later histogram (remove players who had zero hits)\n\n# readr::write_csv(df_Burke, \"data_Burke.csv\")\n# readr::write_csv(df_1977, \"data_1977.csv\")\n```\n:::\n\n\nToday's data set comes from the [`Lahman` package](https://github.com/cdalzell/Lahman), which contains a lot of historical data about Major League Baseball.\n\n# CSV Files\n\nWhen we have a CSV file (comma-separated values), the `read_csv()` command in the  `readr` package will be convenient here.  I tend to save data set into a variable `df` (stands for \"data frame\").\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_1977 <- readr::read_csv(\"data_1977.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 658 Columns: 22\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): playerID, teamID, lgID\ndbl (19): yearID, stint, G, AB, R, H, X2B, X3B, HR, RBI, SB, CS, BB, SO, IBB...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n## Look at the Data\n\nOne way to get a quick look at the data set is with the `head()` command (outputs the first few rows and columns).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df_1977)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 22\n  playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n  <chr>      <dbl> <dbl> <chr>  <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 adamsbo04   1977     1 DET    AL       15    24     2     6     1     0     2\n2 adamsgl01   1977     1 MIN    AL       95   269    32    91    17     0     6\n3 aikenwi01   1977     1 CAL    AL       42    91     5    18     4     0     0\n4 alcalsa01   1977     2 MON    NL       31    25     1     2     0     0     1\n5 alexaga01   1977     1 SFN    NL       51   119    17    36     4     2     5\n6 alexama01   1977     1 OAK    AL       90    42    24    10     1     0     0\n# … with 10 more variables: RBI <dbl>, SB <dbl>, CS <dbl>, BB <dbl>, SO <dbl>,\n#   IBB <dbl>, HBP <dbl>, SH <dbl>, SF <dbl>, GIDP <dbl>\n```\n:::\n:::\n\n\nWe can also look at the *structure* of a data frame with the `str()` command.  In particular, this view allows us to quickly see which variables are *numerical* and which are *categorical*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(df_1977, give.attr = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nspec_tbl_df [658 × 22] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ playerID: chr [1:658] \"adamsbo04\" \"adamsgl01\" \"aikenwi01\" \"alcalsa01\" ...\n $ yearID  : num [1:658] 1977 1977 1977 1977 1977 ...\n $ stint   : num [1:658] 1 1 1 2 1 1 1 1 1 1 ...\n $ teamID  : chr [1:658] \"DET\" \"MIN\" \"CAL\" \"MON\" ...\n $ lgID    : chr [1:658] \"AL\" \"AL\" \"AL\" \"NL\" ...\n $ G       : num [1:658] 15 95 42 31 51 90 54 155 69 22 ...\n $ AB      : num [1:658] 24 269 91 25 119 42 171 613 83 40 ...\n $ R       : num [1:658] 2 32 5 1 17 24 19 75 21 10 ...\n $ H       : num [1:658] 6 91 18 2 36 10 41 160 22 13 ...\n $ X2B     : num [1:658] 1 17 4 0 4 1 4 18 3 4 ...\n $ X3B     : num [1:658] 0 0 0 0 2 0 0 11 0 0 ...\n $ HR      : num [1:658] 2 6 0 1 5 0 5 2 1 1 ...\n $ RBI     : num [1:658] 2 49 6 2 20 2 31 43 11 4 ...\n $ SB      : num [1:658] 0 0 1 0 3 26 1 20 4 3 ...\n $ CS      : num [1:658] 0 2 2 0 1 14 3 9 3 3 ...\n $ BB      : num [1:658] 0 18 10 0 20 4 24 37 8 3 ...\n $ SO      : num [1:658] 5 30 23 13 33 6 36 114 13 4 ...\n $ IBB     : num [1:658] 0 3 2 0 2 0 0 1 0 0 ...\n $ HBP     : num [1:658] 0 0 0 0 2 0 1 0 1 0 ...\n $ SH      : num [1:658] 0 0 0 2 0 1 0 20 4 1 ...\n $ SF      : num [1:658] 0 3 0 0 2 0 4 0 1 1 ...\n $ GIDP    : num [1:658] 0 5 1 0 5 0 4 14 0 2 ...\n```\n:::\n:::\n\n\nAnother convenient tool for our programming purposes is looking at the *column names* (i.e. variable names that we need to type later)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df_1977)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"playerID\" \"yearID\"   \"stint\"    \"teamID\"   \"lgID\"     \"G\"       \n [7] \"AB\"       \"R\"        \"H\"        \"X2B\"      \"X3B\"      \"HR\"      \n[13] \"RBI\"      \"SB\"       \"CS\"       \"BB\"       \"SO\"       \"IBB\"     \n[19] \"HBP\"      \"SH\"       \"SF\"       \"GIDP\"    \n```\n:::\n:::\n\n\n## A Starter Histogram\n\nA `histogram` is used to visualize the *distribution* of a numerical variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_1977 |>\n  ggplot(aes(x = H)) +\n  geom_histogram() +\n  labs(title = \"Hits\",\n       subtitle = \"1977 season\",\n       caption = \"Spark 01\",\n       x = \"hits\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](04_boxplots_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## Colors\n\nThis is a distribution the the number of clean hits by MLB batters in the 1977 season.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_1977 |>\n  ggplot(aes(x = H)) +\n  geom_histogram(fill = \"blue\", color = \"black\") +\n  labs(title = \"Hits\",\n       subtitle = \"1977 season\",\n       caption = \"Spark 01\",\n       x = \"hits\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](04_boxplots_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## Label(s)\n\nGlenn Burke himself had 43 hits (playing a bench role).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_1977 |>\n  ggplot(aes(x = H)) +\n  geom_histogram(fill = \"blue\", color = \"black\") +\n  geom_segment(aes(x = 93, y = 50, xend = 43, yend = 0),\n               arrow = arrow(), color = \"red\", size = 3) +\n  geom_label(aes(x = 43, y = 0, label = \"Glenn Burke\"),\n             nudge_x = 50, nudge_y = 50) +\n  labs(title = \"Hits\",\n       subtitle = \"1977 season\",\n       caption = \"Spark 01\",\n       x = \"hits\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](04_boxplots_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nRemember that we can get also get a sense of a player comparing them to the summary statistics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_1977 |>\n  summarize(xbar = mean(H, na.rm = TRUE),\n            median = median(H, na.rm = TRUE),\n            sd = sd(H, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n   xbar median    sd\n  <dbl>  <dbl> <dbl>\n1  57.8     29  59.6\n```\n:::\n:::\n\n\n## Cultural Icon\n\n![Image Credit: Business Insider](GlennBurkeHighFive.png)\n\n# Excel Files\n\nWhen we have an Excel file (i.e. Microsoft Excel), the `read_xlsx()` command in the  `readxl` package will be convenient here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_Burke <- readxl::read_xlsx(\"data_Burke.xlsx\")\n```\n:::\n\n\n## Look at the Data\n\nOne way to get a quick look at the data set is with the `head()` command (outputs the first few rows and columns).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df_Burke)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 22\n  playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n  <chr>      <dbl> <dbl> <chr>  <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 burkegl01   1976     1 LAN    NL       25    46     9    11     2     0     0\n2 burkegl01   1977     1 LAN    NL       83   169    16    43     8     0     1\n3 burkegl01   1978     1 LAN    NL       16    19     2     4     0     0     0\n4 burkegl01   1978     2 OAK    AL       78   200    19    47     6     1     1\n5 burkegl01   1979     1 OAK    AL       23    89     4    19     2     1     0\n# … with 10 more variables: RBI <dbl>, SB <dbl>, CS <dbl>, BB <dbl>, SO <dbl>,\n#   IBB <dbl>, HBP <dbl>, SH <dbl>, SF <dbl>, GIDP <dbl>\n```\n:::\n:::\n\n\nWe can also look at the *structure* of a data frame with the `str()` command.  In particular, this view allows us to quickly see which variables are *numerical* and which are *categorical*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(df_Burke, give.attr = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [5 × 22] (S3: tbl_df/tbl/data.frame)\n $ playerID: chr [1:5] \"burkegl01\" \"burkegl01\" \"burkegl01\" \"burkegl01\" ...\n $ yearID  : num [1:5] 1976 1977 1978 1978 1979\n $ stint   : num [1:5] 1 1 1 2 1\n $ teamID  : chr [1:5] \"LAN\" \"LAN\" \"LAN\" \"OAK\" ...\n $ lgID    : chr [1:5] \"NL\" \"NL\" \"NL\" \"AL\" ...\n $ G       : num [1:5] 25 83 16 78 23\n $ AB      : num [1:5] 46 169 19 200 89\n $ R       : num [1:5] 9 16 2 19 4\n $ H       : num [1:5] 11 43 4 47 19\n $ X2B     : num [1:5] 2 8 0 6 2\n $ X3B     : num [1:5] 0 0 0 1 1\n $ HR      : num [1:5] 0 1 0 1 0\n $ RBI     : num [1:5] 5 13 2 14 4\n $ SB      : num [1:5] 3 13 1 15 3\n $ CS      : num [1:5] 2 5 0 8 1\n $ BB      : num [1:5] 3 5 0 10 4\n $ SO      : num [1:5] 8 22 4 26 10\n $ IBB     : num [1:5] 0 1 0 1 1\n $ HBP     : num [1:5] 1 1 0 0 0\n $ SH      : num [1:5] 1 0 0 6 1\n $ SF      : num [1:5] 0 0 0 1 0\n $ GIDP    : num [1:5] 1 3 0 7 3\n```\n:::\n:::\n\n\nAnother convenient tool for our programming purposes is looking at the *column names* (i.e. variable names that we need to type later)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df_Burke)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"playerID\" \"yearID\"   \"stint\"    \"teamID\"   \"lgID\"     \"G\"       \n [7] \"AB\"       \"R\"        \"H\"        \"X2B\"      \"X3B\"      \"HR\"      \n[13] \"RBI\"      \"SB\"       \"CS\"       \"BB\"       \"SO\"       \"IBB\"     \n[19] \"HBP\"      \"SH\"       \"SF\"       \"GIDP\"    \n```\n:::\n:::\n\n\n## Bar Plot (by identity)\n\nBar plots are easy for readers to understand, but a little tricky to produce.  We usually make bar plots with a categorical variable on the $x$-axis and a numerical variable on the $y$-axis.\n\nWhen we want to use the numbers from the data frame directly, be sure to specify the `stat = \"identity\"` parameter.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_Burke |>\n  ggplot(aes(x = yearID, y = G, fill = teamID)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Glenn Burke: A Brief Time in the Major Leagues\",\n       subtitle = \"He spent seasons with the Dodgers and the Athletics\",\n       caption = \"Spark 01\",\n       x = \"season\", y = \"games played\")\n```\n\n::: {.cell-output-display}\n![](04_boxplots_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n## Bar Plot (by count)\n\nWhen we want the bar plot to reflect the number of observations (i.e. number of rows) for each category, then use the `stat = \"count\"` parameter.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_Burke |>\n  ggplot(aes(x = teamID, fill = teamID)) +\n  geom_bar(stat = \"count\") +\n  labs(title = \"Glenn Burke: A Brief Time in the Major Leagues\",\n       subtitle = \"He spent seasons with the Dodgers and the Athletics\",\n       caption = \"Spark 01\",\n       x = \"team\", y = \"seasons played\")\n```\n\n::: {.cell-output-display}\n![](04_boxplots_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n# Outing\n\n:::: {.columns}\n\n::: {.column width=\"60%\"}\nGlenn Burke was the first openly gay player in MLB\n\n- manager asked Burke to marry a woman\n- traded to the Athletics in 1978\n:::\n\n::: {.column width=\"40%\"}\n![](SingledOut.png)\n:::\n\n\n\n::::\n\n## Epilogue\n\n:::: {.columns}\n\n::: {.column width=\"40%\"}\n![Image Credit: Washington Post](GlennBurkeColor.png)\n:::\n\n::: {.column width=\"60%\"}\nGlenn Burke left MLB in 1980\n\n- played in the Gay Olympics\n- dealt with drug addiction\n- died of AIDS in 1995\n:::\n\n::::\n\n## References\n\n- [Lahman Data Package](https://github.com/cdalzell/Lahman)\n- [Baseball Reference](https://www.baseball-reference.com/players/b/burkegl01.shtml#all_transactions_other)\n- [\"The trials of baseball’s first openly gay player, Glenn Burke, four decades ago\"](https://www.washingtonpost.com/news/morning-mix/wp/2015/08/17/the-trials-of-baseballs-first-openly-gay-player-glenn-burke-four-decades-ago/) --- Washington Post\n- [\"Today is National High Five Day — this photo from 1977 shows the first ever high five\"](https://www.businessinsider.com/where-does-the-high-five-come-from-origin-2017-4) --- Business Insider\n- [Singled Out](https://www.outsports.com/2021/3/1/22306985/mlb-gay-glenn-burke-singled-out-andrew-maraniss-biography-book) by Andrew Maraniss",
    "supporting": [
      "04_boxplots_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}