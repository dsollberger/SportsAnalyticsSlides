{
  "hash": "3b1a055ea81cf57e03ed92c4a19ea982",
  "result": {
    "markdown": "---\ntitle: \"7: Linear Regression\"\nauthor: \"Derek Sollberger\"\ndate: \"2023-09-14\"\nformat: \n  html:\n    toc: true\n    theme: cerulean\n---\n\n\n## Load the Tidyverse\n\nThe `tidyverse` suite of packages are streamlined to make data science processes easier.  We can load the packages with the `library()` command.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"tidyverse\")\n```\n:::\n\n\n# Load the Data\n\nSince we have CSV files (comma-separated values), the `read_csv()` command in the  `readr` package will be convenient here.  I tend to save data set into a variable `df` (stands for \"data frame\").\n\nToday's data set comes from the `Lahman` package, which contains a lot of historical data about Major League Baseball.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- readr::read_csv(\"baseball_data_90s.csv\") |>\n  janitor::clean_names()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 278 Columns: 48\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (13): lgID, teamID, franchID, divID, DivWin, WCWin, LgWin, WSWin, name, ...\ndbl (35): yearID, Rank, G, Ghome, W, L, R, AB, H, X2B, X3B, HR, BB, SO, SB, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n## Look at the Data\n\nOne way to get a quick look at the data set is with the `head()` command (outputs the first few rows and columns).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 48\n  year_id lg_id team_id franch_id div_id  rank     g ghome     w     l div_win\n    <dbl> <chr> <chr>   <chr>     <chr>  <dbl> <dbl> <dbl> <dbl> <dbl> <chr>  \n1    1990 NL    ATL     ATL       W          6   162    81    65    97 N      \n2    1990 AL    BAL     BAL       E          5   161    80    76    85 N      \n3    1990 AL    BOS     BOS       E          1   162    81    88    74 Y      \n4    1990 AL    CAL     ANA       W          4   162    81    80    82 N      \n5    1990 AL    CHA     CHW       W          2   162    80    94    68 N      \n6    1990 NL    CHN     CHC       E          4   162    81    77    85 N      \n# ℹ 37 more variables: wc_win <chr>, lg_win <chr>, ws_win <chr>, r <dbl>,\n#   ab <dbl>, h <dbl>, x2b <dbl>, x3b <dbl>, hr <dbl>, bb <dbl>, so <dbl>,\n#   sb <dbl>, cs <dbl>, hbp <dbl>, sf <dbl>, ra <dbl>, er <dbl>, era <dbl>,\n#   cg <dbl>, sho <dbl>, sv <dbl>, i_pouts <dbl>, ha <dbl>, hra <dbl>,\n#   bba <dbl>, soa <dbl>, e <dbl>, dp <dbl>, fp <dbl>, name <chr>, park <chr>,\n#   attendance <dbl>, bpf <dbl>, ppf <dbl>, team_idbr <chr>,\n#   team_i_dlahman45 <chr>, team_i_dretro <chr>\n```\n:::\n:::\n\n\nWe can also look at the *structure* of a data frame with the `str()` command.  In particular, this view allows us to quickly see which variables are *numerical* and which are *categorical*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(df, give.attr = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nspc_tbl_ [278 × 48] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ year_id         : num [1:278] 1990 1990 1990 1990 1990 1990 1990 1990 1990 1990 ...\n $ lg_id           : chr [1:278] \"NL\" \"AL\" \"AL\" \"AL\" ...\n $ team_id         : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ franch_id       : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"ANA\" ...\n $ div_id          : chr [1:278] \"W\" \"E\" \"E\" \"W\" ...\n $ rank            : num [1:278] 6 5 1 4 2 4 1 4 3 4 ...\n $ g               : num [1:278] 162 161 162 162 162 162 162 162 162 162 ...\n $ ghome           : num [1:278] 81 80 81 81 80 81 81 81 81 81 ...\n $ w               : num [1:278] 65 76 88 80 94 77 91 77 79 75 ...\n $ l               : num [1:278] 97 85 74 82 68 85 71 85 83 87 ...\n $ div_win         : chr [1:278] \"N\" \"N\" \"Y\" \"N\" ...\n $ wc_win          : chr [1:278] NA NA NA NA ...\n $ lg_win          : chr [1:278] \"N\" \"N\" \"N\" \"N\" ...\n $ ws_win          : chr [1:278] \"N\" \"N\" \"N\" \"N\" ...\n $ r               : num [1:278] 682 669 699 690 682 690 693 732 750 573 ...\n $ ab              : num [1:278] 5504 5410 5516 5570 5402 ...\n $ h               : num [1:278] 1376 1328 1502 1448 1393 ...\n $ x2b             : num [1:278] 263 234 298 237 251 240 284 266 241 209 ...\n $ x3b             : num [1:278] 26 22 31 27 44 36 40 41 32 32 ...\n $ hr              : num [1:278] 162 132 106 147 106 136 125 110 172 94 ...\n $ bb              : num [1:278] 473 660 598 566 478 406 466 458 634 548 ...\n $ so              : num [1:278] 1010 962 795 1000 903 869 913 836 952 997 ...\n $ sb              : num [1:278] 92 94 53 69 140 151 166 107 82 179 ...\n $ cs              : num [1:278] 55 52 52 43 90 50 66 52 57 83 ...\n $ hbp             : num [1:278] 27 40 28 28 36 30 42 29 34 28 ...\n $ sf              : num [1:278] 31 41 44 45 47 51 42 61 41 41 ...\n $ ra              : num [1:278] 821 698 664 706 633 774 597 737 754 656 ...\n $ er              : num [1:278] 727 644 596 613 581 695 549 676 697 581 ...\n $ era             : num [1:278] 4.58 4.04 3.72 3.79 3.61 4.34 3.39 4.26 4.39 3.61 ...\n $ cg              : num [1:278] 17 10 15 21 17 13 14 12 15 12 ...\n $ sho             : num [1:278] 8 5 13 13 10 7 12 10 12 6 ...\n $ sv              : num [1:278] 30 43 44 42 68 42 50 47 45 37 ...\n $ i_pouts         : num [1:278] 4289 4306 4326 4362 4348 ...\n $ ha              : num [1:278] 1527 1445 1439 1482 1313 ...\n $ hra             : num [1:278] 128 161 92 106 106 121 124 163 154 130 ...\n $ bba             : num [1:278] 579 537 519 544 548 572 543 518 661 496 ...\n $ soa             : num [1:278] 938 776 997 944 914 ...\n $ e               : num [1:278] 158 93 123 142 124 124 102 117 131 131 ...\n $ dp              : num [1:278] 133 151 154 186 169 136 126 146 178 124 ...\n $ fp              : num [1:278] 0.974 0.985 0.98 0.978 0.98 0.98 0.983 0.981 0.979 0.978 ...\n $ name            : chr [1:278] \"Atlanta Braves\" \"Baltimore Orioles\" \"Boston Red Sox\" \"California Angels\" ...\n $ park            : chr [1:278] \"Atlanta-Fulton County Stadium\" \"Memorial Stadium\" \"Fenway Park II\" \"Anaheim Stadium\" ...\n $ attendance      : num [1:278] 980129 2415189 2528986 2555688 2002357 ...\n $ bpf             : num [1:278] 105 97 105 97 98 108 105 100 101 97 ...\n $ ppf             : num [1:278] 106 98 105 97 98 108 105 100 102 98 ...\n $ team_idbr       : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ team_i_dlahman45: chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ team_i_dretro   : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n```\n:::\n:::\n\n\nAnother convenient tool for our programming purposes is looking at the *column names* (i.e. variable names that we need to type later)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"year_id\"          \"lg_id\"            \"team_id\"          \"franch_id\"       \n [5] \"div_id\"           \"rank\"             \"g\"                \"ghome\"           \n [9] \"w\"                \"l\"                \"div_win\"          \"wc_win\"          \n[13] \"lg_win\"           \"ws_win\"           \"r\"                \"ab\"              \n[17] \"h\"                \"x2b\"              \"x3b\"              \"hr\"              \n[21] \"bb\"               \"so\"               \"sb\"               \"cs\"              \n[25] \"hbp\"              \"sf\"               \"ra\"               \"er\"              \n[29] \"era\"              \"cg\"               \"sho\"              \"sv\"              \n[33] \"i_pouts\"          \"ha\"               \"hra\"              \"bba\"             \n[37] \"soa\"              \"e\"                \"dp\"               \"fp\"              \n[41] \"name\"             \"park\"             \"attendance\"       \"bpf\"             \n[45] \"ppf\"              \"team_idbr\"        \"team_i_dlahman45\" \"team_i_dretro\"   \n```\n:::\n:::\n\n\n\n# Linear Regression\n\nA *scatterplot* plots points on a graph where both the horizontal and vertical axes are numerical variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  ggplot(aes(x = r, y = w)) +\n  geom_point() + \n  geom_smooth(method = \"lm\", color = \"blue\") + #makes the regression line\n  labs(title = \"MLB Data\",\n       subtitle = \"Regression Line\",\n       caption = \"seasons 1990 to 1999\",\n       x = \"runs scored\",\n       y = \"wins\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](07_regression_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# linear model (think \"y = mx + b\")\nlin_fit <- lm(w ~ r, data = df)\nm <- lin_fit$coefficients[2]\nb <- lin_fit$coefficients[1]\n\ndf |>\n  ggplot(aes(x = r, y = w)) +\n  geom_point() + \n  geom_smooth(method = \"lm\", color = \"blue\") + #makes the regression line\n  labs(title = \"MLB Data\",\n       subtitle = paste0(\"y = \", round(m,4), \"x + \", round(b, 4)),\n       caption = \"seasons 1990 to 1999\",\n       x = \"runs scored\",\n       y = \"wins\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](07_regression_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n# Making Predictions\n\nExample: How many wins do we expect for a baseball team that scores 800 runs in a season?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlin_fit <- lm(w ~ r, data = df)\npredict(lin_fit, newdata = data.frame(r = 800))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       1 \n83.48385 \n```\n:::\n:::\n\n\nWe predict about 83.48 wins for a baseball team that scores 800 runs in a season.\n\n\n# Another Example\n\nExample: How many wins do we expect for a baseball team whose pitching ERA  (earned run average) is 4.00?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# linear model (think \"y = mx + b\")\nlin_fit <- lm(w ~ era, data = df)\nm <- lin_fit$coefficients[2]\nb <- lin_fit$coefficients[1]\n\ndf |>\n  ggplot(aes(x = era, y = w)) +\n  geom_point() + \n  geom_smooth(method = \"lm\", color = \"blue\") + #makes the regression line\n  labs(title = \"MLB Data\",\n       subtitle = paste0(\"y = \", round(m,4), \"x + \", round(b, 4)),\n       caption = \"seasons 1990 to 1999\",\n       x = \"earned run average\",\n       y = \"wins\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](07_regression_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlin_fit <- lm(w ~ era, data = df)\npredict(lin_fit, newdata = data.frame(era = 4))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       1 \n80.76459 \n```\n:::\n:::\n\n\nWe predict about 80.76 wins for a baseball team whose season ERA is 4.00.\n\n\n# Exercises\n\nLoad your data set (for your sport) using the `read_csv` command and save the data frame as `df`.\n\n\n::: {.cell}\n\n:::\n\n\nUse the `head`, `str`, and `colnames` commands to look at your data set.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\nToday, we are building linear regression models and making predictions in two scenarios from your sports data.\n\n## Scenario 1\n\n* describe what is on the $x$ axis: \n* describe what is on the $y$ axis: \n\nBuild a scatterplot, and use a `geom_smooth` layer to draw a linear regression line.\n\n\n::: {.cell}\n\n:::\n\n\nUse the `lm` and `predict` functions to carry out a prediction in this scenario (i.e. you choose a reasonable number for $x$).\n\n\n::: {.cell}\n\n:::\n\n\n* describe your prediction: \n\n## Scenario 2\n\n* describe what is on the $x$ axis: \n* describe what is on the $y$ axis: \n\nBuild a scatterplot, and use a `geom_smooth` layer to draw a linear regression line.\n\n\n::: {.cell}\n\n:::\n\n\nUse the `lm` and `predict` functions to carry out a prediction in this scenario (i.e. you choose a reasonable number for $x$).\n\n\n::: {.cell}\n\n:::\n\n\n* describe your prediction: \n\n\n# Wrap Up\n\n* Click `Render` to create the HTML file\n* Check the checkbox next to the HTML file (in the Files pane)\n* Click the gear (\"More\"), and then click \"Export\"\n* Upload the HTML file back into our CatCourses space",
    "supporting": [
      "07_regression_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}