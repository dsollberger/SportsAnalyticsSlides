[
  {
    "objectID": "posts/02_-_Exploring Data/02_exploring_data.html",
    "href": "posts/02_-_Exploring Data/02_exploring_data.html",
    "title": "02_-_Exploring Data",
    "section": "",
    "text": "The tidyverse suite of packages are streamlined to make data science processes easier. We can load the packages with the library() command.\n\nlibrary(\"tidyverse\")\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.1\n✔ readr   2.1.2     ✔ forcats 0.5.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()"
  },
  {
    "objectID": "posts/02_-_Exploring Data/02_exploring_data.html#load-the-data",
    "href": "posts/02_-_Exploring Data/02_exploring_data.html#load-the-data",
    "title": "02_-_Exploring Data",
    "section": "Load the Data",
    "text": "Load the Data\nSince we have CSV files (comma-separated values), the read_csv() command in the readr package will be convenient here. I tend to save data set into a variable df (stands for “data frame”).\nToday’s data set comes from Baseball Reference. In particular, we are looking at the team batting statistics for the 2021 season.\n\ndf <- readr::read_csv(\"baseball_2021_batting.csv\")\n\nRows: 32 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): Tm\ndbl (28): #Bat, BatAge, R/G, G, PA, AB, R, H, 2B, 3B, HR, RBI, SB, CS, BB, S...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "slides.html",
    "href": "slides.html",
    "title": "SportsAnalyticsSlides",
    "section": "",
    "text": "Derek Sollberger\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/02_-_Exploring Data/02_exploring_data.html#look-at-the-data",
    "href": "posts/02_-_Exploring Data/02_exploring_data.html#look-at-the-data",
    "title": "02_-_Exploring Data",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df)\n\n# A tibble: 6 × 29\n  Tm         `#Bat` BatAge `R/G`     G    PA    AB     R     H  `2B`  `3B`    HR\n  <chr>       <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 Arizona D…     64   28.9  4.19   162  6144  5489   679  1297   308    31   144\n2 Atlanta B…     56   28.2  4.91   161  6056  5363   790  1307   269    20   239\n3 Baltimore…     62   26.7  4.07   162  5983  5420   659  1296   266    15   195\n4 Boston Re…     56   28    5.12   162  6122  5495   829  1434   330    23   219\n5 Chicago C…     69   29.1  4.35   162  5972  5306   705  1255   225    26   210\n6 Chicago W…     47   28    4.91   162  6084  5357   796  1373   275    22   190\n# … with 17 more variables: RBI <dbl>, SB <dbl>, CS <dbl>, BB <dbl>, SO <dbl>,\n#   BA <dbl>, OBP <dbl>, SLG <dbl>, OPS <dbl>, `OPS+` <dbl>, TB <dbl>,\n#   GDP <dbl>, HBP <dbl>, SH <dbl>, SF <dbl>, IBB <dbl>, LOB <dbl>\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df, give.attr = FALSE)\n\nspec_tbl_df [32 × 29] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Tm    : chr [1:32] \"Arizona Diamondbacks\" \"Atlanta Braves\" \"Baltimore Orioles\" \"Boston Red Sox\" ...\n $ #Bat  : num [1:32] 64 56 62 56 69 47 55 48 45 49 ...\n $ BatAge: num [1:32] 28.9 28.2 26.7 28 29.1 28 28.9 26.7 28.1 28.1 ...\n $ R/G   : num [1:32] 4.19 4.91 4.07 5.12 4.35 4.91 4.85 4.43 4.59 4.3 ...\n $ G     : num [1:32] 162 161 162 162 162 162 162 162 161 162 ...\n $ PA    : num [1:32] 6144 6056 5983 6122 5972 ...\n $ AB    : num [1:32] 5489 5363 5420 5495 5306 ...\n $ R     : num [1:32] 679 790 659 829 705 796 786 717 739 697 ...\n $ H     : num [1:32] 1297 1307 1296 1434 1255 ...\n $ 2B    : num [1:32] 308 269 266 330 225 275 295 248 275 236 ...\n $ 3B    : num [1:32] 31 20 15 23 26 22 13 22 34 37 ...\n $ HR    : num [1:32] 144 239 195 219 210 190 222 203 182 179 ...\n $ RBI   : num [1:32] 644 762 632 783 672 757 756 686 709 675 ...\n $ SB    : num [1:32] 43 59 54 40 86 57 36 109 76 88 ...\n $ CS    : num [1:32] 16 19 23 21 37 20 24 17 23 25 ...\n $ BB    : num [1:32] 537 549 451 512 502 586 553 453 491 490 ...\n $ SO    : num [1:32] 1465 1453 1454 1386 1596 ...\n $ BA    : num [1:32] 0.236 0.244 0.239 0.261 0.237 0.256 0.249 0.238 0.249 0.242 ...\n $ OBP   : num [1:32] 0.309 0.319 0.304 0.328 0.312 0.336 0.328 0.303 0.317 0.308 ...\n $ SLG   : num [1:32] 0.382 0.435 0.402 0.449 0.407 0.422 0.431 0.407 0.414 0.399 ...\n $ OPS   : num [1:32] 0.692 0.754 0.705 0.777 0.719 0.758 0.759 0.71 0.731 0.707 ...\n $ OPS+  : num [1:32] 86 98 91 106 93 106 95 94 87 95 ...\n $ TB    : num [1:32] 2099 2333 2177 2467 2162 ...\n $ GDP   : num [1:32] 99 81 105 100 133 139 129 105 98 113 ...\n $ HBP   : num [1:32] 54 67 65 61 92 78 105 64 58 44 ...\n $ SH    : num [1:32] 32 32 14 10 40 24 35 20 48 17 ...\n $ SF    : num [1:32] 28 43 31 42 30 39 45 36 36 50 ...\n $ IBB   : num [1:32] 24 36 12 22 17 10 22 18 24 8 ...\n $ LOB   : num [1:32] 1152 1072 1046 1093 1019 ...\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df)\n\n [1] \"Tm\"     \"#Bat\"   \"BatAge\" \"R/G\"    \"G\"      \"PA\"     \"AB\"     \"R\"     \n [9] \"H\"      \"2B\"     \"3B\"     \"HR\"     \"RBI\"    \"SB\"     \"CS\"     \"BB\"    \n[17] \"SO\"     \"BA\"     \"OBP\"    \"SLG\"    \"OPS\"    \"OPS+\"   \"TB\"     \"GDP\"   \n[25] \"HBP\"    \"SH\"     \"SF\"     \"IBB\"    \"LOB\""
  },
  {
    "objectID": "posts/02_-_Exploring Data/02_exploring_data.html#measures-of-centrality",
    "href": "posts/02_-_Exploring Data/02_exploring_data.html#measures-of-centrality",
    "title": "02_-_Exploring Data",
    "section": "Measures of Centrality",
    "text": "Measures of Centrality\nNow let us practice computing means and medians of some of the numerical data.\n\nmean(df$HR)\n\n[1] 377.6875\n\n\nDuring the 2021 season, MLB teams hit about 378 home runs on average.\n\nmedian(df$HR)\n\n[1] 198\n\n\nDuring the 2021 season, the median number of home runs per team was 198.\n\nmean(df$SB)\n\n[1] 140.625\n\n\nDuring the 2021 season, MLB teams stole about 141 bases on average.\n\nmedian(df$SB)\n\n[1] 75\n\n\nDuring the 2021 season, the median number of stolen bases per team was 75."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]