---
title: "9: Coefficient of Determination"
author: "Derek Sollberger"
date: "2022-10-25"
format: 
  html:
    toc: true
---

## Load the Tidyverse

The `tidyverse` suite of packages are streamlined to make data science processes easier.  We can load the packages with the `library()` command.

```{r}

library("Lahman")
library("tidyverse")
```

```{r}
correlatedValues = function(x, r = 0.9){
  r2 = r**2
  ve = 1-r2
  SD = sqrt(ve)
  e  = rnorm(length(x), mean=0, sd=SD)
  y  = r*x + e
  return(y)
}
```


# Load the Data

Since we have CSV files (comma-separated values), the `read_csv()` command in the  `readr` package will be convenient here.  I tend to save data set into a variable `df` (stands for "data frame").

Today's data set comes from the `Lahman` package, which contains a lot of historical data about Major League Baseball.

```{r}

# df <- Teams |>
#   filter(yearID >= 1990) |>
#   filter(yearID < 2000)
# 
# readr::write_csv(df, "baseball_data_90s.csv")

df <- readr::read_csv("baseball_data_90s.csv")
```

## Look at the Data

One way to get a quick look at the data set is with the `head()` command (outputs the first few rows and columns).

```{r}

head(df)
```

We can also look at the *structure* of a data frame with the `str()` command.  In particular, this view allows us to quickly see which variables are *numerical* and which are *categorical*.

```{r}

str(df, give.attr = FALSE)
```


# Moneyball

:::: {.columns}

::: {.column width="50%"}
![](book.png)	
:::

::: {.column width="50%"}
![](movie.png)
:::

::::

# Oakland Athletics

After several seasons of losing records, attendance and revenue decreased heavily for the Oakland A's.

![Oakland A's 1993 to 2001](earlier.png)

# Budget

![](MONEYBALLchart.png)

# Previously: Linear Regression

```{r}
# linear model (think "y = mx + b")
lin_fit <- lm(W ~ R, data = df)
m <- lin_fit$coefficients[2]
b <- lin_fit$coefficients[1]

df |>
  ggplot(aes(x = R, y = W)) +
  geom_point() + 
  geom_smooth(method = "lm", color = "blue") + #makes the regression line
  labs(title = "MLB Data",
       subtitle = paste0("y = ", round(m,4), "x + ", round(b, 4)),
       caption = "seasons 1990 to 1999",
       x = "runs scored",
       y = "wins")
```

# Data-Driven Analytics

Another convenient tool for our programming purposes is looking at the *column names* (i.e. variable names that we need to type later)

```{r}
colnames(df)
```

## Coefficient of Determination

$$R^{2} = \frac{\text{explained variation}}{\text{overall variation}}$$

- for linear regression, $R^{2}$ is literally the square of the correlation coefficient $r$
- want more "explained variation", so larger numbers are better.  Suggested interpretation:

  - no effect: $0 < R^{2} < 0.4$
  - mild effect: $0.4 < R^{2} < 0.7$
  - large effect: $0.7 < R^{2} < 1.0$

# Early Examples

```{r}
# wins explained by hits
model1 <- lm(W ~ H, data = df)
summary(model1)
```

# Early Examples

```{r}
# wins explained by hits
model1 <- lm(W ~ H, data = df)
summary(model1)$adj.r.squared
```

```{r}
# wins explained by home runs
model2 <- lm(W ~ HR, data = df)
summary(model2)$adj.r.squared
```

```{r}
# wins explained by strikeouts
model3 <- lm(W ~ SO, data = df)
summary(model3)$adj.r.squared
```

```{r}
# wins explained by stolen bases
model4 <- lm(W ~ SB, data = df)
summary(model4)$adj.r.squared
```

## Custom Variables

$$BA = \frac{H}{AB}$$
$$OBP = \frac{H + BB + HBP}{AB}$$
$$SLG = \frac{H + 2B + 2*3B + 3*HR}{AB}$$
$$OPS = OBP + SLG$$
```{r}
df <- df |>
  mutate(BA = H/AB,       #batting average
         OBP = (H + BB + HBP)/AB, #on-base percentage
         SLG = (H + X2B + 2*X3B + 3*HR)/AB, #slugging percentage
         OPS = OBP + SLG) #on-base plus slugging
```

# Advanced Statistics

```{r}
# runs explained by batting average
model5 <- lm(R ~ BA, data = df)
summary(model5)$adj.r.squared
```

```{r}
# runs explained by on-base percentage
model6 <- lm(R ~ OBP, data = df)
summary(model6)$adj.r.squared
```

```{r}
# runs explained by slugging percentage
model7 <- lm(R ~ SLG, data = df)
summary(model7)$adj.r.squared
```

```{r}
# runs explained by one-base plus slugging
model8 <- lm(R ~ OPS, data = df)
summary(model8)$adj.r.squared
```

# Making Predictions

Out of these models, `OPS` (on-base plus slugging) seems to be the best explanatory variable to predict runs (according to the coefficient of determination)

Example: How many runs do we expect for a baseball team that has an 0.800 OPS over a season?

```{r}
lin_fit <- lm(R ~ OPS, data = df)
predict(lin_fit, newdata = data.frame(OPS = 0.800))
```

We predict about 752.8544 runs for a baseball team that has an 0.800 OPS over a season.

# Afterward

![](later.png)


# References

- https://www.baseball-reference.com/teams/OAK/
- https://www.mlb.com/glossary/
- https://en.wikipedia.org/wiki/Moneyball