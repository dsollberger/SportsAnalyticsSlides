{
  "hash": "f7faf3cd63911295e8b780904c042b56",
  "result": {
    "markdown": "---\ntitle: \"04: Boxplots\"\nauthor: \"Derek Sollberger\"\ndate: \"2023-10-26\"\nformat: \n  html:\n    theme: cerulean\n---\n\n\n## Load the Tidyverse\n\nThe `tidyverse` suite of packages are streamlined to make data science processes easier.  We can load the packages with the `library()` command.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"tidyverse\")\n```\n:::\n\n\n# Example\n\n## Load the Data\n\nSince we have CSV files (comma-separated values), the `read_csv()` command in the  `readr` package will be convenient here.  I tend to save data set into a variable `df` (stands for \"data frame\").\n\nToday's data set comes from the `Lahman` package, which contains a lot of historical data about Major League Baseball.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- readr::read_csv(\"baseball_teams_data.csv\")\n```\n:::\n\n\n## Look at the Data\n\nOne way to get a quick look at the data set is with the `head()` command (outputs the first few rows and columns).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 48\n  yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n   <dbl> <chr> <chr>  <chr>    <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>  <chr>\n1   2012 NL    ARI    ARI      W         3   162    81    81    81 N      N    \n2   2012 NL    ATL    ATL      E         2   162    81    94    68 N      Y    \n3   2012 AL    BAL    BAL      E         2   162    81    93    69 N      Y    \n4   2012 AL    BOS    BOS      E         5   162    81    69    93 N      N    \n5   2012 AL    CHA    CHW      C         2   162    81    85    77 N      N    \n6   2012 NL    CHN    CHC      C         5   162    81    61   101 N      N    \n# ℹ 36 more variables: LgWin <chr>, WSWin <chr>, R <dbl>, AB <dbl>, H <dbl>,\n#   X2B <dbl>, X3B <dbl>, HR <dbl>, BB <dbl>, SO <dbl>, SB <dbl>, CS <dbl>,\n#   HBP <dbl>, SF <dbl>, RA <dbl>, ER <dbl>, ERA <dbl>, CG <dbl>, SHO <dbl>,\n#   SV <dbl>, IPouts <dbl>, HA <dbl>, HRA <dbl>, BBA <dbl>, SOA <dbl>, E <dbl>,\n#   DP <dbl>, FP <dbl>, name <chr>, park <chr>, attendance <dbl>, BPF <dbl>,\n#   PPF <dbl>, teamIDBR <chr>, teamIDlahman45 <chr>, teamIDretro <chr>\n```\n:::\n:::\n\n\nWe can also look at the *structure* of a data frame with the `str()` command.  In particular, this view allows us to quickly see which variables are *numerical* and which are *categorical*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(df, give.attr = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nspc_tbl_ [300 × 48] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ yearID        : num [1:300] 2012 2012 2012 2012 2012 ...\n $ lgID          : chr [1:300] \"NL\" \"NL\" \"AL\" \"AL\" ...\n $ teamID        : chr [1:300] \"ARI\" \"ATL\" \"BAL\" \"BOS\" ...\n $ franchID      : chr [1:300] \"ARI\" \"ATL\" \"BAL\" \"BOS\" ...\n $ divID         : chr [1:300] \"W\" \"E\" \"E\" \"E\" ...\n $ Rank          : num [1:300] 3 2 2 5 2 5 1 4 5 1 ...\n $ G             : num [1:300] 162 162 162 162 162 162 162 162 162 162 ...\n $ Ghome         : num [1:300] 81 81 81 81 81 81 81 81 81 81 ...\n $ W             : num [1:300] 81 94 93 69 85 61 97 68 64 88 ...\n $ L             : num [1:300] 81 68 69 93 77 101 65 94 98 74 ...\n $ DivWin        : chr [1:300] \"N\" \"N\" \"N\" \"N\" ...\n $ WCWin         : chr [1:300] \"N\" \"Y\" \"Y\" \"N\" ...\n $ LgWin         : chr [1:300] \"N\" \"N\" \"N\" \"N\" ...\n $ WSWin         : chr [1:300] \"N\" \"N\" \"N\" \"N\" ...\n $ R             : num [1:300] 734 700 712 734 748 613 669 667 758 726 ...\n $ AB            : num [1:300] 5462 5425 5560 5604 5518 ...\n $ H             : num [1:300] 1416 1341 1375 1459 1409 ...\n $ X2B           : num [1:300] 307 263 270 339 228 265 296 266 306 279 ...\n $ X3B           : num [1:300] 33 30 16 16 29 36 30 24 52 39 ...\n $ HR            : num [1:300] 165 149 214 165 211 137 172 136 166 163 ...\n $ BB            : num [1:300] 539 567 480 428 461 447 481 555 450 511 ...\n $ SO            : num [1:300] 1266 1289 1315 1197 1203 ...\n $ SB            : num [1:300] 93 101 58 97 109 94 87 110 100 59 ...\n $ CS            : num [1:300] 51 32 29 31 43 45 27 44 40 23 ...\n $ HBP           : num [1:300] 41 34 50 45 65 43 47 59 36 57 ...\n $ SF            : num [1:300] 45 46 30 55 36 24 37 39 39 39 ...\n $ RA            : num [1:300] 688 600 705 806 676 759 588 845 890 670 ...\n $ ER            : num [1:300] 626 549 642 754 646 708 540 766 824 596 ...\n $ ERA           : num [1:300] 3.93 3.42 3.9 4.7 4.02 4.51 3.34 4.78 5.22 3.75 ...\n $ CG            : num [1:300] 4 5 1 6 6 1 9 2 0 9 ...\n $ SHO           : num [1:300] 9 16 10 4 11 9 12 6 7 8 ...\n $ SV            : num [1:300] 39 47 55 35 37 28 56 43 36 40 ...\n $ IPouts        : num [1:300] 4301 4336 4449 4329 4337 ...\n $ HA            : num [1:300] 1432 1310 1433 1449 1365 ...\n $ HRA           : num [1:300] 155 145 184 190 186 175 152 174 198 151 ...\n $ BBA           : num [1:300] 417 464 481 529 503 573 427 543 566 438 ...\n $ SOA           : num [1:300] 1200 1232 1177 1176 1246 ...\n $ E             : num [1:300] 90 86 106 101 70 105 89 96 122 99 ...\n $ DP            : num [1:300] 146 147 151 159 154 148 113 157 139 127 ...\n $ FP            : num [1:300] 0.985 0.986 0.983 0.983 0.988 0.982 0.985 0.984 0.98 0.983 ...\n $ name          : chr [1:300] \"Arizona Diamondbacks\" \"Atlanta Braves\" \"Baltimore Orioles\" \"Boston Red Sox\" ...\n $ park          : chr [1:300] \"Chase Field\" \"Turner Field\" \"Oriole Park at Camden Yards\" \"Fenway Park II\" ...\n $ attendance    : num [1:300] 2177617 2420171 2102240 3043003 1965955 ...\n $ BPF           : num [1:300] 105 102 102 106 106 98 107 93 120 104 ...\n $ PPF           : num [1:300] 106 101 103 106 106 99 107 95 121 103 ...\n $ teamIDBR      : chr [1:300] \"ARI\" \"ATL\" \"BAL\" \"BOS\" ...\n $ teamIDlahman45: chr [1:300] \"ARI\" \"ATL\" \"BAL\" \"BOS\" ...\n $ teamIDretro   : chr [1:300] \"ARI\" \"ATL\" \"BAL\" \"BOS\" ...\n```\n:::\n:::\n\n\nAnother convenient tool for our programming purposes is looking at the *column names* (i.e. variable names that we need to type later)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"yearID\"         \"lgID\"           \"teamID\"         \"franchID\"      \n [5] \"divID\"          \"Rank\"           \"G\"              \"Ghome\"         \n [9] \"W\"              \"L\"              \"DivWin\"         \"WCWin\"         \n[13] \"LgWin\"          \"WSWin\"          \"R\"              \"AB\"            \n[17] \"H\"              \"X2B\"            \"X3B\"            \"HR\"            \n[21] \"BB\"             \"SO\"             \"SB\"             \"CS\"            \n[25] \"HBP\"            \"SF\"             \"RA\"             \"ER\"            \n[29] \"ERA\"            \"CG\"             \"SHO\"            \"SV\"            \n[33] \"IPouts\"         \"HA\"             \"HRA\"            \"BBA\"           \n[37] \"SOA\"            \"E\"              \"DP\"             \"FP\"            \n[41] \"name\"           \"park\"           \"attendance\"     \"BPF\"           \n[45] \"PPF\"            \"teamIDBR\"       \"teamIDlahman45\" \"teamIDretro\"   \n```\n:::\n:::\n\n\n## A Starter Boxplot\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  ggplot(aes(y = W)) +\n  geom_boxplot() +\n  labs(title = \"MLB Wins\",\n       subtitle = \"2012 to 2021 seasons\",\n       caption = \"Spark 10\",\n       y = \"wins\")\n```\n\n::: {.cell-output-display}\n![](04_boxplots_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nThe thick line in the middle of the boxplot is at the median value of the data.  The start and end of the box are at the 25th and 75th percentiles.  Statisticians call the difference between the 25th and 75th percentiles the *interquartile range* (IQR).  The \"whiskers\" extend 1.5 times the IQR.  Finally, additional points beyond the whiskers may be thought of as outliers.\n\n## Comparisons\n\nThis is the code block that most students will want to use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  ggplot(aes(x = lgID, y = R),\n         color = \"yellow\", fill = \"blue\") +\n  geom_boxplot() +\n  labs(title = \"MLB Runs by League\",\n       subtitle = \"2012 to 2021 seasons\",\n       caption = \"Spark 10\",\n       x = \"league\",\n       y = \"runs scored\")\n```\n\n::: {.cell-output-display}\n![](04_boxplots_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nBoxplots are particularly useful to graph a numerical variable (on the $y$-axis) across a categorical variable (on the $x$-axis).  A lot of research is shown with side-by-side boxplots.\n\n## Grouping\n\nHere are some advanced examples.  We can use the `group` parameter to tell R how to organize the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  ggplot(aes(x = franchID, y = W, group = franchID)) +\n  geom_boxplot() +\n  labs(title = \"MLB Wins by Team\",\n       subtitle = \"2012 to 2021 seasons\",\n       caption = \"Spark 10\",\n       x = \"team\",\n       y = \"wins\")\n```\n\n::: {.cell-output-display}\n![](04_boxplots_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nEspecially in sports, the categorical data might have too many labels for a visually-pleasing graph (here: too many teams to teams to think about simultaneously).  We can use the `filter` commend (SQL skills) to help us look at a small amount of labels and make the graph easier to read.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  filter(franchID %in% c(\"ARI\", \"COL\", \"LAD\", \"SDP\", \"SFG\")) |>\n  ggplot(aes(x = franchID, y = W, group = franchID)) +\n  geom_boxplot(aes(color = franchID, fill = franchID)) +\n  \n  # https://teamcolorcodes.com/mlb-color-codes/\n  scale_color_manual(values = c(\"#E3D4AD\", \"#C4CED4\", \"#A5ACAF\", \"#FFC425\", \"#27251F\")) +\n  scale_fill_manual(values = c(\"#A71930\", \"#333366\", \"#005A9C\", \"#2F241D\", \"#FD5A1E\")) +\n\n  labs(title = \"National League West Wins by Team\",\n       subtitle = \"2012 to 2021 seasons\",\n       caption = \"Spark 10\",\n       x = \"team\",\n       y = \"wins\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](04_boxplots_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n# Exercises\n\nLoad your data set (for your sport) using the `read_csv` command and save the data frame as `df`.\n\n\n::: {.cell}\n\n:::\n\n\nUse the `head`, `str`, and `colnames` commands to look at your data set.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\nBuild two different boxplot visualizations.  Be sure to change the `labs` (labels) to describe your data set well.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n# Wrap Up\n\n* Click `Render` to create the HTML file\n* Check the checkbox next to the HTML file (in the Files pane)\n* Click the gear (\"More\"), and then click \"Export\"\n* Upload the HTML file back into our CatCourses space\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "04_boxplots_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}