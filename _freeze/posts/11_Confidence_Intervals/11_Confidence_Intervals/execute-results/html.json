{
  "hash": "fefa5ff5ed264fcff7347bdfe58eeaf6",
  "result": {
    "markdown": "---\ntitle: \"11: Confidence Intervals\"\nauthor: \"Derek Sollberger\"\ndate: \"2022-11-08\"\nformat: \n  html:\n    toc: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"infer\")\nlibrary(\"moderndive\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'moderndive' was built under R version 4.2.2\n```\n:::\n\n```{.r .cell-code}\nlibrary(\"patchwork\") #easy graph layouts\nlibrary(\"tidyverse\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.1\n✔ readr   2.1.2     ✔ forcats 0.5.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n:::\n\n\nSource:  **Statistical Inference via Data Science:** *A Modern Dive into R and the Tidyverse*\n\n* Chapter 8: Bootstrapping and Confidence Intervals\n* [https://moderndive.com/8-confidence-intervals.html](https://moderndive.com/8-confidence-intervals.html)\n\n# Load the Data\n\nSince we have CSV files (comma-separated values), the `read_csv()` command in the  `readr` package will be convenient here.  I tend to save data set into a variable `df` (stands for \"data frame\").\n\nToday's data set comes from the `Lahman` package, which contains a lot of historical data about Major League Baseball.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# df <- Teams |>\n#   filter(yearID >= 1990) |>\n#   filter(yearID < 2000)\n# \n# readr::write_csv(df, \"baseball_data_90s.csv\")\n\ndf <- readr::read_csv(\"baseball_data_90s.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 278 Columns: 48\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (13): lgID, teamID, franchID, divID, DivWin, WCWin, LgWin, WSWin, name, ...\ndbl (35): yearID, Rank, G, Ghome, W, L, R, AB, H, X2B, X3B, HR, BB, SO, SB, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n## Look at the Data\n\nOne way to get a quick look at the data set is with the `head()` command (outputs the first few rows and columns).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 48\n  yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n   <dbl> <chr> <chr>  <chr>    <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>  <chr>\n1   1990 NL    ATL    ATL      W         6   162    81    65    97 N      <NA> \n2   1990 AL    BAL    BAL      E         5   161    80    76    85 N      <NA> \n3   1990 AL    BOS    BOS      E         1   162    81    88    74 Y      <NA> \n4   1990 AL    CAL    ANA      W         4   162    81    80    82 N      <NA> \n5   1990 AL    CHA    CHW      W         2   162    80    94    68 N      <NA> \n6   1990 NL    CHN    CHC      E         4   162    81    77    85 N      <NA> \n# … with 36 more variables: LgWin <chr>, WSWin <chr>, R <dbl>, AB <dbl>,\n#   H <dbl>, X2B <dbl>, X3B <dbl>, HR <dbl>, BB <dbl>, SO <dbl>, SB <dbl>,\n#   CS <dbl>, HBP <dbl>, SF <dbl>, RA <dbl>, ER <dbl>, ERA <dbl>, CG <dbl>,\n#   SHO <dbl>, SV <dbl>, IPouts <dbl>, HA <dbl>, HRA <dbl>, BBA <dbl>,\n#   SOA <dbl>, E <dbl>, DP <dbl>, FP <dbl>, name <chr>, park <chr>,\n#   attendance <dbl>, BPF <dbl>, PPF <dbl>, teamIDBR <chr>,\n#   teamIDlahman45 <chr>, teamIDretro <chr>\n```\n:::\n:::\n\n\nWe can also look at the *structure* of a data frame with the `str()` command.  In particular, this view allows us to quickly see which variables are *numerical* and which are *categorical*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(df, give.attr = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nspec_tbl_df [278 × 48] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ yearID        : num [1:278] 1990 1990 1990 1990 1990 1990 1990 1990 1990 1990 ...\n $ lgID          : chr [1:278] \"NL\" \"AL\" \"AL\" \"AL\" ...\n $ teamID        : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ franchID      : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"ANA\" ...\n $ divID         : chr [1:278] \"W\" \"E\" \"E\" \"W\" ...\n $ Rank          : num [1:278] 6 5 1 4 2 4 1 4 3 4 ...\n $ G             : num [1:278] 162 161 162 162 162 162 162 162 162 162 ...\n $ Ghome         : num [1:278] 81 80 81 81 80 81 81 81 81 81 ...\n $ W             : num [1:278] 65 76 88 80 94 77 91 77 79 75 ...\n $ L             : num [1:278] 97 85 74 82 68 85 71 85 83 87 ...\n $ DivWin        : chr [1:278] \"N\" \"N\" \"Y\" \"N\" ...\n $ WCWin         : chr [1:278] NA NA NA NA ...\n $ LgWin         : chr [1:278] \"N\" \"N\" \"N\" \"N\" ...\n $ WSWin         : chr [1:278] \"N\" \"N\" \"N\" \"N\" ...\n $ R             : num [1:278] 682 669 699 690 682 690 693 732 750 573 ...\n $ AB            : num [1:278] 5504 5410 5516 5570 5402 ...\n $ H             : num [1:278] 1376 1328 1502 1448 1393 ...\n $ X2B           : num [1:278] 263 234 298 237 251 240 284 266 241 209 ...\n $ X3B           : num [1:278] 26 22 31 27 44 36 40 41 32 32 ...\n $ HR            : num [1:278] 162 132 106 147 106 136 125 110 172 94 ...\n $ BB            : num [1:278] 473 660 598 566 478 406 466 458 634 548 ...\n $ SO            : num [1:278] 1010 962 795 1000 903 869 913 836 952 997 ...\n $ SB            : num [1:278] 92 94 53 69 140 151 166 107 82 179 ...\n $ CS            : num [1:278] 55 52 52 43 90 50 66 52 57 83 ...\n $ HBP           : num [1:278] 27 40 28 28 36 30 42 29 34 28 ...\n $ SF            : num [1:278] 31 41 44 45 47 51 42 61 41 41 ...\n $ RA            : num [1:278] 821 698 664 706 633 774 597 737 754 656 ...\n $ ER            : num [1:278] 727 644 596 613 581 695 549 676 697 581 ...\n $ ERA           : num [1:278] 4.58 4.04 3.72 3.79 3.61 4.34 3.39 4.26 4.39 3.61 ...\n $ CG            : num [1:278] 17 10 15 21 17 13 14 12 15 12 ...\n $ SHO           : num [1:278] 8 5 13 13 10 7 12 10 12 6 ...\n $ SV            : num [1:278] 30 43 44 42 68 42 50 47 45 37 ...\n $ IPouts        : num [1:278] 4289 4306 4326 4362 4348 ...\n $ HA            : num [1:278] 1527 1445 1439 1482 1313 ...\n $ HRA           : num [1:278] 128 161 92 106 106 121 124 163 154 130 ...\n $ BBA           : num [1:278] 579 537 519 544 548 572 543 518 661 496 ...\n $ SOA           : num [1:278] 938 776 997 944 914 ...\n $ E             : num [1:278] 158 93 123 142 124 124 102 117 131 131 ...\n $ DP            : num [1:278] 133 151 154 186 169 136 126 146 178 124 ...\n $ FP            : num [1:278] 0.974 0.985 0.98 0.978 0.98 0.98 0.983 0.981 0.979 0.978 ...\n $ name          : chr [1:278] \"Atlanta Braves\" \"Baltimore Orioles\" \"Boston Red Sox\" \"California Angels\" ...\n $ park          : chr [1:278] \"Atlanta-Fulton County Stadium\" \"Memorial Stadium\" \"Fenway Park II\" \"Anaheim Stadium\" ...\n $ attendance    : num [1:278] 980129 2415189 2528986 2555688 2002357 ...\n $ BPF           : num [1:278] 105 97 105 97 98 108 105 100 101 97 ...\n $ PPF           : num [1:278] 106 98 105 97 98 108 105 100 102 98 ...\n $ teamIDBR      : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ teamIDlahman45: chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ teamIDretro   : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n```\n:::\n:::\n\n\nAnother convenient tool for our programming purposes is looking at the *column names* (i.e. variable names that we need to type later)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"yearID\"         \"lgID\"           \"teamID\"         \"franchID\"      \n [5] \"divID\"          \"Rank\"           \"G\"              \"Ghome\"         \n [9] \"W\"              \"L\"              \"DivWin\"         \"WCWin\"         \n[13] \"LgWin\"          \"WSWin\"          \"R\"              \"AB\"            \n[17] \"H\"              \"X2B\"            \"X3B\"            \"HR\"            \n[21] \"BB\"             \"SO\"             \"SB\"             \"CS\"            \n[25] \"HBP\"            \"SF\"             \"RA\"             \"ER\"            \n[29] \"ERA\"            \"CG\"             \"SHO\"            \"SV\"            \n[33] \"IPouts\"         \"HA\"             \"HRA\"            \"BBA\"           \n[37] \"SOA\"            \"E\"              \"DP\"             \"FP\"            \n[41] \"name\"           \"park\"           \"attendance\"     \"BPF\"           \n[45] \"PPF\"            \"teamIDBR\"       \"teamIDlahman45\" \"teamIDretro\"   \n```\n:::\n:::\n\n\n## One Sample\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHR_sample <- df |> select(HR)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- HR_sample |>\n  ggplot(aes(x = HR)) +\n  geom_histogram(binwidth = 5, color = \"black\", fill = \"blue\") +\n  labs(title = \"Distribution of Home Runs\",\n       subtitle = \"Based on a sample of data\",\n       caption = \"Spark 01\") +\n  theme_minimal()\n\n# print\np1\n```\n\n::: {.cell-output-display}\n![](11_Confidence_Intervals_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## Resampling\n\nUsing the available sample of data to fabricate another sample is called *resampling*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHR_resampled <- HR_sample |>\n  sample_n(replace = TRUE, size = nrow(HR_sample))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np2 <- HR_resampled |>\n  ggplot(aes(x = HR)) +\n  geom_histogram(binwidth = 5, color = \"black\", fill = \"blue\") +\n  labs(title = \"Distribution of Home Runs\",\n       subtitle = \"Based on a sample of data\",\n       caption = \"Spark 01\") +\n  theme_minimal()\n\n# print\np2\n```\n\n::: {.cell-output-display}\n![](11_Confidence_Intervals_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# patchwork\np1 + p2\n```\n\n::: {.cell-output-display}\n![](11_Confidence_Intervals_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## Resampling Many Times\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(HR_sample)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       HR       \n Min.   : 68.0  \n 1st Qu.:120.0  \n Median :147.0  \n Mean   :148.7  \n 3rd Qu.:172.0  \n Max.   :264.0  \n```\n:::\n:::\n\n\n\nSuppose now that we have each person in a 23-student classroom repeat the act of drawing that home run data with replacement.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHR_resampled_many <- HR_sample |>\n  rep_sample_n(replace = TRUE, reps = 23, size = nrow(HR_sample))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nHR_resampled_many %>%\n  group_by(replicate) %>%\n  mutate(mean_HR = mean(HR)) %>%\n  ungroup() %>%\n  select(replicate, mean_HR) %>%\n  distinct() %>%\n  ggplot(aes(x = mean_HR)) +\n  geom_histogram(binwidth = 1, color = \"black\", fill = \"blue\") +\n  labs(title = \"Resampling Results\",\n       subtitle = \"N = 23 resamples\",\n       caption = \"Source: Modern Dive\")\n```\n\n::: {.cell-output-display}\n![](11_Confidence_Intervals_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nOut of curiosity, let us push this process to $N = 1337$ resamples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHR_resampled_many <- HR_sample |>\n  rep_sample_n(replace = TRUE, reps = 1337, size = nrow(HR_sample))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nHR_resampled_many %>%\n  group_by(replicate) %>%\n  mutate(mean_HR = mean(HR)) %>%\n  ungroup() %>%\n  select(replicate, mean_HR) %>%\n  distinct() %>%\n  ggplot(aes(x = mean_HR)) +\n  geom_histogram(binwidth = 1, color = \"black\", fill = \"blue\") +\n  labs(title = \"Resampling Results\",\n       subtitle = \"N = 23 resamples\",\n       caption = \"Source: Modern Dive\")\n```\n\n::: {.cell-output-display}\n![](11_Confidence_Intervals_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n# Using the Infer package\n\nThe `infer` package streamlines the process of resampling (with replacement) to build a **bootstrap distribution**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbootstrap_distribution <- df |>\n  specify(response = HR) |>\n  generate(reps = 1337, type = \"bootstrap\") |>\n  calculate(stat = \"mean\")\n```\n:::\n\n\nThe folks who made the `infer` package provide a `visualize` helper function to quickly view the bootstrap distribution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisualize(bootstrap_distribution)\n```\n\n::: {.cell-output-display}\n![](11_Confidence_Intervals_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nWe can get the values of the endpoints of the confidence interval with the `get_ci` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nci_endpoints <- bootstrap_distribution |> get_ci(level = 0.95, type = \"percentile\")\n\n# print\nci_endpoints\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  lower_ci upper_ci\n     <dbl>    <dbl>\n1     144.     153.\n```\n:::\n:::\n\n\nWe can also visualize the confidence interval on top of the bootstrap distribution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisualize(bootstrap_distribution) +\n  shade_ci(ci_endpoints, color = \"#DAA900\", fill = \"#002856\") +\n  labs(title = \"Bootstrap Distribution of Home Runs\",\n       subtitle = \"95% confidence interval shaded\",\n       caption = \"Spark 01\")\n```\n\n::: {.cell-output-display}\n![](11_Confidence_Intervals_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nWe are 95 percent confident that the true average number of home runs hit by a team in a season is in between 144 and 154 home runs.",
    "supporting": [
      "11_Confidence_Intervals_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}