[
  {
    "objectID": "posts/02_-_Exploring Data/02_exploring_data.html",
    "href": "posts/02_-_Exploring Data/02_exploring_data.html",
    "title": "02_-_Exploring Data",
    "section": "",
    "text": "The tidyverse suite of packages are streamlined to make data science processes easier. We can load the packages with the library() command.\n\nlibrary(\"tidyverse\")\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.1\n✔ readr   2.1.2     ✔ forcats 0.5.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()"
  },
  {
    "objectID": "posts/02_-_Exploring Data/02_exploring_data.html#load-the-data",
    "href": "posts/02_-_Exploring Data/02_exploring_data.html#load-the-data",
    "title": "02_-_Exploring Data",
    "section": "Load the Data",
    "text": "Load the Data\nSince we have CSV files (comma-separated values), the read_csv() command in the readr package will be convenient here. I tend to save data set into a variable df (stands for “data frame”).\nToday’s data set comes from Baseball Reference. In particular, we are looking at the team batting statistics for the 2021 season.\n\ndf <- readr::read_csv(\"baseball_2021_batting.csv\")\n\nRows: 32 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): Tm\ndbl (28): #Bat, BatAge, R/G, G, PA, AB, R, H, 2B, 3B, HR, RBI, SB, CS, BB, S...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "slides.html",
    "href": "slides.html",
    "title": "SportsAnalyticsSlides",
    "section": "",
    "text": "02_-_Exploring Data\n\n\n\n\n\n\n\n\n\n\n\n\nDerek Sollberger\n\n\n\n\n\n\n  \n\n\n\n\n03_-_Boxplots\n\n\n\n\n\n\n\n\n\n\n\n\nDerek Sollberger\n\n\n\n\n\n\n  \n\n\n\n\n4: Barplots\n\n\n\n\n\n\n\n\n\n\n\n\nDerek Sollberger\n\n\n\n\n\n\n  \n\n\n\n\n5: Scatterplots\n\n\n\n\n\n\n\n\n\n\n\n\nDerek Sollberger\n\n\n\n\n\n\n  \n\n\n\n\n6: Linear Regression\n\n\n\n\n\n\n\n\n\n\n\n\nDerek Sollberger\n\n\n\n\n\n\n  \n\n\n\n\n6: Linear Regression\n\n\n\n\n\n\n\n\n\n\n\n\nDerek Sollberger\n\n\n\n\n\n\n  \n\n\n\n\n10: Scandals\n\n\n\n\n\n\n\n\n\n\n\n\nDerek Sollberger\n\n\n\n\n\n\n  \n\n\n\n\n1: Introduction\n\n\n\n\n\n\n\n\n\n\n\n\nAug 24, 2023\n\n\nDerek Sollberger\n\n\n\n\n\n\n  \n\n\n\n\n13: Clustering\n\n\n\n\n\n\n\n\n\n\n\n\nNov 29, 2022\n\n\nDerek Sollberger\n\n\n\n\n\n\n  \n\n\n\n\n12: Hypothesis Testing\n\n\n\n\n\n\n\n\n\n\n\n\nNov 15, 2022\n\n\nDerek Sollberger\n\n\n\n\n\n\n  \n\n\n\n\n11: Confidence Intervals\n\n\n\n\n\n\n\n\n\n\n\n\nNov 8, 2022\n\n\nDerek Sollberger\n\n\n\n\n\n\n  \n\n\n\n\n9: Coefficient of Determination\n\n\n\n\n\n\n\n\n\n\n\n\nOct 25, 2022\n\n\nDerek Sollberger\n\n\n\n\n\n\n  \n\n\n\n\n8: Odds\n\n\n\n\n\n\n\n\n\n\n\n\nOct 18, 2022\n\n\nDerek Sollberger\n\n\n\n\n\n\n  \n\n\n\n\n7: WAR\n\n\n\n\n\n\n\n\n\n\n\n\nOct 11, 2022\n\n\nDerek Sollberger\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/02_-_Exploring Data/02_exploring_data.html#look-at-the-data",
    "href": "posts/02_-_Exploring Data/02_exploring_data.html#look-at-the-data",
    "title": "02_-_Exploring Data",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df)\n\n# A tibble: 6 × 29\n  Tm         `#Bat` BatAge `R/G`     G    PA    AB     R     H  `2B`  `3B`    HR\n  <chr>       <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 Arizona D…     64   28.9  4.19   162  6144  5489   679  1297   308    31   144\n2 Atlanta B…     56   28.2  4.91   161  6056  5363   790  1307   269    20   239\n3 Baltimore…     62   26.7  4.07   162  5983  5420   659  1296   266    15   195\n4 Boston Re…     56   28    5.12   162  6122  5495   829  1434   330    23   219\n5 Chicago C…     69   29.1  4.35   162  5972  5306   705  1255   225    26   210\n6 Chicago W…     47   28    4.91   162  6084  5357   796  1373   275    22   190\n# … with 17 more variables: RBI <dbl>, SB <dbl>, CS <dbl>, BB <dbl>, SO <dbl>,\n#   BA <dbl>, OBP <dbl>, SLG <dbl>, OPS <dbl>, `OPS+` <dbl>, TB <dbl>,\n#   GDP <dbl>, HBP <dbl>, SH <dbl>, SF <dbl>, IBB <dbl>, LOB <dbl>\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df, give.attr = FALSE)\n\nspec_tbl_df [32 × 29] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Tm    : chr [1:32] \"Arizona Diamondbacks\" \"Atlanta Braves\" \"Baltimore Orioles\" \"Boston Red Sox\" ...\n $ #Bat  : num [1:32] 64 56 62 56 69 47 55 48 45 49 ...\n $ BatAge: num [1:32] 28.9 28.2 26.7 28 29.1 28 28.9 26.7 28.1 28.1 ...\n $ R/G   : num [1:32] 4.19 4.91 4.07 5.12 4.35 4.91 4.85 4.43 4.59 4.3 ...\n $ G     : num [1:32] 162 161 162 162 162 162 162 162 161 162 ...\n $ PA    : num [1:32] 6144 6056 5983 6122 5972 ...\n $ AB    : num [1:32] 5489 5363 5420 5495 5306 ...\n $ R     : num [1:32] 679 790 659 829 705 796 786 717 739 697 ...\n $ H     : num [1:32] 1297 1307 1296 1434 1255 ...\n $ 2B    : num [1:32] 308 269 266 330 225 275 295 248 275 236 ...\n $ 3B    : num [1:32] 31 20 15 23 26 22 13 22 34 37 ...\n $ HR    : num [1:32] 144 239 195 219 210 190 222 203 182 179 ...\n $ RBI   : num [1:32] 644 762 632 783 672 757 756 686 709 675 ...\n $ SB    : num [1:32] 43 59 54 40 86 57 36 109 76 88 ...\n $ CS    : num [1:32] 16 19 23 21 37 20 24 17 23 25 ...\n $ BB    : num [1:32] 537 549 451 512 502 586 553 453 491 490 ...\n $ SO    : num [1:32] 1465 1453 1454 1386 1596 ...\n $ BA    : num [1:32] 0.236 0.244 0.239 0.261 0.237 0.256 0.249 0.238 0.249 0.242 ...\n $ OBP   : num [1:32] 0.309 0.319 0.304 0.328 0.312 0.336 0.328 0.303 0.317 0.308 ...\n $ SLG   : num [1:32] 0.382 0.435 0.402 0.449 0.407 0.422 0.431 0.407 0.414 0.399 ...\n $ OPS   : num [1:32] 0.692 0.754 0.705 0.777 0.719 0.758 0.759 0.71 0.731 0.707 ...\n $ OPS+  : num [1:32] 86 98 91 106 93 106 95 94 87 95 ...\n $ TB    : num [1:32] 2099 2333 2177 2467 2162 ...\n $ GDP   : num [1:32] 99 81 105 100 133 139 129 105 98 113 ...\n $ HBP   : num [1:32] 54 67 65 61 92 78 105 64 58 44 ...\n $ SH    : num [1:32] 32 32 14 10 40 24 35 20 48 17 ...\n $ SF    : num [1:32] 28 43 31 42 30 39 45 36 36 50 ...\n $ IBB   : num [1:32] 24 36 12 22 17 10 22 18 24 8 ...\n $ LOB   : num [1:32] 1152 1072 1046 1093 1019 ...\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df)\n\n [1] \"Tm\"     \"#Bat\"   \"BatAge\" \"R/G\"    \"G\"      \"PA\"     \"AB\"     \"R\"     \n [9] \"H\"      \"2B\"     \"3B\"     \"HR\"     \"RBI\"    \"SB\"     \"CS\"     \"BB\"    \n[17] \"SO\"     \"BA\"     \"OBP\"    \"SLG\"    \"OPS\"    \"OPS+\"   \"TB\"     \"GDP\"   \n[25] \"HBP\"    \"SH\"     \"SF\"     \"IBB\"    \"LOB\""
  },
  {
    "objectID": "posts/02_-_Exploring Data/02_exploring_data.html#measures-of-centrality",
    "href": "posts/02_-_Exploring Data/02_exploring_data.html#measures-of-centrality",
    "title": "02_-_Exploring Data",
    "section": "Measures of Centrality",
    "text": "Measures of Centrality\nNow let us practice computing means and medians of some of the numerical data.\n\nmean(df$HR)\n\n[1] 377.6875\n\n\nDuring the 2021 season, MLB teams hit about 378 home runs on average.\n\nmedian(df$HR)\n\n[1] 198\n\n\nDuring the 2021 season, the median number of home runs per team was 198.\n\nmean(df$SB)\n\n[1] 140.625\n\n\nDuring the 2021 season, MLB teams stole about 141 bases on average.\n\nmedian(df$SB)\n\n[1] 75\n\n\nDuring the 2021 season, the median number of stolen bases per team was 75."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/03_Boxplots/03_boxplots.html",
    "href": "posts/03_Boxplots/03_boxplots.html",
    "title": "03_-_Boxplots",
    "section": "",
    "text": "The tidyverse suite of packages are streamlined to make data science processes easier. We can load the packages with the library() command.\n\nlibrary(\"tidyverse\")\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.1\n✔ readr   2.1.2     ✔ forcats 0.5.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()"
  },
  {
    "objectID": "posts/03_Boxplots/03_boxplots.html#load-the-data",
    "href": "posts/03_Boxplots/03_boxplots.html#load-the-data",
    "title": "03_-_Boxplots",
    "section": "Load the Data",
    "text": "Load the Data\nSince we have CSV files (comma-separated values), the read_csv() command in the readr package will be convenient here. I tend to save data set into a variable df (stands for “data frame”).\nToday’s data set comes from the Lahman package, which contains a lot of historical data about Major League Baseball.\n\ndf <- readr::read_csv(\"baseball_teams_data.csv\")\n\nRows: 300 Columns: 48\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (13): lgID, teamID, franchID, divID, DivWin, WCWin, LgWin, WSWin, name, ...\ndbl (35): yearID, Rank, G, Ghome, W, L, R, AB, H, X2B, X3B, HR, BB, SO, SB, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "posts/03_Boxplots/03_boxplots.html#look-at-the-data",
    "href": "posts/03_Boxplots/03_boxplots.html#look-at-the-data",
    "title": "03_-_Boxplots",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df)\n\n# A tibble: 6 × 48\n  yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n   <dbl> <chr> <chr>  <chr>    <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>  <chr>\n1   2012 NL    ARI    ARI      W         3   162    81    81    81 N      N    \n2   2012 NL    ATL    ATL      E         2   162    81    94    68 N      Y    \n3   2012 AL    BAL    BAL      E         2   162    81    93    69 N      Y    \n4   2012 AL    BOS    BOS      E         5   162    81    69    93 N      N    \n5   2012 AL    CHA    CHW      C         2   162    81    85    77 N      N    \n6   2012 NL    CHN    CHC      C         5   162    81    61   101 N      N    \n# … with 36 more variables: LgWin <chr>, WSWin <chr>, R <dbl>, AB <dbl>,\n#   H <dbl>, X2B <dbl>, X3B <dbl>, HR <dbl>, BB <dbl>, SO <dbl>, SB <dbl>,\n#   CS <dbl>, HBP <dbl>, SF <dbl>, RA <dbl>, ER <dbl>, ERA <dbl>, CG <dbl>,\n#   SHO <dbl>, SV <dbl>, IPouts <dbl>, HA <dbl>, HRA <dbl>, BBA <dbl>,\n#   SOA <dbl>, E <dbl>, DP <dbl>, FP <dbl>, name <chr>, park <chr>,\n#   attendance <dbl>, BPF <dbl>, PPF <dbl>, teamIDBR <chr>,\n#   teamIDlahman45 <chr>, teamIDretro <chr>\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df, give.attr = FALSE)\n\nspec_tbl_df [300 × 48] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ yearID        : num [1:300] 2012 2012 2012 2012 2012 ...\n $ lgID          : chr [1:300] \"NL\" \"NL\" \"AL\" \"AL\" ...\n $ teamID        : chr [1:300] \"ARI\" \"ATL\" \"BAL\" \"BOS\" ...\n $ franchID      : chr [1:300] \"ARI\" \"ATL\" \"BAL\" \"BOS\" ...\n $ divID         : chr [1:300] \"W\" \"E\" \"E\" \"E\" ...\n $ Rank          : num [1:300] 3 2 2 5 2 5 1 4 5 1 ...\n $ G             : num [1:300] 162 162 162 162 162 162 162 162 162 162 ...\n $ Ghome         : num [1:300] 81 81 81 81 81 81 81 81 81 81 ...\n $ W             : num [1:300] 81 94 93 69 85 61 97 68 64 88 ...\n $ L             : num [1:300] 81 68 69 93 77 101 65 94 98 74 ...\n $ DivWin        : chr [1:300] \"N\" \"N\" \"N\" \"N\" ...\n $ WCWin         : chr [1:300] \"N\" \"Y\" \"Y\" \"N\" ...\n $ LgWin         : chr [1:300] \"N\" \"N\" \"N\" \"N\" ...\n $ WSWin         : chr [1:300] \"N\" \"N\" \"N\" \"N\" ...\n $ R             : num [1:300] 734 700 712 734 748 613 669 667 758 726 ...\n $ AB            : num [1:300] 5462 5425 5560 5604 5518 ...\n $ H             : num [1:300] 1416 1341 1375 1459 1409 ...\n $ X2B           : num [1:300] 307 263 270 339 228 265 296 266 306 279 ...\n $ X3B           : num [1:300] 33 30 16 16 29 36 30 24 52 39 ...\n $ HR            : num [1:300] 165 149 214 165 211 137 172 136 166 163 ...\n $ BB            : num [1:300] 539 567 480 428 461 447 481 555 450 511 ...\n $ SO            : num [1:300] 1266 1289 1315 1197 1203 ...\n $ SB            : num [1:300] 93 101 58 97 109 94 87 110 100 59 ...\n $ CS            : num [1:300] 51 32 29 31 43 45 27 44 40 23 ...\n $ HBP           : num [1:300] 41 34 50 45 65 43 47 59 36 57 ...\n $ SF            : num [1:300] 45 46 30 55 36 24 37 39 39 39 ...\n $ RA            : num [1:300] 688 600 705 806 676 759 588 845 890 670 ...\n $ ER            : num [1:300] 626 549 642 754 646 708 540 766 824 596 ...\n $ ERA           : num [1:300] 3.93 3.42 3.9 4.7 4.02 4.51 3.34 4.78 5.22 3.75 ...\n $ CG            : num [1:300] 4 5 1 6 6 1 9 2 0 9 ...\n $ SHO           : num [1:300] 9 16 10 4 11 9 12 6 7 8 ...\n $ SV            : num [1:300] 39 47 55 35 37 28 56 43 36 40 ...\n $ IPouts        : num [1:300] 4301 4336 4449 4329 4337 ...\n $ HA            : num [1:300] 1432 1310 1433 1449 1365 ...\n $ HRA           : num [1:300] 155 145 184 190 186 175 152 174 198 151 ...\n $ BBA           : num [1:300] 417 464 481 529 503 573 427 543 566 438 ...\n $ SOA           : num [1:300] 1200 1232 1177 1176 1246 ...\n $ E             : num [1:300] 90 86 106 101 70 105 89 96 122 99 ...\n $ DP            : num [1:300] 146 147 151 159 154 148 113 157 139 127 ...\n $ FP            : num [1:300] 0.985 0.986 0.983 0.983 0.988 0.982 0.985 0.984 0.98 0.983 ...\n $ name          : chr [1:300] \"Arizona Diamondbacks\" \"Atlanta Braves\" \"Baltimore Orioles\" \"Boston Red Sox\" ...\n $ park          : chr [1:300] \"Chase Field\" \"Turner Field\" \"Oriole Park at Camden Yards\" \"Fenway Park II\" ...\n $ attendance    : num [1:300] 2177617 2420171 2102240 3043003 1965955 ...\n $ BPF           : num [1:300] 105 102 102 106 106 98 107 93 120 104 ...\n $ PPF           : num [1:300] 106 101 103 106 106 99 107 95 121 103 ...\n $ teamIDBR      : chr [1:300] \"ARI\" \"ATL\" \"BAL\" \"BOS\" ...\n $ teamIDlahman45: chr [1:300] \"ARI\" \"ATL\" \"BAL\" \"BOS\" ...\n $ teamIDretro   : chr [1:300] \"ARI\" \"ATL\" \"BAL\" \"BOS\" ...\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df)\n\n [1] \"yearID\"         \"lgID\"           \"teamID\"         \"franchID\"      \n [5] \"divID\"          \"Rank\"           \"G\"              \"Ghome\"         \n [9] \"W\"              \"L\"              \"DivWin\"         \"WCWin\"         \n[13] \"LgWin\"          \"WSWin\"          \"R\"              \"AB\"            \n[17] \"H\"              \"X2B\"            \"X3B\"            \"HR\"            \n[21] \"BB\"             \"SO\"             \"SB\"             \"CS\"            \n[25] \"HBP\"            \"SF\"             \"RA\"             \"ER\"            \n[29] \"ERA\"            \"CG\"             \"SHO\"            \"SV\"            \n[33] \"IPouts\"         \"HA\"             \"HRA\"            \"BBA\"           \n[37] \"SOA\"            \"E\"              \"DP\"             \"FP\"            \n[41] \"name\"           \"park\"           \"attendance\"     \"BPF\"           \n[45] \"PPF\"            \"teamIDBR\"       \"teamIDlahman45\" \"teamIDretro\""
  },
  {
    "objectID": "posts/03_Boxplots/03_boxplots.html#a-starter-boxplot",
    "href": "posts/03_Boxplots/03_boxplots.html#a-starter-boxplot",
    "title": "03_-_Boxplots",
    "section": "A Starter Boxplot",
    "text": "A Starter Boxplot\n\ndf |>\n  ggplot(aes(y = W)) +\n  geom_boxplot() +\n  labs(title = \"MLB Wins\",\n       subtitle = \"2012 to 2021 seasons\",\n       caption = \"Spark 01\",\n       y = \"wins\")"
  },
  {
    "objectID": "posts/03_Boxplots/03_boxplots.html#comparisons",
    "href": "posts/03_Boxplots/03_boxplots.html#comparisons",
    "title": "03_-_Boxplots",
    "section": "Comparisons",
    "text": "Comparisons\n\ndf |>\n  ggplot(aes(x = lgID, y = R)) +\n  geom_boxplot() +\n  labs(title = \"MLB Runs by League\",\n       subtitle = \"2012 to 2021 seasons\",\n       caption = \"Spark 01\",\n       x = \"league\",\n       y = \"runs scored\")"
  },
  {
    "objectID": "posts/03_Boxplots/03_boxplots.html#grouping",
    "href": "posts/03_Boxplots/03_boxplots.html#grouping",
    "title": "03_-_Boxplots",
    "section": "Grouping",
    "text": "Grouping\n\ndf |>\n  ggplot(aes(x = franchID, y = W, group = franchID)) +\n  geom_boxplot() +\n  labs(title = \"MLB Wins by Team\",\n       subtitle = \"2012 to 2021 seasons\",\n       caption = \"Spark 01\",\n       x = \"team\",\n       y = \"wins\")\n\n\n\n\n\ndf |>\n  filter(franchID %in% c(\"ARI\", \"COL\", \"LAD\", \"SDP\", \"SFG\")) |>\n  ggplot(aes(x = franchID, y = W, group = franchID)) +\n  geom_boxplot(aes(color = franchID, fill = franchID)) +\n  \n  # https://teamcolorcodes.com/mlb-color-codes/\n  scale_color_manual(values = c(\"#E3D4AD\", \"#C4CED4\", \"#A5ACAF\", \"#FFC425\", \"#27251F\")) +\n  scale_fill_manual(values = c(\"#A71930\", \"#333366\", \"#005A9C\", \"#2F241D\", \"#FD5A1E\")) +\n\n  labs(title = \"MLB Wins by Team\",\n       subtitle = \"2012 to 2021 seasons\",\n       caption = \"Spark 01\",\n       x = \"team\",\n       y = \"wins\") +\n  theme_minimal()"
  },
  {
    "objectID": "posts/04_Barplots/04_boxplots.html",
    "href": "posts/04_Barplots/04_boxplots.html",
    "title": "4: Barplots",
    "section": "",
    "text": "Glenn Burke was an outfielder with the 1977 World Series champion Dodgers. He was born in Oakland in 1952.\n\n\n\nImage credit: Washington Post\n\n\n\n\nThe tidyverse suite of packages are streamlined to make data science processes easier. We can load the packages with the library() command.\n\n# library(\"Lahman\") #baseball data set\nlibrary(\"readxl\")\nlibrary(\"tidyverse\")\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.1\n✔ readr   2.1.2     ✔ forcats 0.5.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n# subset of the Batting data in the Lahman database\n# df_Burke <- Batting |>\n  \n  # focus on Glenn Burke\n  # abbreviation found via playerInfo() helper function\n  # filter(playerID == \"burkegl01\")\n\n# df_1977 <- Batting |>\n  # filter(yearID == 1977) |>\n  # filter(H > 0) #to ease later histogram (remove players who had zero hits)\n\n# readr::write_csv(df_Burke, \"data_Burke.csv\")\n# readr::write_csv(df_1977, \"data_1977.csv\")\n\nToday’s data set comes from the Lahman package, which contains a lot of historical data about Major League Baseball."
  },
  {
    "objectID": "posts/04_Barplots/04_boxplots.html#look-at-the-data",
    "href": "posts/04_Barplots/04_boxplots.html#look-at-the-data",
    "title": "4: Barplots",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df_1977)\n\n# A tibble: 6 × 22\n  playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n  <chr>      <dbl> <dbl> <chr>  <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 adamsbo04   1977     1 DET    AL       15    24     2     6     1     0     2\n2 adamsgl01   1977     1 MIN    AL       95   269    32    91    17     0     6\n3 aikenwi01   1977     1 CAL    AL       42    91     5    18     4     0     0\n4 alcalsa01   1977     2 MON    NL       31    25     1     2     0     0     1\n5 alexaga01   1977     1 SFN    NL       51   119    17    36     4     2     5\n6 alexama01   1977     1 OAK    AL       90    42    24    10     1     0     0\n# … with 10 more variables: RBI <dbl>, SB <dbl>, CS <dbl>, BB <dbl>, SO <dbl>,\n#   IBB <dbl>, HBP <dbl>, SH <dbl>, SF <dbl>, GIDP <dbl>\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df_1977, give.attr = FALSE)\n\nspec_tbl_df [658 × 22] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ playerID: chr [1:658] \"adamsbo04\" \"adamsgl01\" \"aikenwi01\" \"alcalsa01\" ...\n $ yearID  : num [1:658] 1977 1977 1977 1977 1977 ...\n $ stint   : num [1:658] 1 1 1 2 1 1 1 1 1 1 ...\n $ teamID  : chr [1:658] \"DET\" \"MIN\" \"CAL\" \"MON\" ...\n $ lgID    : chr [1:658] \"AL\" \"AL\" \"AL\" \"NL\" ...\n $ G       : num [1:658] 15 95 42 31 51 90 54 155 69 22 ...\n $ AB      : num [1:658] 24 269 91 25 119 42 171 613 83 40 ...\n $ R       : num [1:658] 2 32 5 1 17 24 19 75 21 10 ...\n $ H       : num [1:658] 6 91 18 2 36 10 41 160 22 13 ...\n $ X2B     : num [1:658] 1 17 4 0 4 1 4 18 3 4 ...\n $ X3B     : num [1:658] 0 0 0 0 2 0 0 11 0 0 ...\n $ HR      : num [1:658] 2 6 0 1 5 0 5 2 1 1 ...\n $ RBI     : num [1:658] 2 49 6 2 20 2 31 43 11 4 ...\n $ SB      : num [1:658] 0 0 1 0 3 26 1 20 4 3 ...\n $ CS      : num [1:658] 0 2 2 0 1 14 3 9 3 3 ...\n $ BB      : num [1:658] 0 18 10 0 20 4 24 37 8 3 ...\n $ SO      : num [1:658] 5 30 23 13 33 6 36 114 13 4 ...\n $ IBB     : num [1:658] 0 3 2 0 2 0 0 1 0 0 ...\n $ HBP     : num [1:658] 0 0 0 0 2 0 1 0 1 0 ...\n $ SH      : num [1:658] 0 0 0 2 0 1 0 20 4 1 ...\n $ SF      : num [1:658] 0 3 0 0 2 0 4 0 1 1 ...\n $ GIDP    : num [1:658] 0 5 1 0 5 0 4 14 0 2 ...\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df_1977)\n\n [1] \"playerID\" \"yearID\"   \"stint\"    \"teamID\"   \"lgID\"     \"G\"       \n [7] \"AB\"       \"R\"        \"H\"        \"X2B\"      \"X3B\"      \"HR\"      \n[13] \"RBI\"      \"SB\"       \"CS\"       \"BB\"       \"SO\"       \"IBB\"     \n[19] \"HBP\"      \"SH\"       \"SF\"       \"GIDP\""
  },
  {
    "objectID": "posts/04_Barplots/04_boxplots.html#a-starter-histogram",
    "href": "posts/04_Barplots/04_boxplots.html#a-starter-histogram",
    "title": "4: Barplots",
    "section": "A Starter Histogram",
    "text": "A Starter Histogram\nA histogram is used to visualize the distribution of a numerical variable.\n\ndf_1977 |>\n  ggplot(aes(x = H)) +\n  geom_histogram() +\n  labs(title = \"Hits\",\n       subtitle = \"1977 season\",\n       caption = \"Spark 01\",\n       x = \"hits\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "posts/04_Barplots/04_boxplots.html#colors",
    "href": "posts/04_Barplots/04_boxplots.html#colors",
    "title": "4: Barplots",
    "section": "Colors",
    "text": "Colors\nThis is a distribution the the number of clean hits by MLB batters in the 1977 season.\n\ndf_1977 |>\n  ggplot(aes(x = H)) +\n  geom_histogram(fill = \"blue\", color = \"black\") +\n  labs(title = \"Hits\",\n       subtitle = \"1977 season\",\n       caption = \"Spark 01\",\n       x = \"hits\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "posts/04_Barplots/04_boxplots.html#labels",
    "href": "posts/04_Barplots/04_boxplots.html#labels",
    "title": "4: Barplots",
    "section": "Label(s)",
    "text": "Label(s)\nGlenn Burke himself had 43 hits (playing a bench role).\n\ndf_1977 |>\n  ggplot(aes(x = H)) +\n  geom_histogram(fill = \"blue\", color = \"black\") +\n  geom_segment(aes(x = 93, y = 50, xend = 43, yend = 0),\n               arrow = arrow(), color = \"red\", size = 3) +\n  geom_label(aes(x = 43, y = 0, label = \"Glenn Burke\"),\n             nudge_x = 50, nudge_y = 50) +\n  labs(title = \"Hits\",\n       subtitle = \"1977 season\",\n       caption = \"Spark 01\",\n       x = \"hits\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nRemember that we can get also get a sense of a player comparing them to the summary statistics.\n\ndf_1977 |>\n  summarize(xbar = mean(H, na.rm = TRUE),\n            median = median(H, na.rm = TRUE),\n            sd = sd(H, na.rm = TRUE))\n\n# A tibble: 1 × 3\n   xbar median    sd\n  <dbl>  <dbl> <dbl>\n1  57.8     29  59.6"
  },
  {
    "objectID": "posts/04_Barplots/04_boxplots.html#cultural-icon",
    "href": "posts/04_Barplots/04_boxplots.html#cultural-icon",
    "title": "4: Barplots",
    "section": "Cultural Icon",
    "text": "Cultural Icon\n\n\n\nImage Credit: Business Insider"
  },
  {
    "objectID": "posts/04_Barplots/04_boxplots.html#look-at-the-data-1",
    "href": "posts/04_Barplots/04_boxplots.html#look-at-the-data-1",
    "title": "4: Barplots",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df_Burke)\n\n# A tibble: 5 × 22\n  playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n  <chr>      <dbl> <dbl> <chr>  <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 burkegl01   1976     1 LAN    NL       25    46     9    11     2     0     0\n2 burkegl01   1977     1 LAN    NL       83   169    16    43     8     0     1\n3 burkegl01   1978     1 LAN    NL       16    19     2     4     0     0     0\n4 burkegl01   1978     2 OAK    AL       78   200    19    47     6     1     1\n5 burkegl01   1979     1 OAK    AL       23    89     4    19     2     1     0\n# … with 10 more variables: RBI <dbl>, SB <dbl>, CS <dbl>, BB <dbl>, SO <dbl>,\n#   IBB <dbl>, HBP <dbl>, SH <dbl>, SF <dbl>, GIDP <dbl>\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df_Burke, give.attr = FALSE)\n\ntibble [5 × 22] (S3: tbl_df/tbl/data.frame)\n $ playerID: chr [1:5] \"burkegl01\" \"burkegl01\" \"burkegl01\" \"burkegl01\" ...\n $ yearID  : num [1:5] 1976 1977 1978 1978 1979\n $ stint   : num [1:5] 1 1 1 2 1\n $ teamID  : chr [1:5] \"LAN\" \"LAN\" \"LAN\" \"OAK\" ...\n $ lgID    : chr [1:5] \"NL\" \"NL\" \"NL\" \"AL\" ...\n $ G       : num [1:5] 25 83 16 78 23\n $ AB      : num [1:5] 46 169 19 200 89\n $ R       : num [1:5] 9 16 2 19 4\n $ H       : num [1:5] 11 43 4 47 19\n $ X2B     : num [1:5] 2 8 0 6 2\n $ X3B     : num [1:5] 0 0 0 1 1\n $ HR      : num [1:5] 0 1 0 1 0\n $ RBI     : num [1:5] 5 13 2 14 4\n $ SB      : num [1:5] 3 13 1 15 3\n $ CS      : num [1:5] 2 5 0 8 1\n $ BB      : num [1:5] 3 5 0 10 4\n $ SO      : num [1:5] 8 22 4 26 10\n $ IBB     : num [1:5] 0 1 0 1 1\n $ HBP     : num [1:5] 1 1 0 0 0\n $ SH      : num [1:5] 1 0 0 6 1\n $ SF      : num [1:5] 0 0 0 1 0\n $ GIDP    : num [1:5] 1 3 0 7 3\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df_Burke)\n\n [1] \"playerID\" \"yearID\"   \"stint\"    \"teamID\"   \"lgID\"     \"G\"       \n [7] \"AB\"       \"R\"        \"H\"        \"X2B\"      \"X3B\"      \"HR\"      \n[13] \"RBI\"      \"SB\"       \"CS\"       \"BB\"       \"SO\"       \"IBB\"     \n[19] \"HBP\"      \"SH\"       \"SF\"       \"GIDP\""
  },
  {
    "objectID": "posts/04_Barplots/04_boxplots.html#bar-plot-by-identity",
    "href": "posts/04_Barplots/04_boxplots.html#bar-plot-by-identity",
    "title": "4: Barplots",
    "section": "Bar Plot (by identity)",
    "text": "Bar Plot (by identity)\nBar plots are easy for readers to understand, but a little tricky to produce. We usually make bar plots with a categorical variable on the \\(x\\)-axis and a numerical variable on the \\(y\\)-axis.\nWhen we want to use the numbers from the data frame directly, be sure to specify the stat = \"identity\" parameter.\n\ndf_Burke |>\n  ggplot(aes(x = yearID, y = G, fill = teamID)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Glenn Burke: A Brief Time in the Major Leagues\",\n       subtitle = \"He spent seasons with the Dodgers and the Athletics\",\n       caption = \"Spark 01\",\n       x = \"season\", y = \"games played\")"
  },
  {
    "objectID": "posts/04_Barplots/04_boxplots.html#bar-plot-by-count",
    "href": "posts/04_Barplots/04_boxplots.html#bar-plot-by-count",
    "title": "4: Barplots",
    "section": "Bar Plot (by count)",
    "text": "Bar Plot (by count)\nWhen we want the bar plot to reflect the number of observations (i.e. number of rows) for each category, then use the stat = \"count\" parameter.\n\ndf_Burke |>\n  ggplot(aes(x = teamID, fill = teamID)) +\n  geom_bar(stat = \"count\") +\n  labs(title = \"Glenn Burke: A Brief Time in the Major Leagues\",\n       subtitle = \"He spent seasons with the Dodgers and the Athletics\",\n       caption = \"Spark 01\",\n       x = \"team\", y = \"seasons played\")"
  },
  {
    "objectID": "posts/04_Barplots/04_boxplots.html#epilogue",
    "href": "posts/04_Barplots/04_boxplots.html#epilogue",
    "title": "4: Barplots",
    "section": "Epilogue",
    "text": "Epilogue\n\n\n\n\n\nImage Credit: Washington Post\n\n\n\nGlenn Burke left MLB in 1980\n\nplayed in the Gay Olympics\ndealt with drug addiction\ndied of AIDS in 1995"
  },
  {
    "objectID": "posts/04_Barplots/04_boxplots.html#references",
    "href": "posts/04_Barplots/04_boxplots.html#references",
    "title": "4: Barplots",
    "section": "References",
    "text": "References\n\nLahman Data Package\nBaseball Reference\n“The trials of baseball’s first openly gay player, Glenn Burke, four decades ago” — Washington Post\n“Today is National High Five Day — this photo from 1977 shows the first ever high five” — Business Insider\nSingled Out by Andrew Maraniss"
  },
  {
    "objectID": "posts/04_Barplots/04_barplots.html",
    "href": "posts/04_Barplots/04_barplots.html",
    "title": "4: Barplots",
    "section": "",
    "text": "Glenn Burke was an outfielder with the 1977 National-League champion Dodgers. He was born in Oakland in 1952.\n\n\n\nImage credit: Washington Post\n\n\n\n\nThe tidyverse suite of packages are streamlined to make data science processes easier. We can load the packages with the library() command.\n\n# library(\"Lahman\") #baseball data set\nlibrary(\"readxl\")\nlibrary(\"tidyverse\")\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.1\n✔ readr   2.1.2     ✔ forcats 0.5.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n# subset of the Batting data in the Lahman database\n# df_Burke <- Batting |>\n  \n  # focus on Glenn Burke\n  # abbreviation found via playerInfo() helper function\n  # filter(playerID == \"burkegl01\")\n\n# df_1977 <- Batting |>\n  # filter(yearID == 1977) |>\n  # filter(H > 0) #to ease later histogram (remove players who had zero hits)\n\n# readr::write_csv(df_Burke, \"data_Burke.csv\")\n# readr::write_csv(df_1977, \"data_1977.csv\")\n\nToday’s data set comes from the Lahman package, which contains a lot of historical data about Major League Baseball."
  },
  {
    "objectID": "posts/04_Barplots/04_barplots.html#look-at-the-data",
    "href": "posts/04_Barplots/04_barplots.html#look-at-the-data",
    "title": "4: Barplots",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df_1977)\n\n# A tibble: 6 × 22\n  playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n  <chr>      <dbl> <dbl> <chr>  <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 adamsbo04   1977     1 DET    AL       15    24     2     6     1     0     2\n2 adamsgl01   1977     1 MIN    AL       95   269    32    91    17     0     6\n3 aikenwi01   1977     1 CAL    AL       42    91     5    18     4     0     0\n4 alcalsa01   1977     2 MON    NL       31    25     1     2     0     0     1\n5 alexaga01   1977     1 SFN    NL       51   119    17    36     4     2     5\n6 alexama01   1977     1 OAK    AL       90    42    24    10     1     0     0\n# … with 10 more variables: RBI <dbl>, SB <dbl>, CS <dbl>, BB <dbl>, SO <dbl>,\n#   IBB <dbl>, HBP <dbl>, SH <dbl>, SF <dbl>, GIDP <dbl>\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df_1977, give.attr = FALSE)\n\nspec_tbl_df [658 × 22] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ playerID: chr [1:658] \"adamsbo04\" \"adamsgl01\" \"aikenwi01\" \"alcalsa01\" ...\n $ yearID  : num [1:658] 1977 1977 1977 1977 1977 ...\n $ stint   : num [1:658] 1 1 1 2 1 1 1 1 1 1 ...\n $ teamID  : chr [1:658] \"DET\" \"MIN\" \"CAL\" \"MON\" ...\n $ lgID    : chr [1:658] \"AL\" \"AL\" \"AL\" \"NL\" ...\n $ G       : num [1:658] 15 95 42 31 51 90 54 155 69 22 ...\n $ AB      : num [1:658] 24 269 91 25 119 42 171 613 83 40 ...\n $ R       : num [1:658] 2 32 5 1 17 24 19 75 21 10 ...\n $ H       : num [1:658] 6 91 18 2 36 10 41 160 22 13 ...\n $ X2B     : num [1:658] 1 17 4 0 4 1 4 18 3 4 ...\n $ X3B     : num [1:658] 0 0 0 0 2 0 0 11 0 0 ...\n $ HR      : num [1:658] 2 6 0 1 5 0 5 2 1 1 ...\n $ RBI     : num [1:658] 2 49 6 2 20 2 31 43 11 4 ...\n $ SB      : num [1:658] 0 0 1 0 3 26 1 20 4 3 ...\n $ CS      : num [1:658] 0 2 2 0 1 14 3 9 3 3 ...\n $ BB      : num [1:658] 0 18 10 0 20 4 24 37 8 3 ...\n $ SO      : num [1:658] 5 30 23 13 33 6 36 114 13 4 ...\n $ IBB     : num [1:658] 0 3 2 0 2 0 0 1 0 0 ...\n $ HBP     : num [1:658] 0 0 0 0 2 0 1 0 1 0 ...\n $ SH      : num [1:658] 0 0 0 2 0 1 0 20 4 1 ...\n $ SF      : num [1:658] 0 3 0 0 2 0 4 0 1 1 ...\n $ GIDP    : num [1:658] 0 5 1 0 5 0 4 14 0 2 ...\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df_1977)\n\n [1] \"playerID\" \"yearID\"   \"stint\"    \"teamID\"   \"lgID\"     \"G\"       \n [7] \"AB\"       \"R\"        \"H\"        \"X2B\"      \"X3B\"      \"HR\"      \n[13] \"RBI\"      \"SB\"       \"CS\"       \"BB\"       \"SO\"       \"IBB\"     \n[19] \"HBP\"      \"SH\"       \"SF\"       \"GIDP\""
  },
  {
    "objectID": "posts/04_Barplots/04_barplots.html#a-starter-histogram",
    "href": "posts/04_Barplots/04_barplots.html#a-starter-histogram",
    "title": "4: Barplots",
    "section": "A Starter Histogram",
    "text": "A Starter Histogram\nA histogram is used to visualize the distribution of a numerical variable.\n\ndf_1977 |>\n  ggplot(aes(x = H)) +\n  geom_histogram() +\n  labs(title = \"Hits\",\n       subtitle = \"1977 season\",\n       caption = \"Spark 01\",\n       x = \"hits\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "posts/04_Barplots/04_barplots.html#colors",
    "href": "posts/04_Barplots/04_barplots.html#colors",
    "title": "4: Barplots",
    "section": "Colors",
    "text": "Colors\nThis is a distribution the the number of clean hits by MLB batters in the 1977 season.\n\ndf_1977 |>\n  ggplot(aes(x = H)) +\n  geom_histogram(fill = \"blue\", color = \"black\") +\n  labs(title = \"Hits\",\n       subtitle = \"1977 season\",\n       caption = \"Spark 01\",\n       x = \"hits\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "posts/04_Barplots/04_barplots.html#labels",
    "href": "posts/04_Barplots/04_barplots.html#labels",
    "title": "4: Barplots",
    "section": "Label(s)",
    "text": "Label(s)\nGlenn Burke himself had 43 hits (playing a bench role).\n\ndf_1977 |>\n  ggplot(aes(x = H)) +\n  geom_histogram(fill = \"blue\", color = \"black\") +\n  geom_segment(aes(x = 93, y = 50, xend = 43, yend = 0),\n               arrow = arrow(), color = \"red\", size = 3) +\n  geom_label(aes(x = 43, y = 0, label = \"Glenn Burke\"),\n             nudge_x = 50, nudge_y = 50) +\n  labs(title = \"Hits\",\n       subtitle = \"1977 season\",\n       caption = \"Spark 01\",\n       x = \"hits\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nRemember that we can get also get a sense of a player comparing them to the summary statistics.\n\ndf_1977 |>\n  summarize(xbar = mean(H, na.rm = TRUE),\n            median = median(H, na.rm = TRUE),\n            sd = sd(H, na.rm = TRUE))\n\n# A tibble: 1 × 3\n   xbar median    sd\n  <dbl>  <dbl> <dbl>\n1  57.8     29  59.6"
  },
  {
    "objectID": "posts/04_Barplots/04_barplots.html#cultural-icon",
    "href": "posts/04_Barplots/04_barplots.html#cultural-icon",
    "title": "4: Barplots",
    "section": "Cultural Icon",
    "text": "Cultural Icon\n\n\n\nImage Credit: Business Insider"
  },
  {
    "objectID": "posts/04_Barplots/04_barplots.html#look-at-the-data-1",
    "href": "posts/04_Barplots/04_barplots.html#look-at-the-data-1",
    "title": "4: Barplots",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df_Burke)\n\n# A tibble: 5 × 22\n  playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n  <chr>      <dbl> <dbl> <chr>  <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 burkegl01   1976     1 LAN    NL       25    46     9    11     2     0     0\n2 burkegl01   1977     1 LAN    NL       83   169    16    43     8     0     1\n3 burkegl01   1978     1 LAN    NL       16    19     2     4     0     0     0\n4 burkegl01   1978     2 OAK    AL       78   200    19    47     6     1     1\n5 burkegl01   1979     1 OAK    AL       23    89     4    19     2     1     0\n# … with 10 more variables: RBI <dbl>, SB <dbl>, CS <dbl>, BB <dbl>, SO <dbl>,\n#   IBB <dbl>, HBP <dbl>, SH <dbl>, SF <dbl>, GIDP <dbl>\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df_Burke, give.attr = FALSE)\n\ntibble [5 × 22] (S3: tbl_df/tbl/data.frame)\n $ playerID: chr [1:5] \"burkegl01\" \"burkegl01\" \"burkegl01\" \"burkegl01\" ...\n $ yearID  : num [1:5] 1976 1977 1978 1978 1979\n $ stint   : num [1:5] 1 1 1 2 1\n $ teamID  : chr [1:5] \"LAN\" \"LAN\" \"LAN\" \"OAK\" ...\n $ lgID    : chr [1:5] \"NL\" \"NL\" \"NL\" \"AL\" ...\n $ G       : num [1:5] 25 83 16 78 23\n $ AB      : num [1:5] 46 169 19 200 89\n $ R       : num [1:5] 9 16 2 19 4\n $ H       : num [1:5] 11 43 4 47 19\n $ X2B     : num [1:5] 2 8 0 6 2\n $ X3B     : num [1:5] 0 0 0 1 1\n $ HR      : num [1:5] 0 1 0 1 0\n $ RBI     : num [1:5] 5 13 2 14 4\n $ SB      : num [1:5] 3 13 1 15 3\n $ CS      : num [1:5] 2 5 0 8 1\n $ BB      : num [1:5] 3 5 0 10 4\n $ SO      : num [1:5] 8 22 4 26 10\n $ IBB     : num [1:5] 0 1 0 1 1\n $ HBP     : num [1:5] 1 1 0 0 0\n $ SH      : num [1:5] 1 0 0 6 1\n $ SF      : num [1:5] 0 0 0 1 0\n $ GIDP    : num [1:5] 1 3 0 7 3\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df_Burke)\n\n [1] \"playerID\" \"yearID\"   \"stint\"    \"teamID\"   \"lgID\"     \"G\"       \n [7] \"AB\"       \"R\"        \"H\"        \"X2B\"      \"X3B\"      \"HR\"      \n[13] \"RBI\"      \"SB\"       \"CS\"       \"BB\"       \"SO\"       \"IBB\"     \n[19] \"HBP\"      \"SH\"       \"SF\"       \"GIDP\""
  },
  {
    "objectID": "posts/04_Barplots/04_barplots.html#bar-plot-by-identity",
    "href": "posts/04_Barplots/04_barplots.html#bar-plot-by-identity",
    "title": "4: Barplots",
    "section": "Bar Plot (by identity)",
    "text": "Bar Plot (by identity)\nBar plots are easy for readers to understand, but a little tricky to produce. We usually make bar plots with a categorical variable on the \\(x\\)-axis and a numerical variable on the \\(y\\)-axis.\nWhen we want to use the numbers from the data frame directly, be sure to specify the stat = \"identity\" parameter.\n\ndf_Burke |>\n  ggplot(aes(x = yearID, y = G, fill = teamID)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Glenn Burke: A Brief Time in the Major Leagues\",\n       subtitle = \"He spent seasons with the Dodgers and the Athletics\",\n       caption = \"Spark 01\",\n       x = \"season\", y = \"games played\")"
  },
  {
    "objectID": "posts/04_Barplots/04_barplots.html#bar-plot-by-count",
    "href": "posts/04_Barplots/04_barplots.html#bar-plot-by-count",
    "title": "4: Barplots",
    "section": "Bar Plot (by count)",
    "text": "Bar Plot (by count)\nWhen we want the bar plot to reflect the number of observations (i.e. number of rows) for each category, then use the stat = \"count\" parameter.\n\ndf_Burke |>\n  ggplot(aes(x = teamID, fill = teamID)) +\n  geom_bar(stat = \"count\") +\n  labs(title = \"Glenn Burke: A Brief Time in the Major Leagues\",\n       subtitle = \"He spent seasons with the Dodgers and the Athletics\",\n       caption = \"Spark 01\",\n       x = \"team\", y = \"seasons played\")"
  },
  {
    "objectID": "posts/04_Barplots/04_barplots.html#epilogue",
    "href": "posts/04_Barplots/04_barplots.html#epilogue",
    "title": "4: Barplots",
    "section": "Epilogue",
    "text": "Epilogue\n\n\n\n\n\nImage Credit: Washington Post\n\n\n\nGlenn Burke left MLB in 1980\n\nplayed in the Gay Olympics\ndealt with drug addiction\ndied of AIDS in 1995"
  },
  {
    "objectID": "posts/04_Barplots/04_barplots.html#references",
    "href": "posts/04_Barplots/04_barplots.html#references",
    "title": "4: Barplots",
    "section": "References",
    "text": "References\n\nLahman Data Package\nBaseball Reference\n“The trials of baseball’s first openly gay player, Glenn Burke, four decades ago” — Washington Post\n“Today is National High Five Day — this photo from 1977 shows the first ever high five” — Business Insider\nSingled Out by Andrew Maraniss"
  },
  {
    "objectID": "posts/05_Scatterplots/05_scatterplots.html",
    "href": "posts/05_Scatterplots/05_scatterplots.html",
    "title": "5: Scatterplots",
    "section": "",
    "text": "The tidyverse suite of packages are streamlined to make data science processes easier. We can load the packages with the library() command.\n\nlibrary(\"Lahman\")\nlibrary(\"tidyverse\")\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.1\n✔ readr   2.1.2     ✔ forcats 0.5.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\n\ncorrelatedValues = function(x, r = 0.9){\n  r2 = r**2\n  ve = 1-r2\n  SD = sqrt(ve)\n  e  = rnorm(length(x), mean=0, sd=SD)\n  y  = r*x + e\n  return(y)\n}"
  },
  {
    "objectID": "posts/05_Scatterplots/05_scatterplots.html#look-at-the-data",
    "href": "posts/05_Scatterplots/05_scatterplots.html#look-at-the-data",
    "title": "5: Scatterplots",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df)\n\n# A tibble: 6 × 48\n  yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n   <dbl> <chr> <chr>  <chr>    <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>  <chr>\n1   1990 NL    ATL    ATL      W         6   162    81    65    97 N      <NA> \n2   1990 AL    BAL    BAL      E         5   161    80    76    85 N      <NA> \n3   1990 AL    BOS    BOS      E         1   162    81    88    74 Y      <NA> \n4   1990 AL    CAL    ANA      W         4   162    81    80    82 N      <NA> \n5   1990 AL    CHA    CHW      W         2   162    80    94    68 N      <NA> \n6   1990 NL    CHN    CHC      E         4   162    81    77    85 N      <NA> \n# … with 36 more variables: LgWin <chr>, WSWin <chr>, R <dbl>, AB <dbl>,\n#   H <dbl>, X2B <dbl>, X3B <dbl>, HR <dbl>, BB <dbl>, SO <dbl>, SB <dbl>,\n#   CS <dbl>, HBP <dbl>, SF <dbl>, RA <dbl>, ER <dbl>, ERA <dbl>, CG <dbl>,\n#   SHO <dbl>, SV <dbl>, IPouts <dbl>, HA <dbl>, HRA <dbl>, BBA <dbl>,\n#   SOA <dbl>, E <dbl>, DP <dbl>, FP <dbl>, name <chr>, park <chr>,\n#   attendance <dbl>, BPF <dbl>, PPF <dbl>, teamIDBR <chr>,\n#   teamIDlahman45 <chr>, teamIDretro <chr>\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df, give.attr = FALSE)\n\nspec_tbl_df [278 × 48] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ yearID        : num [1:278] 1990 1990 1990 1990 1990 1990 1990 1990 1990 1990 ...\n $ lgID          : chr [1:278] \"NL\" \"AL\" \"AL\" \"AL\" ...\n $ teamID        : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ franchID      : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"ANA\" ...\n $ divID         : chr [1:278] \"W\" \"E\" \"E\" \"W\" ...\n $ Rank          : num [1:278] 6 5 1 4 2 4 1 4 3 4 ...\n $ G             : num [1:278] 162 161 162 162 162 162 162 162 162 162 ...\n $ Ghome         : num [1:278] 81 80 81 81 80 81 81 81 81 81 ...\n $ W             : num [1:278] 65 76 88 80 94 77 91 77 79 75 ...\n $ L             : num [1:278] 97 85 74 82 68 85 71 85 83 87 ...\n $ DivWin        : chr [1:278] \"N\" \"N\" \"Y\" \"N\" ...\n $ WCWin         : chr [1:278] NA NA NA NA ...\n $ LgWin         : chr [1:278] \"N\" \"N\" \"N\" \"N\" ...\n $ WSWin         : chr [1:278] \"N\" \"N\" \"N\" \"N\" ...\n $ R             : num [1:278] 682 669 699 690 682 690 693 732 750 573 ...\n $ AB            : num [1:278] 5504 5410 5516 5570 5402 ...\n $ H             : num [1:278] 1376 1328 1502 1448 1393 ...\n $ X2B           : num [1:278] 263 234 298 237 251 240 284 266 241 209 ...\n $ X3B           : num [1:278] 26 22 31 27 44 36 40 41 32 32 ...\n $ HR            : num [1:278] 162 132 106 147 106 136 125 110 172 94 ...\n $ BB            : num [1:278] 473 660 598 566 478 406 466 458 634 548 ...\n $ SO            : num [1:278] 1010 962 795 1000 903 869 913 836 952 997 ...\n $ SB            : num [1:278] 92 94 53 69 140 151 166 107 82 179 ...\n $ CS            : num [1:278] 55 52 52 43 90 50 66 52 57 83 ...\n $ HBP           : num [1:278] 27 40 28 28 36 30 42 29 34 28 ...\n $ SF            : num [1:278] 31 41 44 45 47 51 42 61 41 41 ...\n $ RA            : num [1:278] 821 698 664 706 633 774 597 737 754 656 ...\n $ ER            : num [1:278] 727 644 596 613 581 695 549 676 697 581 ...\n $ ERA           : num [1:278] 4.58 4.04 3.72 3.79 3.61 4.34 3.39 4.26 4.39 3.61 ...\n $ CG            : num [1:278] 17 10 15 21 17 13 14 12 15 12 ...\n $ SHO           : num [1:278] 8 5 13 13 10 7 12 10 12 6 ...\n $ SV            : num [1:278] 30 43 44 42 68 42 50 47 45 37 ...\n $ IPouts        : num [1:278] 4289 4306 4326 4362 4348 ...\n $ HA            : num [1:278] 1527 1445 1439 1482 1313 ...\n $ HRA           : num [1:278] 128 161 92 106 106 121 124 163 154 130 ...\n $ BBA           : num [1:278] 579 537 519 544 548 572 543 518 661 496 ...\n $ SOA           : num [1:278] 938 776 997 944 914 ...\n $ E             : num [1:278] 158 93 123 142 124 124 102 117 131 131 ...\n $ DP            : num [1:278] 133 151 154 186 169 136 126 146 178 124 ...\n $ FP            : num [1:278] 0.974 0.985 0.98 0.978 0.98 0.98 0.983 0.981 0.979 0.978 ...\n $ name          : chr [1:278] \"Atlanta Braves\" \"Baltimore Orioles\" \"Boston Red Sox\" \"California Angels\" ...\n $ park          : chr [1:278] \"Atlanta-Fulton County Stadium\" \"Memorial Stadium\" \"Fenway Park II\" \"Anaheim Stadium\" ...\n $ attendance    : num [1:278] 980129 2415189 2528986 2555688 2002357 ...\n $ BPF           : num [1:278] 105 97 105 97 98 108 105 100 101 97 ...\n $ PPF           : num [1:278] 106 98 105 97 98 108 105 100 102 98 ...\n $ teamIDBR      : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ teamIDlahman45: chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ teamIDretro   : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df)\n\n [1] \"yearID\"         \"lgID\"           \"teamID\"         \"franchID\"      \n [5] \"divID\"          \"Rank\"           \"G\"              \"Ghome\"         \n [9] \"W\"              \"L\"              \"DivWin\"         \"WCWin\"         \n[13] \"LgWin\"          \"WSWin\"          \"R\"              \"AB\"            \n[17] \"H\"              \"X2B\"            \"X3B\"            \"HR\"            \n[21] \"BB\"             \"SO\"             \"SB\"             \"CS\"            \n[25] \"HBP\"            \"SF\"             \"RA\"             \"ER\"            \n[29] \"ERA\"            \"CG\"             \"SHO\"            \"SV\"            \n[33] \"IPouts\"         \"HA\"             \"HRA\"            \"BBA\"           \n[37] \"SOA\"            \"E\"              \"DP\"             \"FP\"            \n[41] \"name\"           \"park\"           \"attendance\"     \"BPF\"           \n[45] \"PPF\"            \"teamIDBR\"       \"teamIDlahman45\" \"teamIDretro\""
  },
  {
    "objectID": "posts/05_Scatterplots/05_scatterplots.html#examples",
    "href": "posts/05_Scatterplots/05_scatterplots.html#examples",
    "title": "5: Scatterplots",
    "section": "Examples",
    "text": "Examples\n\n12345\n\n\n\nx <- rnorm(100, mean = 0, sd = 1)\ny <- correlatedValues(x, r = -0.9)\n\ncor_value <- cor(x,y, use = \"pairwise.complete.obs\")\n\ndf_for_graph <- data.frame(x,y)\ndf_for_graph |>\n  ggplot(aes(x = x, y = y)) +\n  geom_point() +\n  labs(title = \"Correlation Example\",\n       subtitle = paste0(\"r = \", round(cor_value, 4), \n                         \", strongly and negatively correlated\"),\n       caption = \"Spark 01\")\n\n\n\n\n\n\n\nx <- rnorm(100, mean = 0, sd = 1)\ny <- correlatedValues(x, r = -0.5)\n\ncor_value <- cor(x,y, use = \"pairwise.complete.obs\")\n\ndf_for_graph <- data.frame(x,y)\ndf_for_graph |>\n  ggplot(aes(x = x, y = y)) +\n  geom_point() +\n  labs(title = \"Correlation Example\",\n       subtitle = paste0(\"r = \", round(cor_value, 4), \n                         \", slightly and negatively correlated\"),\n       caption = \"Spark 01\")\n\n\n\n\n\n\n\nx <- rnorm(100, mean = 0, sd = 1)\ny <- correlatedValues(x, r = 0)\n\ncor_value <- cor(x,y, use = \"pairwise.complete.obs\")\n\ndf_for_graph <- data.frame(x,y)\ndf_for_graph |>\n  ggplot(aes(x = x, y = y)) +\n  geom_point() +\n  labs(title = \"Correlation Example\",\n       subtitle = paste0(\"r = \", round(cor_value, 4), \n                         \", virtually uncorrelated\"),\n       caption = \"Spark 01\")\n\n\n\n\n\n\n\nx <- rnorm(100, mean = 0, sd = 1)\ny <- correlatedValues(x, r = 0.5)\n\ncor_value <- cor(x,y, use = \"pairwise.complete.obs\")\n\ndf_for_graph <- data.frame(x,y)\ndf_for_graph |>\n  ggplot(aes(x = x, y = y)) +\n  geom_point() +\n  labs(title = \"Correlation Example\",\n       subtitle = paste0(\"r = \", round(cor_value, 4), \n                         \", slightly and positively correlated\"),\n       caption = \"Spark 01\")\n\n\n\n\n\n\n\nx <- rnorm(100, mean = 0, sd = 1)\ny <- correlatedValues(x, r = 0.9)\n\ncor_value <- cor(x,y, use = \"pairwise.complete.obs\")\n\ndf_for_graph <- data.frame(x,y)\ndf_for_graph |>\n  ggplot(aes(x = x, y = y)) +\n  geom_point() +\n  labs(title = \"Correlation Example\",\n       subtitle = paste0(\"r = \", round(cor_value, 4), \n                         \", strongly and positively correlated\"),\n       caption = \"Spark 01\")"
  },
  {
    "objectID": "posts/05_Scatterplots/05_scatterplots.html#adding-correlation-to-visualization",
    "href": "posts/05_Scatterplots/05_scatterplots.html#adding-correlation-to-visualization",
    "title": "5: Scatterplots",
    "section": "Adding Correlation to Visualization",
    "text": "Adding Correlation to Visualization\n\ncor_value <- df |>\n  summarize(r = cor(R, W, use = \"pairwise.complete.obs\")) |>\n  unlist()\n\ndf |>\n  ggplot(aes(x = R, y = W)) +\n  geom_point(color = \"blue\") + #makes the scatterplot\n  labs(title = \"MLB Data\",\n       subtitle = paste0(\"r = \", round(cor_value, 4), \n                         \", slightly and positively correlated\"),\n       caption = \"seasons 1990 to 1999\",\n       x = \"runs scored\",\n       y = \"wins\")"
  },
  {
    "objectID": "posts/06_Regression/06_regression.html",
    "href": "posts/06_Regression/06_regression.html",
    "title": "6: Linear Regression",
    "section": "",
    "text": "The tidyverse suite of packages are streamlined to make data science processes easier. We can load the packages with the library() command.\n\nlibrary(\"Lahman\")\nlibrary(\"tidyverse\")\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.1\n✔ readr   2.1.2     ✔ forcats 0.5.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\n\ncorrelatedValues = function(x, r = 0.9){\n  r2 = r**2\n  ve = 1-r2\n  SD = sqrt(ve)\n  e  = rnorm(length(x), mean=0, sd=SD)\n  y  = r*x + e\n  return(y)\n}"
  },
  {
    "objectID": "posts/06_Regression/06_regression.html#look-at-the-data",
    "href": "posts/06_Regression/06_regression.html#look-at-the-data",
    "title": "6: Linear Regression",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df)\n\n# A tibble: 6 × 48\n  yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n   <dbl> <chr> <chr>  <chr>    <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>  <chr>\n1   1990 NL    ATL    ATL      W         6   162    81    65    97 N      <NA> \n2   1990 AL    BAL    BAL      E         5   161    80    76    85 N      <NA> \n3   1990 AL    BOS    BOS      E         1   162    81    88    74 Y      <NA> \n4   1990 AL    CAL    ANA      W         4   162    81    80    82 N      <NA> \n5   1990 AL    CHA    CHW      W         2   162    80    94    68 N      <NA> \n6   1990 NL    CHN    CHC      E         4   162    81    77    85 N      <NA> \n# … with 36 more variables: LgWin <chr>, WSWin <chr>, R <dbl>, AB <dbl>,\n#   H <dbl>, X2B <dbl>, X3B <dbl>, HR <dbl>, BB <dbl>, SO <dbl>, SB <dbl>,\n#   CS <dbl>, HBP <dbl>, SF <dbl>, RA <dbl>, ER <dbl>, ERA <dbl>, CG <dbl>,\n#   SHO <dbl>, SV <dbl>, IPouts <dbl>, HA <dbl>, HRA <dbl>, BBA <dbl>,\n#   SOA <dbl>, E <dbl>, DP <dbl>, FP <dbl>, name <chr>, park <chr>,\n#   attendance <dbl>, BPF <dbl>, PPF <dbl>, teamIDBR <chr>,\n#   teamIDlahman45 <chr>, teamIDretro <chr>\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df, give.attr = FALSE)\n\nspec_tbl_df [278 × 48] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ yearID        : num [1:278] 1990 1990 1990 1990 1990 1990 1990 1990 1990 1990 ...\n $ lgID          : chr [1:278] \"NL\" \"AL\" \"AL\" \"AL\" ...\n $ teamID        : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ franchID      : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"ANA\" ...\n $ divID         : chr [1:278] \"W\" \"E\" \"E\" \"W\" ...\n $ Rank          : num [1:278] 6 5 1 4 2 4 1 4 3 4 ...\n $ G             : num [1:278] 162 161 162 162 162 162 162 162 162 162 ...\n $ Ghome         : num [1:278] 81 80 81 81 80 81 81 81 81 81 ...\n $ W             : num [1:278] 65 76 88 80 94 77 91 77 79 75 ...\n $ L             : num [1:278] 97 85 74 82 68 85 71 85 83 87 ...\n $ DivWin        : chr [1:278] \"N\" \"N\" \"Y\" \"N\" ...\n $ WCWin         : chr [1:278] NA NA NA NA ...\n $ LgWin         : chr [1:278] \"N\" \"N\" \"N\" \"N\" ...\n $ WSWin         : chr [1:278] \"N\" \"N\" \"N\" \"N\" ...\n $ R             : num [1:278] 682 669 699 690 682 690 693 732 750 573 ...\n $ AB            : num [1:278] 5504 5410 5516 5570 5402 ...\n $ H             : num [1:278] 1376 1328 1502 1448 1393 ...\n $ X2B           : num [1:278] 263 234 298 237 251 240 284 266 241 209 ...\n $ X3B           : num [1:278] 26 22 31 27 44 36 40 41 32 32 ...\n $ HR            : num [1:278] 162 132 106 147 106 136 125 110 172 94 ...\n $ BB            : num [1:278] 473 660 598 566 478 406 466 458 634 548 ...\n $ SO            : num [1:278] 1010 962 795 1000 903 869 913 836 952 997 ...\n $ SB            : num [1:278] 92 94 53 69 140 151 166 107 82 179 ...\n $ CS            : num [1:278] 55 52 52 43 90 50 66 52 57 83 ...\n $ HBP           : num [1:278] 27 40 28 28 36 30 42 29 34 28 ...\n $ SF            : num [1:278] 31 41 44 45 47 51 42 61 41 41 ...\n $ RA            : num [1:278] 821 698 664 706 633 774 597 737 754 656 ...\n $ ER            : num [1:278] 727 644 596 613 581 695 549 676 697 581 ...\n $ ERA           : num [1:278] 4.58 4.04 3.72 3.79 3.61 4.34 3.39 4.26 4.39 3.61 ...\n $ CG            : num [1:278] 17 10 15 21 17 13 14 12 15 12 ...\n $ SHO           : num [1:278] 8 5 13 13 10 7 12 10 12 6 ...\n $ SV            : num [1:278] 30 43 44 42 68 42 50 47 45 37 ...\n $ IPouts        : num [1:278] 4289 4306 4326 4362 4348 ...\n $ HA            : num [1:278] 1527 1445 1439 1482 1313 ...\n $ HRA           : num [1:278] 128 161 92 106 106 121 124 163 154 130 ...\n $ BBA           : num [1:278] 579 537 519 544 548 572 543 518 661 496 ...\n $ SOA           : num [1:278] 938 776 997 944 914 ...\n $ E             : num [1:278] 158 93 123 142 124 124 102 117 131 131 ...\n $ DP            : num [1:278] 133 151 154 186 169 136 126 146 178 124 ...\n $ FP            : num [1:278] 0.974 0.985 0.98 0.978 0.98 0.98 0.983 0.981 0.979 0.978 ...\n $ name          : chr [1:278] \"Atlanta Braves\" \"Baltimore Orioles\" \"Boston Red Sox\" \"California Angels\" ...\n $ park          : chr [1:278] \"Atlanta-Fulton County Stadium\" \"Memorial Stadium\" \"Fenway Park II\" \"Anaheim Stadium\" ...\n $ attendance    : num [1:278] 980129 2415189 2528986 2555688 2002357 ...\n $ BPF           : num [1:278] 105 97 105 97 98 108 105 100 101 97 ...\n $ PPF           : num [1:278] 106 98 105 97 98 108 105 100 102 98 ...\n $ teamIDBR      : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ teamIDlahman45: chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ teamIDretro   : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df)\n\n [1] \"yearID\"         \"lgID\"           \"teamID\"         \"franchID\"      \n [5] \"divID\"          \"Rank\"           \"G\"              \"Ghome\"         \n [9] \"W\"              \"L\"              \"DivWin\"         \"WCWin\"         \n[13] \"LgWin\"          \"WSWin\"          \"R\"              \"AB\"            \n[17] \"H\"              \"X2B\"            \"X3B\"            \"HR\"            \n[21] \"BB\"             \"SO\"             \"SB\"             \"CS\"            \n[25] \"HBP\"            \"SF\"             \"RA\"             \"ER\"            \n[29] \"ERA\"            \"CG\"             \"SHO\"            \"SV\"            \n[33] \"IPouts\"         \"HA\"             \"HRA\"            \"BBA\"           \n[37] \"SOA\"            \"E\"              \"DP\"             \"FP\"            \n[41] \"name\"           \"park\"           \"attendance\"     \"BPF\"           \n[45] \"PPF\"            \"teamIDBR\"       \"teamIDlahman45\" \"teamIDretro\""
  },
  {
    "objectID": "posts/07_WAR/07_WAR.html",
    "href": "posts/07_WAR/07_WAR.html",
    "title": "7: WAR",
    "section": "",
    "text": "“As originally defined by Bill James in 1980, sabermetrics is ‘the search for objective knowledge about baseball.’ James coined the phrase in part to honor the Society for American Baseball Research.”\n\n\n\n\nBill James"
  },
  {
    "objectID": "posts/07_WAR/07_WAR.html#box-scores",
    "href": "posts/07_WAR/07_WAR.html#box-scores",
    "title": "7: WAR",
    "section": "Box Scores",
    "text": "Box Scores\n\n\n\nBox Score in a Newspaper"
  },
  {
    "objectID": "posts/07_WAR/07_WAR.html#war",
    "href": "posts/07_WAR/07_WAR.html#war",
    "title": "7: WAR",
    "section": "WAR",
    "text": "WAR\n\n\n\n\n\n\nWAR\n\n\n\nWAR (wins above replacement) gives an analyst a sense of how much a player contributes to the team versus a replacement-level player.\n\n\n\n\n\n\n\n\nTwo Types of WAR\n\n\n\nThere are two main sources that calculate WAR, but with different formulas:\n\nBaseball Reference\nFanGraphs"
  },
  {
    "objectID": "posts/07_WAR/07_WAR.html#bwar",
    "href": "posts/07_WAR/07_WAR.html#bwar",
    "title": "7: WAR",
    "section": "bWAR",
    "text": "bWAR\nThe WAR calculation over at Baseball Reference is called bWAR, and the overall scheme is\n\\[bWar = (P_{\\text{runs}} - A_{\\text{runs}}) + (A_{\\text{runs}} - R_{\\text{runs}})\\]\nwhose terms are computed with factors such as\n\nbatting runs\nbaserunning runs\nruns added or lost due to grounding into double plays\nfielding runs\npositional adjustment runs\n\nThese factors are compared to the league average where a value of 0 represents an average player.\n\n\n\n\n\n\nwOBA\n\n\n\n\n\nBatting runs depends on weighted runs above average\n\\[wRAA = \\frac{wOBA - 0.320}{1.25}*(AB + BB + HBP + SF + SH)\\]\nwhere\n\\[wOBA = \\frac{ \\alpha_{1}*uBB + \\alpha_{2}*HBP + \\alpha_{3}*1B + \\alpha_{4}*2B + \\alpha_{5}*3B + \\alpha_{6}*HR + \\alpha_{7}*SB - \\alpha_{8}*CS }{ AB + BB - IBB + HBP + SF }\\]"
  },
  {
    "objectID": "posts/07_WAR/07_WAR.html#fwar",
    "href": "posts/07_WAR/07_WAR.html#fwar",
    "title": "7: WAR",
    "section": "fWAR",
    "text": "fWAR\nThe FanGraphs formula for position players involves offense, defense, and baserunning.\n\\[fWAR = wRAA + UZR + position + \\frac{20}{600}*PA\\]\n\nruns above average\nultimate zone rating\nultimate base running\npark factors"
  },
  {
    "objectID": "posts/07_WAR/07_WAR.html#comparing-current-players",
    "href": "posts/07_WAR/07_WAR.html#comparing-current-players",
    "title": "7: WAR",
    "section": "Comparing Current Players",
    "text": "Comparing Current Players\n\n\nAaron Judge\n\nbWAR: 10.6\nfWAR: 11.4\n\n\n\nShohei Ohtani\n\nbWAR: 9.6\nfWAR: 9.5\n\n\n\nSandy Alcantara\n\nbWAR: 8.1\nfWAR: 5.7"
  },
  {
    "objectID": "posts/07_WAR/07_WAR.html#comparing-careers",
    "href": "posts/07_WAR/07_WAR.html#comparing-careers",
    "title": "7: WAR",
    "section": "Comparing Careers",
    "text": "Comparing Careers\n\n\nAaron Judge\n\nbWAR: 36.9\nfWAR: 36.5\n\n\n\nShohei Ohtani\n\nbWAR: 24.7\nfWAR: 13.3\n\n\n\nSandy Alcantara\n\nbWAR: 16.7\nfWAR: 13.2"
  },
  {
    "objectID": "posts/07_WAR/07_WAR.html#references",
    "href": "posts/07_WAR/07_WAR.html#references",
    "title": "7: WAR",
    "section": "References",
    "text": "References\n\nhttps://www.baseball-reference.com/about/war_explained.shtml\nhttps://en.wikipedia.org/wiki/Box_score_(baseball)\nhttps://www.fangraphs.com/leaders/war\nhttps://sabr.org/sabermetrics\nhttps://en.wikipedia.org/wiki/Wins_Above_Replacement"
  },
  {
    "objectID": "posts/08_Odds/08_Odds.html",
    "href": "posts/08_Odds/08_Odds.html",
    "title": "8: Odds",
    "section": "",
    "text": "The odds that an event occurs with probability \\(p\\) (\\(0 \\leq p \\leq 1\\)) is\n\\[\\text{odds = } \\frac{p}{1-p}\\]\nIn gambling, we often see moneyline odds (AKA American odds) per $100 bet. For example,\n\nodds: 4 to 1\nmoneyline odds: +400\ni.e. a $100 bet could win $400"
  },
  {
    "objectID": "posts/08_Odds/08_Odds.html#todays-moneyline-odds",
    "href": "posts/08_Odds/08_Odds.html#todays-moneyline-odds",
    "title": "8: Odds",
    "section": "Today’s Moneyline Odds",
    "text": "Today’s Moneyline Odds\nBetMGM is the official gambling partner of Major League Baseball"
  },
  {
    "objectID": "posts/08_Odds/08_Odds.html#world-series-odds",
    "href": "posts/08_Odds/08_Odds.html#world-series-odds",
    "title": "8: Odds",
    "section": "World Series Odds",
    "text": "World Series Odds\nWebsites like VegasInsider present futures."
  },
  {
    "objectID": "posts/08_Odds/08_Odds.html#black-sox",
    "href": "posts/08_Odds/08_Odds.html#black-sox",
    "title": "8: Odds",
    "section": "Black Sox",
    "text": "Black Sox\nIn 1919, eight players of the Chicago White Sox were accusing of throwing games, including the World Series.\n\n\n\nBlack Sox Scandal"
  },
  {
    "objectID": "posts/08_Odds/08_Odds.html#pete-rose",
    "href": "posts/08_Odds/08_Odds.html#pete-rose",
    "title": "8: Odds",
    "section": "Pete Rose",
    "text": "Pete Rose\nIn 1986, Pete Rose—the all-time MLB leader in hits and manager of the Cincinnati Reds—was accused to betting on their own baseball games.\n\nbanned from MLB\nnot reinstated; not in the Hall of Fame\n\n\n\n\nPete Rose"
  },
  {
    "objectID": "posts/08_Odds/08_Odds.html#presence",
    "href": "posts/08_Odds/08_Odds.html#presence",
    "title": "8: Odds",
    "section": "Presence",
    "text": "Presence\nHere is a map of online gambling in the United States"
  },
  {
    "objectID": "posts/08_Odds/08_Odds.html#references",
    "href": "posts/08_Odds/08_Odds.html#references",
    "title": "8: Odds",
    "section": "References",
    "text": "References\n\nBetMGM — official gambling partner of MLB\nOdds Wikipedia article\nOddshark\nVegasInsider"
  },
  {
    "objectID": "posts/09_Determination/09_determination.html",
    "href": "posts/09_Determination/09_determination.html",
    "title": "9: Coefficient of Determination",
    "section": "",
    "text": "The tidyverse suite of packages are streamlined to make data science processes easier. We can load the packages with the library() command.\n\nlibrary(\"Lahman\")\nlibrary(\"tidyverse\")\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.1\n✔ readr   2.1.2     ✔ forcats 0.5.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\n\ncorrelatedValues = function(x, r = 0.9){\n  r2 = r**2\n  ve = 1-r2\n  SD = sqrt(ve)\n  e  = rnorm(length(x), mean=0, sd=SD)\n  y  = r*x + e\n  return(y)\n}"
  },
  {
    "objectID": "posts/09_Determination/09_determination.html#look-at-the-data",
    "href": "posts/09_Determination/09_determination.html#look-at-the-data",
    "title": "9: Coefficient of Determination",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df)\n\n# A tibble: 6 × 48\n  yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n   <dbl> <chr> <chr>  <chr>    <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>  <chr>\n1   1990 NL    ATL    ATL      W         6   162    81    65    97 N      <NA> \n2   1990 AL    BAL    BAL      E         5   161    80    76    85 N      <NA> \n3   1990 AL    BOS    BOS      E         1   162    81    88    74 Y      <NA> \n4   1990 AL    CAL    ANA      W         4   162    81    80    82 N      <NA> \n5   1990 AL    CHA    CHW      W         2   162    80    94    68 N      <NA> \n6   1990 NL    CHN    CHC      E         4   162    81    77    85 N      <NA> \n# … with 36 more variables: LgWin <chr>, WSWin <chr>, R <dbl>, AB <dbl>,\n#   H <dbl>, X2B <dbl>, X3B <dbl>, HR <dbl>, BB <dbl>, SO <dbl>, SB <dbl>,\n#   CS <dbl>, HBP <dbl>, SF <dbl>, RA <dbl>, ER <dbl>, ERA <dbl>, CG <dbl>,\n#   SHO <dbl>, SV <dbl>, IPouts <dbl>, HA <dbl>, HRA <dbl>, BBA <dbl>,\n#   SOA <dbl>, E <dbl>, DP <dbl>, FP <dbl>, name <chr>, park <chr>,\n#   attendance <dbl>, BPF <dbl>, PPF <dbl>, teamIDBR <chr>,\n#   teamIDlahman45 <chr>, teamIDretro <chr>\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df, give.attr = FALSE)\n\nspec_tbl_df [278 × 48] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ yearID        : num [1:278] 1990 1990 1990 1990 1990 1990 1990 1990 1990 1990 ...\n $ lgID          : chr [1:278] \"NL\" \"AL\" \"AL\" \"AL\" ...\n $ teamID        : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ franchID      : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"ANA\" ...\n $ divID         : chr [1:278] \"W\" \"E\" \"E\" \"W\" ...\n $ Rank          : num [1:278] 6 5 1 4 2 4 1 4 3 4 ...\n $ G             : num [1:278] 162 161 162 162 162 162 162 162 162 162 ...\n $ Ghome         : num [1:278] 81 80 81 81 80 81 81 81 81 81 ...\n $ W             : num [1:278] 65 76 88 80 94 77 91 77 79 75 ...\n $ L             : num [1:278] 97 85 74 82 68 85 71 85 83 87 ...\n $ DivWin        : chr [1:278] \"N\" \"N\" \"Y\" \"N\" ...\n $ WCWin         : chr [1:278] NA NA NA NA ...\n $ LgWin         : chr [1:278] \"N\" \"N\" \"N\" \"N\" ...\n $ WSWin         : chr [1:278] \"N\" \"N\" \"N\" \"N\" ...\n $ R             : num [1:278] 682 669 699 690 682 690 693 732 750 573 ...\n $ AB            : num [1:278] 5504 5410 5516 5570 5402 ...\n $ H             : num [1:278] 1376 1328 1502 1448 1393 ...\n $ X2B           : num [1:278] 263 234 298 237 251 240 284 266 241 209 ...\n $ X3B           : num [1:278] 26 22 31 27 44 36 40 41 32 32 ...\n $ HR            : num [1:278] 162 132 106 147 106 136 125 110 172 94 ...\n $ BB            : num [1:278] 473 660 598 566 478 406 466 458 634 548 ...\n $ SO            : num [1:278] 1010 962 795 1000 903 869 913 836 952 997 ...\n $ SB            : num [1:278] 92 94 53 69 140 151 166 107 82 179 ...\n $ CS            : num [1:278] 55 52 52 43 90 50 66 52 57 83 ...\n $ HBP           : num [1:278] 27 40 28 28 36 30 42 29 34 28 ...\n $ SF            : num [1:278] 31 41 44 45 47 51 42 61 41 41 ...\n $ RA            : num [1:278] 821 698 664 706 633 774 597 737 754 656 ...\n $ ER            : num [1:278] 727 644 596 613 581 695 549 676 697 581 ...\n $ ERA           : num [1:278] 4.58 4.04 3.72 3.79 3.61 4.34 3.39 4.26 4.39 3.61 ...\n $ CG            : num [1:278] 17 10 15 21 17 13 14 12 15 12 ...\n $ SHO           : num [1:278] 8 5 13 13 10 7 12 10 12 6 ...\n $ SV            : num [1:278] 30 43 44 42 68 42 50 47 45 37 ...\n $ IPouts        : num [1:278] 4289 4306 4326 4362 4348 ...\n $ HA            : num [1:278] 1527 1445 1439 1482 1313 ...\n $ HRA           : num [1:278] 128 161 92 106 106 121 124 163 154 130 ...\n $ BBA           : num [1:278] 579 537 519 544 548 572 543 518 661 496 ...\n $ SOA           : num [1:278] 938 776 997 944 914 ...\n $ E             : num [1:278] 158 93 123 142 124 124 102 117 131 131 ...\n $ DP            : num [1:278] 133 151 154 186 169 136 126 146 178 124 ...\n $ FP            : num [1:278] 0.974 0.985 0.98 0.978 0.98 0.98 0.983 0.981 0.979 0.978 ...\n $ name          : chr [1:278] \"Atlanta Braves\" \"Baltimore Orioles\" \"Boston Red Sox\" \"California Angels\" ...\n $ park          : chr [1:278] \"Atlanta-Fulton County Stadium\" \"Memorial Stadium\" \"Fenway Park II\" \"Anaheim Stadium\" ...\n $ attendance    : num [1:278] 980129 2415189 2528986 2555688 2002357 ...\n $ BPF           : num [1:278] 105 97 105 97 98 108 105 100 101 97 ...\n $ PPF           : num [1:278] 106 98 105 97 98 108 105 100 102 98 ...\n $ teamIDBR      : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ teamIDlahman45: chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ teamIDretro   : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ..."
  },
  {
    "objectID": "posts/09_Determination/09_determination.html#coefficient-of-determination",
    "href": "posts/09_Determination/09_determination.html#coefficient-of-determination",
    "title": "9: Coefficient of Determination",
    "section": "Coefficient of Determination",
    "text": "Coefficient of Determination\n\\[R^{2} = \\frac{\\text{explained variation}}{\\text{overall variation}}\\]\n\nfor linear regression, \\(R^{2}\\) is literally the square of the correlation coefficient \\(r\\)\nwant more “explained variation”, so larger numbers are better. Suggested interpretation:\n\nno effect: \\(0 < R^{2} < 0.4\\)\nmild effect: \\(0.4 < R^{2} < 0.7\\)\nlarge effect: \\(0.7 < R^{2} < 1.0\\)"
  },
  {
    "objectID": "posts/09_Determination/09_determination.html#custom-variables",
    "href": "posts/09_Determination/09_determination.html#custom-variables",
    "title": "9: Coefficient of Determination",
    "section": "Custom Variables",
    "text": "Custom Variables\n\\[BA = \\frac{H}{AB}\\]\n\\[OBP = \\frac{H + BB + HBP}{AB}\\]\n\\[SLG = \\frac{H + 2B + 2*3B + 3*HR}{AB}\\]\n\\[OPS = OBP + SLG\\]\n\ndf <- df |>\n  mutate(BA = H/AB,       #batting average\n         OBP = (H + BB + HBP)/AB, #on-base percentage\n         SLG = (H + X2B + 2*X3B + 3*HR)/AB, #slugging percentage\n         OPS = OBP + SLG) #on-base plus slugging"
  },
  {
    "objectID": "posts/10_Scandal/10_Scandal.html",
    "href": "posts/10_Scandal/10_Scandal.html",
    "title": "10: Scandals",
    "section": "",
    "text": "image source: NBC Sports\n\n\n\nThe 2017 Astros won the World Series\nWins (out of 162 games):\n\n2011: 56\n2012: 55\n2013: 51\n2014: 70\n2015: 86\n2016: 84\n2017: 101"
  },
  {
    "objectID": "posts/10_Scandal/10_Scandal.html#strikeout-reduction",
    "href": "posts/10_Scandal/10_Scandal.html#strikeout-reduction",
    "title": "10: Scandals",
    "section": "Strikeout Reduction",
    "text": "Strikeout Reduction\n\n\n\n\n\nimage source: DRaysBay\n\n\n\nThe 2017 Astros won the World Series\nTeam strikeouts (Astros’ hitters):\n\n2011: 1164\n2012: 1365\n2013: 1535\n2014: 1442\n2015: 1392\n2016: 1452\n2017: 1087"
  },
  {
    "objectID": "posts/10_Scandal/10_Scandal.html#mike-fiers",
    "href": "posts/10_Scandal/10_Scandal.html#mike-fiers",
    "title": "10: Scandals",
    "section": "Mike Fiers",
    "text": "Mike Fiers\n\n\n\n\n\nimage source: WhiteCleatBeat\n\n\n\n“Mike Fiers Admits Astros Stole Signs Electronically During 2017 MLB Season” — Bleacher Report, November, 2019\n\n2011 - 2015: Milwaukee\n2015 - 2018: Houston\n2018 - 2019: Detroit\n2019 - 2021: Oakland\n\nHouston was also accused of cheating during the 2018 and 2019 playoffs."
  },
  {
    "objectID": "posts/10_Scandal/10_Scandal.html#danny-farquhar",
    "href": "posts/10_Scandal/10_Scandal.html#danny-farquhar",
    "title": "10: Scandals",
    "section": "Danny Farquhar",
    "text": "Danny Farquhar\n\n\n\n\n\nimage source: CBS Sports\n\n\n\n“there was a banging from the dugout, almost like a bat hitting the bat rack every time a changeup signal got put down. After the third one, I stepped off. I was throwing some really good changeups and they were getting fouled off. After the third bang, I stepped off.” — referring to a White Sox at Astros game on September 21, 2017\nJomboy Media breakdown"
  },
  {
    "objectID": "posts/10_Scandal/10_Scandal.html#fallout",
    "href": "posts/10_Scandal/10_Scandal.html#fallout",
    "title": "10: Scandals",
    "section": "Fallout",
    "text": "Fallout\n\n“Manager AJ Hinch and general manager Jeff Luhnow were suspended for a year by Major League Baseball”\n“The Astros were fined $5 million … They also will forfeit their first- and second-round picks in the 2020 and 2021 drafts.”\nInterviews with Astros players"
  },
  {
    "objectID": "posts/10_Scandal/10_Scandal.html#pitch-type",
    "href": "posts/10_Scandal/10_Scandal.html#pitch-type",
    "title": "10: Scandals",
    "section": "Pitch Type",
    "text": "Pitch Type\n\nanalysis credit: Fangraphs"
  },
  {
    "objectID": "posts/10_Scandal/10_Scandal.html#splits",
    "href": "posts/10_Scandal/10_Scandal.html#splits",
    "title": "10: Scandals",
    "section": "Splits",
    "text": "Splits\n\nanalysis credit: Fangraphs\nAlso: highest-leverage at-bats"
  },
  {
    "objectID": "posts/10_Scandal/10_Scandal.html#splits-1",
    "href": "posts/10_Scandal/10_Scandal.html#splits-1",
    "title": "10: Scandals",
    "section": "Splits",
    "text": "Splits\n\nanalysis credit: Fangraphs"
  },
  {
    "objectID": "posts/10_Scandal/10_Scandal.html#references",
    "href": "posts/10_Scandal/10_Scandal.html#references",
    "title": "10: Scandals",
    "section": "References",
    "text": "References\n\nhttps://www.baseball-reference.com/teams/HOU/\nhttps://bleacherreport.com/articles/2862408-mike-fiers-admits-astros-stole-signs-electronically-during-2017-mlb-season\nhttps://www.chicagotribune.com/sports/white-sox/ct-cb-houston-astros-sign-stealing-danny-farquhar-white-sox-20200117-ckfumn2wfzhabbb25ltl24gfb4-story.html https://blogs.fangraphs.com/which-players-might-have-benefited-from-the-astros-sign-stealing/\n\nReddit deep dives:\n\nhttps://old.reddit.com/r/baseball/comments/fdh3iu/astros_cheating_analysis/\nhttps://old.reddit.com/r/baseball/comments/f9csgg/analyzing_astros_trash_can_banging_signal/\nhttps://old.reddit.com/r/baseball/comments/dw1u4g/astros_sign_stealing_video_footage_megathread_for/\nhttps://old.reddit.com/r/baseball/comments/evopl2/adams_im_an_astros_fan_to_understand_the_scope_of/\nhttps://old.reddit.com/r/baseball/comments/exkkoz/i_went_through_the_footage_provided_by_uatadams/"
  },
  {
    "objectID": "posts/11_Confidence_Intervals/11_Confidence_Intervals.html",
    "href": "posts/11_Confidence_Intervals/11_Confidence_Intervals.html",
    "title": "11: Confidence Intervals",
    "section": "",
    "text": "library(\"infer\")\nlibrary(\"moderndive\")\n\nWarning: package 'moderndive' was built under R version 4.2.2\n\nlibrary(\"patchwork\") #easy graph layouts\nlibrary(\"tidyverse\")\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.8     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.1\n✔ readr   2.1.2     ✔ forcats 0.5.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nSource: Statistical Inference via Data Science: A Modern Dive into R and the Tidyverse"
  },
  {
    "objectID": "posts/11_Confidence_Intervals/11_Confidence_Intervals.html#look-at-the-data",
    "href": "posts/11_Confidence_Intervals/11_Confidence_Intervals.html#look-at-the-data",
    "title": "11: Confidence Intervals",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df)\n\n# A tibble: 6 × 48\n  yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n   <dbl> <chr> <chr>  <chr>    <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>  <chr>\n1   1990 NL    ATL    ATL      W         6   162    81    65    97 N      <NA> \n2   1990 AL    BAL    BAL      E         5   161    80    76    85 N      <NA> \n3   1990 AL    BOS    BOS      E         1   162    81    88    74 Y      <NA> \n4   1990 AL    CAL    ANA      W         4   162    81    80    82 N      <NA> \n5   1990 AL    CHA    CHW      W         2   162    80    94    68 N      <NA> \n6   1990 NL    CHN    CHC      E         4   162    81    77    85 N      <NA> \n# … with 36 more variables: LgWin <chr>, WSWin <chr>, R <dbl>, AB <dbl>,\n#   H <dbl>, X2B <dbl>, X3B <dbl>, HR <dbl>, BB <dbl>, SO <dbl>, SB <dbl>,\n#   CS <dbl>, HBP <dbl>, SF <dbl>, RA <dbl>, ER <dbl>, ERA <dbl>, CG <dbl>,\n#   SHO <dbl>, SV <dbl>, IPouts <dbl>, HA <dbl>, HRA <dbl>, BBA <dbl>,\n#   SOA <dbl>, E <dbl>, DP <dbl>, FP <dbl>, name <chr>, park <chr>,\n#   attendance <dbl>, BPF <dbl>, PPF <dbl>, teamIDBR <chr>,\n#   teamIDlahman45 <chr>, teamIDretro <chr>\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df, give.attr = FALSE)\n\nspec_tbl_df [278 × 48] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ yearID        : num [1:278] 1990 1990 1990 1990 1990 1990 1990 1990 1990 1990 ...\n $ lgID          : chr [1:278] \"NL\" \"AL\" \"AL\" \"AL\" ...\n $ teamID        : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ franchID      : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"ANA\" ...\n $ divID         : chr [1:278] \"W\" \"E\" \"E\" \"W\" ...\n $ Rank          : num [1:278] 6 5 1 4 2 4 1 4 3 4 ...\n $ G             : num [1:278] 162 161 162 162 162 162 162 162 162 162 ...\n $ Ghome         : num [1:278] 81 80 81 81 80 81 81 81 81 81 ...\n $ W             : num [1:278] 65 76 88 80 94 77 91 77 79 75 ...\n $ L             : num [1:278] 97 85 74 82 68 85 71 85 83 87 ...\n $ DivWin        : chr [1:278] \"N\" \"N\" \"Y\" \"N\" ...\n $ WCWin         : chr [1:278] NA NA NA NA ...\n $ LgWin         : chr [1:278] \"N\" \"N\" \"N\" \"N\" ...\n $ WSWin         : chr [1:278] \"N\" \"N\" \"N\" \"N\" ...\n $ R             : num [1:278] 682 669 699 690 682 690 693 732 750 573 ...\n $ AB            : num [1:278] 5504 5410 5516 5570 5402 ...\n $ H             : num [1:278] 1376 1328 1502 1448 1393 ...\n $ X2B           : num [1:278] 263 234 298 237 251 240 284 266 241 209 ...\n $ X3B           : num [1:278] 26 22 31 27 44 36 40 41 32 32 ...\n $ HR            : num [1:278] 162 132 106 147 106 136 125 110 172 94 ...\n $ BB            : num [1:278] 473 660 598 566 478 406 466 458 634 548 ...\n $ SO            : num [1:278] 1010 962 795 1000 903 869 913 836 952 997 ...\n $ SB            : num [1:278] 92 94 53 69 140 151 166 107 82 179 ...\n $ CS            : num [1:278] 55 52 52 43 90 50 66 52 57 83 ...\n $ HBP           : num [1:278] 27 40 28 28 36 30 42 29 34 28 ...\n $ SF            : num [1:278] 31 41 44 45 47 51 42 61 41 41 ...\n $ RA            : num [1:278] 821 698 664 706 633 774 597 737 754 656 ...\n $ ER            : num [1:278] 727 644 596 613 581 695 549 676 697 581 ...\n $ ERA           : num [1:278] 4.58 4.04 3.72 3.79 3.61 4.34 3.39 4.26 4.39 3.61 ...\n $ CG            : num [1:278] 17 10 15 21 17 13 14 12 15 12 ...\n $ SHO           : num [1:278] 8 5 13 13 10 7 12 10 12 6 ...\n $ SV            : num [1:278] 30 43 44 42 68 42 50 47 45 37 ...\n $ IPouts        : num [1:278] 4289 4306 4326 4362 4348 ...\n $ HA            : num [1:278] 1527 1445 1439 1482 1313 ...\n $ HRA           : num [1:278] 128 161 92 106 106 121 124 163 154 130 ...\n $ BBA           : num [1:278] 579 537 519 544 548 572 543 518 661 496 ...\n $ SOA           : num [1:278] 938 776 997 944 914 ...\n $ E             : num [1:278] 158 93 123 142 124 124 102 117 131 131 ...\n $ DP            : num [1:278] 133 151 154 186 169 136 126 146 178 124 ...\n $ FP            : num [1:278] 0.974 0.985 0.98 0.978 0.98 0.98 0.983 0.981 0.979 0.978 ...\n $ name          : chr [1:278] \"Atlanta Braves\" \"Baltimore Orioles\" \"Boston Red Sox\" \"California Angels\" ...\n $ park          : chr [1:278] \"Atlanta-Fulton County Stadium\" \"Memorial Stadium\" \"Fenway Park II\" \"Anaheim Stadium\" ...\n $ attendance    : num [1:278] 980129 2415189 2528986 2555688 2002357 ...\n $ BPF           : num [1:278] 105 97 105 97 98 108 105 100 101 97 ...\n $ PPF           : num [1:278] 106 98 105 97 98 108 105 100 102 98 ...\n $ teamIDBR      : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ teamIDlahman45: chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ teamIDretro   : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df)\n\n [1] \"yearID\"         \"lgID\"           \"teamID\"         \"franchID\"      \n [5] \"divID\"          \"Rank\"           \"G\"              \"Ghome\"         \n [9] \"W\"              \"L\"              \"DivWin\"         \"WCWin\"         \n[13] \"LgWin\"          \"WSWin\"          \"R\"              \"AB\"            \n[17] \"H\"              \"X2B\"            \"X3B\"            \"HR\"            \n[21] \"BB\"             \"SO\"             \"SB\"             \"CS\"            \n[25] \"HBP\"            \"SF\"             \"RA\"             \"ER\"            \n[29] \"ERA\"            \"CG\"             \"SHO\"            \"SV\"            \n[33] \"IPouts\"         \"HA\"             \"HRA\"            \"BBA\"           \n[37] \"SOA\"            \"E\"              \"DP\"             \"FP\"            \n[41] \"name\"           \"park\"           \"attendance\"     \"BPF\"           \n[45] \"PPF\"            \"teamIDBR\"       \"teamIDlahman45\" \"teamIDretro\""
  },
  {
    "objectID": "posts/11_Confidence_Intervals/11_Confidence_Intervals.html#one-sample",
    "href": "posts/11_Confidence_Intervals/11_Confidence_Intervals.html#one-sample",
    "title": "11: Confidence Intervals",
    "section": "One Sample",
    "text": "One Sample\n\nHR_sample <- df |> select(HR)\n\n\np1 <- HR_sample |>\n  ggplot(aes(x = HR)) +\n  geom_histogram(binwidth = 5, color = \"black\", fill = \"blue\") +\n  labs(title = \"Distribution of Home Runs\",\n       subtitle = \"Based on a sample of data\",\n       caption = \"Spark 01\") +\n  theme_minimal()\n\n# print\np1"
  },
  {
    "objectID": "posts/11_Confidence_Intervals/11_Confidence_Intervals.html#resampling",
    "href": "posts/11_Confidence_Intervals/11_Confidence_Intervals.html#resampling",
    "title": "11: Confidence Intervals",
    "section": "Resampling",
    "text": "Resampling\nUsing the available sample of data to fabricate another sample is called resampling.\n\nHR_resampled <- HR_sample |>\n  sample_n(replace = TRUE, size = nrow(HR_sample))\n\n\np2 <- HR_resampled |>\n  ggplot(aes(x = HR)) +\n  geom_histogram(binwidth = 5, color = \"black\", fill = \"blue\") +\n  labs(title = \"Distribution of Home Runs\",\n       subtitle = \"Based on a sample of data\",\n       caption = \"Spark 01\") +\n  theme_minimal()\n\n# print\np2\n\n\n\n\n\n# patchwork\np1 + p2"
  },
  {
    "objectID": "posts/11_Confidence_Intervals/11_Confidence_Intervals.html#resampling-many-times",
    "href": "posts/11_Confidence_Intervals/11_Confidence_Intervals.html#resampling-many-times",
    "title": "11: Confidence Intervals",
    "section": "Resampling Many Times",
    "text": "Resampling Many Times\n\nsummary(HR_sample)\n\n       HR       \n Min.   : 68.0  \n 1st Qu.:120.0  \n Median :147.0  \n Mean   :148.7  \n 3rd Qu.:172.0  \n Max.   :264.0  \n\n\nSuppose now that we have each person in a 23-student classroom repeat the act of drawing that home run data with replacement.\n\nHR_resampled_many <- HR_sample |>\n  rep_sample_n(replace = TRUE, reps = 23, size = nrow(HR_sample))\n\n\nHR_resampled_many %>%\n  group_by(replicate) %>%\n  mutate(mean_HR = mean(HR)) %>%\n  ungroup() %>%\n  select(replicate, mean_HR) %>%\n  distinct() %>%\n  ggplot(aes(x = mean_HR)) +\n  geom_histogram(binwidth = 1, color = \"black\", fill = \"blue\") +\n  labs(title = \"Resampling Results\",\n       subtitle = \"N = 23 resamples\",\n       caption = \"Source: Modern Dive\")\n\n\n\n\nOut of curiosity, let us push this process to \\(N = 1337\\) resamples.\n\nHR_resampled_many <- HR_sample |>\n  rep_sample_n(replace = TRUE, reps = 1337, size = nrow(HR_sample))\n\n\nHR_resampled_many %>%\n  group_by(replicate) %>%\n  mutate(mean_HR = mean(HR)) %>%\n  ungroup() %>%\n  select(replicate, mean_HR) %>%\n  distinct() %>%\n  ggplot(aes(x = mean_HR)) +\n  geom_histogram(binwidth = 1, color = \"black\", fill = \"blue\") +\n  labs(title = \"Resampling Results\",\n       subtitle = \"N = 23 resamples\",\n       caption = \"Source: Modern Dive\")"
  },
  {
    "objectID": "posts/13_Clustering/13_Clustering.html",
    "href": "posts/13_Clustering/13_Clustering.html",
    "title": "13: Clustering",
    "section": "",
    "text": "library(\"tidymodels\")\n\nWarning: package 'tidymodels' was built under R version 4.2.2\n\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.0.0 ──\n\n\n✔ broom        1.0.1     ✔ recipes      1.0.3\n✔ dials        1.1.0     ✔ rsample      1.1.0\n✔ dplyr        1.0.9     ✔ tibble       3.1.8\n✔ ggplot2      3.3.6     ✔ tidyr        1.2.0\n✔ infer        1.0.3     ✔ tune         1.0.1\n✔ modeldata    1.0.1     ✔ workflows    1.1.2\n✔ parsnip      1.0.3     ✔ workflowsets 1.0.0\n✔ purrr        0.3.4     ✔ yardstick    1.1.0\n\n\nWarning: package 'broom' was built under R version 4.2.2\n\n\nWarning: package 'dials' was built under R version 4.2.2\n\n\nWarning: package 'infer' was built under R version 4.2.2\n\n\nWarning: package 'modeldata' was built under R version 4.2.2\n\n\nWarning: package 'parsnip' was built under R version 4.2.2\n\n\nWarning: package 'recipes' was built under R version 4.2.2\n\n\nWarning: package 'rsample' was built under R version 4.2.2\n\n\nWarning: package 'tune' was built under R version 4.2.2\n\n\nWarning: package 'workflowsets' was built under R version 4.2.2\n\n\nWarning: package 'yardstick' was built under R version 4.2.2\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::discard() masks scales::discard()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\n✖ recipes::step()  masks stats::step()\n• Learn how to get started at https://www.tidymodels.org/start/\n\nlibrary(\"tidyverse\")\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ readr   2.1.2     ✔ forcats 0.5.1\n✔ stringr 1.4.1     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ readr::col_factor() masks scales::col_factor()\n✖ purrr::discard()    masks scales::discard()\n✖ dplyr::filter()     masks stats::filter()\n✖ stringr::fixed()    masks recipes::fixed()\n✖ dplyr::lag()        masks stats::lag()\n✖ readr::spec()       masks yardstick::spec()\nSource: tidymodels\nhttps://www.tidymodels.org/learn/statistics/k-means/"
  },
  {
    "objectID": "posts/13_Clustering/13_Clustering.html#look-at-the-data",
    "href": "posts/13_Clustering/13_Clustering.html#look-at-the-data",
    "title": "13: Clustering",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df)\n\n# A tibble: 6 × 48\n  yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n   <dbl> <chr> <chr>  <chr>    <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>  <chr>\n1   1990 NL    ATL    ATL      W         6   162    81    65    97 N      <NA> \n2   1990 AL    BAL    BAL      E         5   161    80    76    85 N      <NA> \n3   1990 AL    BOS    BOS      E         1   162    81    88    74 Y      <NA> \n4   1990 AL    CAL    ANA      W         4   162    81    80    82 N      <NA> \n5   1990 AL    CHA    CHW      W         2   162    80    94    68 N      <NA> \n6   1990 NL    CHN    CHC      E         4   162    81    77    85 N      <NA> \n# … with 36 more variables: LgWin <chr>, WSWin <chr>, R <dbl>, AB <dbl>,\n#   H <dbl>, X2B <dbl>, X3B <dbl>, HR <dbl>, BB <dbl>, SO <dbl>, SB <dbl>,\n#   CS <dbl>, HBP <dbl>, SF <dbl>, RA <dbl>, ER <dbl>, ERA <dbl>, CG <dbl>,\n#   SHO <dbl>, SV <dbl>, IPouts <dbl>, HA <dbl>, HRA <dbl>, BBA <dbl>,\n#   SOA <dbl>, E <dbl>, DP <dbl>, FP <dbl>, name <chr>, park <chr>,\n#   attendance <dbl>, BPF <dbl>, PPF <dbl>, teamIDBR <chr>,\n#   teamIDlahman45 <chr>, teamIDretro <chr>\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df, give.attr = FALSE)\n\nspc_tbl_ [278 × 48] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ yearID        : num [1:278] 1990 1990 1990 1990 1990 1990 1990 1990 1990 1990 ...\n $ lgID          : chr [1:278] \"NL\" \"AL\" \"AL\" \"AL\" ...\n $ teamID        : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ franchID      : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"ANA\" ...\n $ divID         : chr [1:278] \"W\" \"E\" \"E\" \"W\" ...\n $ Rank          : num [1:278] 6 5 1 4 2 4 1 4 3 4 ...\n $ G             : num [1:278] 162 161 162 162 162 162 162 162 162 162 ...\n $ Ghome         : num [1:278] 81 80 81 81 80 81 81 81 81 81 ...\n $ W             : num [1:278] 65 76 88 80 94 77 91 77 79 75 ...\n $ L             : num [1:278] 97 85 74 82 68 85 71 85 83 87 ...\n $ DivWin        : chr [1:278] \"N\" \"N\" \"Y\" \"N\" ...\n $ WCWin         : chr [1:278] NA NA NA NA ...\n $ LgWin         : chr [1:278] \"N\" \"N\" \"N\" \"N\" ...\n $ WSWin         : chr [1:278] \"N\" \"N\" \"N\" \"N\" ...\n $ R             : num [1:278] 682 669 699 690 682 690 693 732 750 573 ...\n $ AB            : num [1:278] 5504 5410 5516 5570 5402 ...\n $ H             : num [1:278] 1376 1328 1502 1448 1393 ...\n $ X2B           : num [1:278] 263 234 298 237 251 240 284 266 241 209 ...\n $ X3B           : num [1:278] 26 22 31 27 44 36 40 41 32 32 ...\n $ HR            : num [1:278] 162 132 106 147 106 136 125 110 172 94 ...\n $ BB            : num [1:278] 473 660 598 566 478 406 466 458 634 548 ...\n $ SO            : num [1:278] 1010 962 795 1000 903 869 913 836 952 997 ...\n $ SB            : num [1:278] 92 94 53 69 140 151 166 107 82 179 ...\n $ CS            : num [1:278] 55 52 52 43 90 50 66 52 57 83 ...\n $ HBP           : num [1:278] 27 40 28 28 36 30 42 29 34 28 ...\n $ SF            : num [1:278] 31 41 44 45 47 51 42 61 41 41 ...\n $ RA            : num [1:278] 821 698 664 706 633 774 597 737 754 656 ...\n $ ER            : num [1:278] 727 644 596 613 581 695 549 676 697 581 ...\n $ ERA           : num [1:278] 4.58 4.04 3.72 3.79 3.61 4.34 3.39 4.26 4.39 3.61 ...\n $ CG            : num [1:278] 17 10 15 21 17 13 14 12 15 12 ...\n $ SHO           : num [1:278] 8 5 13 13 10 7 12 10 12 6 ...\n $ SV            : num [1:278] 30 43 44 42 68 42 50 47 45 37 ...\n $ IPouts        : num [1:278] 4289 4306 4326 4362 4348 ...\n $ HA            : num [1:278] 1527 1445 1439 1482 1313 ...\n $ HRA           : num [1:278] 128 161 92 106 106 121 124 163 154 130 ...\n $ BBA           : num [1:278] 579 537 519 544 548 572 543 518 661 496 ...\n $ SOA           : num [1:278] 938 776 997 944 914 ...\n $ E             : num [1:278] 158 93 123 142 124 124 102 117 131 131 ...\n $ DP            : num [1:278] 133 151 154 186 169 136 126 146 178 124 ...\n $ FP            : num [1:278] 0.974 0.985 0.98 0.978 0.98 0.98 0.983 0.981 0.979 0.978 ...\n $ name          : chr [1:278] \"Atlanta Braves\" \"Baltimore Orioles\" \"Boston Red Sox\" \"California Angels\" ...\n $ park          : chr [1:278] \"Atlanta-Fulton County Stadium\" \"Memorial Stadium\" \"Fenway Park II\" \"Anaheim Stadium\" ...\n $ attendance    : num [1:278] 980129 2415189 2528986 2555688 2002357 ...\n $ BPF           : num [1:278] 105 97 105 97 98 108 105 100 101 97 ...\n $ PPF           : num [1:278] 106 98 105 97 98 108 105 100 102 98 ...\n $ teamIDBR      : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ teamIDlahman45: chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n $ teamIDretro   : chr [1:278] \"ATL\" \"BAL\" \"BOS\" \"CAL\" ...\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df)\n\n [1] \"yearID\"         \"lgID\"           \"teamID\"         \"franchID\"      \n [5] \"divID\"          \"Rank\"           \"G\"              \"Ghome\"         \n [9] \"W\"              \"L\"              \"DivWin\"         \"WCWin\"         \n[13] \"LgWin\"          \"WSWin\"          \"R\"              \"AB\"            \n[17] \"H\"              \"X2B\"            \"X3B\"            \"HR\"            \n[21] \"BB\"             \"SO\"             \"SB\"             \"CS\"            \n[25] \"HBP\"            \"SF\"             \"RA\"             \"ER\"            \n[29] \"ERA\"            \"CG\"             \"SHO\"            \"SV\"            \n[33] \"IPouts\"         \"HA\"             \"HRA\"            \"BBA\"           \n[37] \"SOA\"            \"E\"              \"DP\"             \"FP\"            \n[41] \"name\"           \"park\"           \"attendance\"     \"BPF\"           \n[45] \"PPF\"            \"teamIDBR\"       \"teamIDlahman45\" \"teamIDretro\""
  },
  {
    "objectID": "posts/13_Clustering/13_Clustering.html#example-of-clustering-old-code",
    "href": "posts/13_Clustering/13_Clustering.html#example-of-clustering-old-code",
    "title": "13: Clustering",
    "section": "Example of Clustering (old code)",
    "text": "Example of Clustering (old code)\n\ndf_num <- df |>\n  select(H, HR)\nhead(df_num)\n\n# A tibble: 6 × 2\n      H    HR\n  <dbl> <dbl>\n1  1376   162\n2  1328   132\n3  1502   106\n4  1448   147\n5  1393   106\n6  1474   136\n\n\n\n# scatterplot\ndf |>\n  select(H, HR) |>\n  ggplot(aes(x = H, y = HR)) +\n  geom_point() +\n  labs(title = \"MLB Offense\",\n       subtitle = \"1990s\",\n       caption = \"Spark 01\") +\n  theme_minimal()\n\n\n\n\n\n# k-means clustering\nclusters <- df |>\n  select(H, HR) |>\n  kmeans(centers = 5)\n\n\n# extraction\ndf_centers <- data.frame(x1 = clusters$centers[,1],\n                         x2 = clusters$centers[,2])\ndf <- df |>\n  mutate(cluster = clusters$cluster)\n\n\ndf |>\n  ggplot(aes(x = H, y = HR)) +\n  geom_point() +\n  \n  # centers\n  geom_point(aes(x = x1, y = x2),\n             color = \"red\",\n             data = df_centers,\n             size = 5) +\n  \nlabs(title = \"MLB Offense\",\n       subtitle = \"1990s\",\n       caption = \"Spark 01\") +\n  theme_minimal()\n\n\n\n\n\ndf |>\n  ggplot(aes(x = H, y = HR)) +\n  geom_point(aes(color = factor(cluster))) +\n  \nlabs(title = \"MLB Offense\",\n       subtitle = \"1990s\",\n       caption = \"Spark 01\") +\n  theme_minimal()\n\n\n\n\n\nHow many clusters should we use?"
  },
  {
    "objectID": "posts/13_Clustering/13_Clustering.html#clustering-with-tidymodels-modern-code",
    "href": "posts/13_Clustering/13_Clustering.html#clustering-with-tidymodels-modern-code",
    "title": "13: Clustering",
    "section": "Clustering with TidyModels (modern code)",
    "text": "Clustering with TidyModels (modern code)\n\n# remember to use numerical columns\ndf_num <- df |>\n  select(H, HR)\n\n# try k = 1 cluster, k = 2 clusters, etc.\nkclusts <- \n  tibble(k = 1:9) %>%\n  mutate(\n    kclust = map(k, ~kmeans(df_num, .x)),\n    tidied = map(kclust, tidy),\n    glanced = map(kclust, glance),\n    augmented = map(kclust, augment, df_num)\n  )\n\n\n# visualizing 9 possibilities\nkclusts |>\n  unnest(cols = c(augmented)) |>\n  ggplot(aes(x = H, y = HR)) +\n  geom_point(aes(color = .cluster), alpha = 0.75) +\n  facet_wrap( ~ k) +\n  theme_minimal()\n\n\n\n\n\n# Scree plot\nkclusts |>\n  unnest(cols = c(glanced)) |>\n  ggplot(aes(k, tot.withinss)) +\n  geom_line() +\n  geom_point() +\n  labs(title = \"Scree Plot\",\n       subtitle = \"for k-means clustering\",\n       caption = \"Spark 01\",\n       x = \"number of clusters\",\n       y = \"total within SSE\") +\n  scale_x_continuous(breaks = 1:9) +\n  theme_minimal()\n\n\n\n\nAfter finding the “elbow” for the recommended number of clusters\n\n# visualizing clustering\nkclusts |>\n  unnest(cols = c(augmented)) |>\n  filter(k == 3) |> #put number of clusters here\n  ggplot(aes(x = H, y = HR)) +\n  geom_point(aes(color = .cluster), alpha = 0.75) +\n  labs(title = \"MLB Offense\",\n       subtitle = \"1990s\",\n       caption = \"Spark 01\") +\n  theme_minimal()"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html",
    "href": "posts/01_syllabus/01_introductions.html",
    "title": "1: Introduction",
    "section": "",
    "text": "Fall 2023\n\n\n\n\n\n\n\n  \n    \n    \n      section\n      CRN\n      day\n      time\n      room\n    \n  \n  \n    25\n38119\nTuTh\n230 PM to 420 PM\nGRAN 120\n    35\n38322\nTuTh\n1130 AM to 120 PM\nADMIN 265\n    37\n38533\nTuTh\n430 PM to 620 PM\nGRAN 120"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#introducting-the-presenter",
    "href": "posts/01_syllabus/01_introductions.html#introducting-the-presenter",
    "title": "1: Introduction",
    "section": "Introducting the Presenter",
    "text": "Introducting the Presenter\n\n\n\nLecturer: Derek Sollberger\n\nI go by “Derek” or “teacher”\n\nBA in Applied Mathematics, UC Berkeley\nMS in Applied Mathematics, CSULB\nMS in Applied Mathematics, UC Merced"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#introducting-the-presenter-1",
    "href": "posts/01_syllabus/01_introductions.html#introducting-the-presenter-1",
    "title": "1: Introduction",
    "section": "Introducting the Presenter",
    "text": "Introducting the Presenter\n\n\n\n\n\nContinuing Lecturer in Applied Mathematics\n10+ years of teaching at UC Merced\nCourses:\n\nBio 18: Data Science\nBio 175: Biostatistics\nBio 184: Python for Bioinformatics\nMath 32: Probability and Statistics"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#current-research-in-pedagogy",
    "href": "posts/01_syllabus/01_introductions.html#current-research-in-pedagogy",
    "title": "1: Introduction",
    "section": "Current Research in Pedagogy",
    "text": "Current Research in Pedagogy\n\n\n\n\n\nactive learning\ncomputer programming\nflipped classrooms"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#identity-statement",
    "href": "posts/01_syllabus/01_introductions.html#identity-statement",
    "title": "1: Introduction",
    "section": "Identity Statement",
    "text": "Identity Statement\n\n\n\nOriginally from Los Angeles\nMath: easier to understand through graphs\nComputer Programming: years of experience with R, Python, MATLAB, PHP, HTML, etc.\nLearning: drawn to puzzles and manageable tasks\nPersonality: shy, introvert"
  },
  {
    "objectID": "posts/02_Exploring Data/02_exploring_data.html",
    "href": "posts/02_Exploring Data/02_exploring_data.html",
    "title": "02_-_Exploring Data",
    "section": "",
    "text": "The tidyverse suite of packages are streamlined to make data science processes easier. We can load the packages with the library() command.\n\nlibrary(\"tidyverse\")\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "posts/02_Exploring Data/02_exploring_data.html#load-the-tidyverse",
    "href": "posts/02_Exploring Data/02_exploring_data.html#load-the-tidyverse",
    "title": "02_-_Exploring Data",
    "section": "",
    "text": "The tidyverse suite of packages are streamlined to make data science processes easier. We can load the packages with the library() command.\n\nlibrary(\"tidyverse\")\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "posts/02_Exploring Data/02_exploring_data.html#load-the-data",
    "href": "posts/02_Exploring Data/02_exploring_data.html#load-the-data",
    "title": "02_-_Exploring Data",
    "section": "Load the Data",
    "text": "Load the Data\nSince we have CSV files (comma-separated values), the read_csv() command in the readr package will be convenient here. I tend to save data set into a variable df (stands for “data frame”).\nToday’s data set comes from Baseball Reference. In particular, we are looking at the team batting statistics for the 2021 season.\n\ndf &lt;- readr::read_csv(\"baseball_2021_batting.csv\")\n\nRows: 32 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): Tm\ndbl (28): #Bat, BatAge, R/G, G, PA, AB, R, H, 2B, 3B, HR, RBI, SB, CS, BB, S...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "posts/02_Exploring Data/02_exploring_data.html#look-at-the-data",
    "href": "posts/02_Exploring Data/02_exploring_data.html#look-at-the-data",
    "title": "02_-_Exploring Data",
    "section": "Look at the Data",
    "text": "Look at the Data\nOne way to get a quick look at the data set is with the head() command (outputs the first few rows and columns).\n\nhead(df)\n\n# A tibble: 6 × 29\n  Tm         `#Bat` BatAge `R/G`     G    PA    AB     R     H  `2B`  `3B`    HR\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Arizona D…     64   28.9  4.19   162  6144  5489   679  1297   308    31   144\n2 Atlanta B…     56   28.2  4.91   161  6056  5363   790  1307   269    20   239\n3 Baltimore…     62   26.7  4.07   162  5983  5420   659  1296   266    15   195\n4 Boston Re…     56   28    5.12   162  6122  5495   829  1434   330    23   219\n5 Chicago C…     69   29.1  4.35   162  5972  5306   705  1255   225    26   210\n6 Chicago W…     47   28    4.91   162  6084  5357   796  1373   275    22   190\n# ℹ 17 more variables: RBI &lt;dbl&gt;, SB &lt;dbl&gt;, CS &lt;dbl&gt;, BB &lt;dbl&gt;, SO &lt;dbl&gt;,\n#   BA &lt;dbl&gt;, OBP &lt;dbl&gt;, SLG &lt;dbl&gt;, OPS &lt;dbl&gt;, `OPS+` &lt;dbl&gt;, TB &lt;dbl&gt;,\n#   GDP &lt;dbl&gt;, HBP &lt;dbl&gt;, SH &lt;dbl&gt;, SF &lt;dbl&gt;, IBB &lt;dbl&gt;, LOB &lt;dbl&gt;\n\n\nWe can also look at the structure of a data frame with the str() command. In particular, this view allows us to quickly see which variables are numerical and which are categorical.\n\nstr(df, give.attr = FALSE)\n\nspc_tbl_ [32 × 29] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Tm    : chr [1:32] \"Arizona Diamondbacks\" \"Atlanta Braves\" \"Baltimore Orioles\" \"Boston Red Sox\" ...\n $ #Bat  : num [1:32] 64 56 62 56 69 47 55 48 45 49 ...\n $ BatAge: num [1:32] 28.9 28.2 26.7 28 29.1 28 28.9 26.7 28.1 28.1 ...\n $ R/G   : num [1:32] 4.19 4.91 4.07 5.12 4.35 4.91 4.85 4.43 4.59 4.3 ...\n $ G     : num [1:32] 162 161 162 162 162 162 162 162 161 162 ...\n $ PA    : num [1:32] 6144 6056 5983 6122 5972 ...\n $ AB    : num [1:32] 5489 5363 5420 5495 5306 ...\n $ R     : num [1:32] 679 790 659 829 705 796 786 717 739 697 ...\n $ H     : num [1:32] 1297 1307 1296 1434 1255 ...\n $ 2B    : num [1:32] 308 269 266 330 225 275 295 248 275 236 ...\n $ 3B    : num [1:32] 31 20 15 23 26 22 13 22 34 37 ...\n $ HR    : num [1:32] 144 239 195 219 210 190 222 203 182 179 ...\n $ RBI   : num [1:32] 644 762 632 783 672 757 756 686 709 675 ...\n $ SB    : num [1:32] 43 59 54 40 86 57 36 109 76 88 ...\n $ CS    : num [1:32] 16 19 23 21 37 20 24 17 23 25 ...\n $ BB    : num [1:32] 537 549 451 512 502 586 553 453 491 490 ...\n $ SO    : num [1:32] 1465 1453 1454 1386 1596 ...\n $ BA    : num [1:32] 0.236 0.244 0.239 0.261 0.237 0.256 0.249 0.238 0.249 0.242 ...\n $ OBP   : num [1:32] 0.309 0.319 0.304 0.328 0.312 0.336 0.328 0.303 0.317 0.308 ...\n $ SLG   : num [1:32] 0.382 0.435 0.402 0.449 0.407 0.422 0.431 0.407 0.414 0.399 ...\n $ OPS   : num [1:32] 0.692 0.754 0.705 0.777 0.719 0.758 0.759 0.71 0.731 0.707 ...\n $ OPS+  : num [1:32] 86 98 91 106 93 106 95 94 87 95 ...\n $ TB    : num [1:32] 2099 2333 2177 2467 2162 ...\n $ GDP   : num [1:32] 99 81 105 100 133 139 129 105 98 113 ...\n $ HBP   : num [1:32] 54 67 65 61 92 78 105 64 58 44 ...\n $ SH    : num [1:32] 32 32 14 10 40 24 35 20 48 17 ...\n $ SF    : num [1:32] 28 43 31 42 30 39 45 36 36 50 ...\n $ IBB   : num [1:32] 24 36 12 22 17 10 22 18 24 8 ...\n $ LOB   : num [1:32] 1152 1072 1046 1093 1019 ...\n\n\nAnother convenient tool for our programming purposes is looking at the column names (i.e. variable names that we need to type later)\n\ncolnames(df)\n\n [1] \"Tm\"     \"#Bat\"   \"BatAge\" \"R/G\"    \"G\"      \"PA\"     \"AB\"     \"R\"     \n [9] \"H\"      \"2B\"     \"3B\"     \"HR\"     \"RBI\"    \"SB\"     \"CS\"     \"BB\"    \n[17] \"SO\"     \"BA\"     \"OBP\"    \"SLG\"    \"OPS\"    \"OPS+\"   \"TB\"     \"GDP\"   \n[25] \"HBP\"    \"SH\"     \"SF\"     \"IBB\"    \"LOB\""
  },
  {
    "objectID": "posts/02_Exploring Data/02_exploring_data.html#measures-of-centrality",
    "href": "posts/02_Exploring Data/02_exploring_data.html#measures-of-centrality",
    "title": "02_-_Exploring Data",
    "section": "Measures of Centrality",
    "text": "Measures of Centrality\nNow let us practice computing means and medians of some of the numerical data.\n\nmean(df$HR)\n\n[1] 377.6875\n\n\nDuring the 2021 season, MLB teams hit about 378 home runs on average.\n\nmedian(df$HR)\n\n[1] 198\n\n\nDuring the 2021 season, the median number of home runs per team was 198.\n\nmean(df$SB)\n\n[1] 140.625\n\n\nDuring the 2021 season, MLB teams stole about 141 bases on average.\n\nmedian(df$SB)\n\n[1] 75\n\n\nDuring the 2021 season, the median number of stolen bases per team was 75."
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#sports-analytics",
    "href": "posts/01_syllabus/01_introductions.html#sports-analytics",
    "title": "1: Introduction",
    "section": "",
    "text": "Fall 2023\n\n\n\n\n\n\n\n  \n    \n    \n      section\n      CRN\n      day\n      time\n      room\n    \n  \n  \n    25\n38119\nTuTh\n230 PM to 420 PM\nGRAN 120\n    35\n38322\nTuTh\n1130 AM to 120 PM\nADMIN 265\n    37\n38533\nTuTh\n430 PM to 620 PM\nGRAN 120"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#lecturer",
    "href": "posts/01_syllabus/01_introductions.html#lecturer",
    "title": "1: Introduction",
    "section": "Lecturer",
    "text": "Lecturer\n\n\n\n\n\nContinuing Lecturer in Applied Mathematics\n10+ years of teaching at UC Merced\nCourses:\n\nBio 18: Data Science\nBio 175: Biostatistics\nBio 184: Python for Bioinformatics\nMath 32: Probability and Statistics\nSpark 10: Sports Analytics"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#before-lecture",
    "href": "posts/01_syllabus/01_introductions.html#before-lecture",
    "title": "1: Introduction",
    "section": "Before Lecture",
    "text": "Before Lecture\n\n5 percent of semester grade\nreview or preview of statistics ideas\nmust be completed before class\nmay be repeated until correct\nlowest 2 scores dropped"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#essays",
    "href": "posts/01_syllabus/01_introductions.html#essays",
    "title": "1: Introduction",
    "section": "Essays",
    "text": "Essays\n\n20 percent of semester grade\nmost essays will be assigned in segments\n\ntopic proposal\nrough draft\nfinal version\n\none-page maximum per essay\nlowest 2 scores dropped\n\n\n\n\n\n\n\nGrading Rubric\n\n\n\n\n\nEssays—the ones deemed ‘final’—will be graded with the following rubric.\n\n\n\ngrading rubric"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#grammar-review",
    "href": "posts/01_syllabus/01_introductions.html#grammar-review",
    "title": "1: Introduction",
    "section": "Grammar Review",
    "text": "Grammar Review\n\n5 percent of semester grade\nreview of elementary English grammar\nmay be repeated until correct\nlowest 2 scores dropped"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#learnr-assignments",
    "href": "posts/01_syllabus/01_introductions.html#learnr-assignments",
    "title": "1: Introduction",
    "section": "LearnR Assignments",
    "text": "LearnR Assignments\n\n20 percent of semester grade\nThis is where the computer programming learning takes place\nApps are designed to give instant feedback\nlowest score dropped"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#grading-rubric",
    "href": "posts/01_syllabus/01_introductions.html#grading-rubric",
    "title": "1: Introduction",
    "section": "Grading Rubric",
    "text": "Grading Rubric\nEssays—the ones deemed ‘final’—will be graded with the following rubric.\n\n\n\ngrading rubric\n\n\n:::"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#collaboration",
    "href": "posts/01_syllabus/01_introductions.html#collaboration",
    "title": "1: Introduction",
    "section": "Collaboration",
    "text": "Collaboration\n\n25 percent of semester grade\nThis is where the data science learning takes place\nstudents will be present and active in class\nsports groups will work on assigned data-driven tasks"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#presentation",
    "href": "posts/01_syllabus/01_introductions.html#presentation",
    "title": "1: Introduction",
    "section": "Presentation",
    "text": "Presentation\n\n25 percent of semester grade\nsports groups will turn in deliverables (code output)\nsports groups will present their findings and progress weekly\naudience members will provide feedback"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#administrative",
    "href": "posts/01_syllabus/01_introductions.html#administrative",
    "title": "1: Introduction",
    "section": "Administrative",
    "text": "Administrative\n\n\n\n\n\n\nProgram Learning Outcomes\n\n\n\n\n\nAs aligned with the mission of the General Education Program at UC Merced, this Spark section meets the following PLOs:\n\nLife at the Research University: Asking Questions\nReasoning: Thinking Critically\nCommunication: Explaining and Persuading\n\n\n\n\n\n\n\n\n\n\nCourse Learning Outcomes\n\n\n\n\n\n\nUse descriptive statistics to organize, summarize, and analyze data.\nObtain substantial amounts of data about sports athletes and franchises\nArgue about the validity and value of sports metrics\nOrganize information into engaging narratives\n\n\n\n\n\n\n\n\n\n\nStudent Accessibility Services\n\n\n\n\n\nUniversity of California, Merced is committed to creating learning environments that are accessible to all. If you anticipate or experience physical or academic barriers based on a disability, please feel welcome to contact me privately so we can discuss options. In addition, please contact Student Accessibility Services (SAS) at (209) 228-6996 or access@ucmerced.edu as soon as possible to explore reasonable accommodations. All accommodations must have prior approval from Student Accessibility Services on the basis of appropriate documentation.\nIf you anticipate or experience barriers due to pregnancy, temporary medical condition, or injury, please feel welcome to contact me so we can discuss options. You are encouraged to contact the Dean of Students for support and resources at (209) 228-3633 or https://studentaffairs.ucmerced.edu/dean-students.\n\n\n\n\n\n\n\n\n\nAcademic Integrity Policy\n\n\n\n\n\nAcademic integrity is the foundation of an academic community and without it none of the educational or research goals of the university can be achieved. All members of the community are responsible for its academic integrity. Existing policies forbid cheating on examinations, plagiarism and other forms of academic dishonesty. The UC Merced Academic Honesty Policy can be found on the Student Conduct website. Infractions against academic integrity will incur consequences such as an “F” on the assignment/exam and/or a report to the Academic Senate (http://studentconduct.ucmerced.edu)"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#cooperative-classroom",
    "href": "posts/01_syllabus/01_introductions.html#cooperative-classroom",
    "title": "1: Introduction",
    "section": "Cooperative Classroom",
    "text": "Cooperative Classroom\nLearning in a cooperative environment should be stimulating, demanding, and fair. Because this approach to learning is different from the competitive classroom structure that many other courses used to be based on, it is important for us to be clear about mutual expectations. Below are my expectations for students in this class. This set of expectations is intended to maximize debate and exchange of ideas in an atmosphere of mutual respect while preserving individual ownership of ideas and written words. If you feel you do not understand or cannot agree to these expectations, you should discuss this with your instructor and classmates.\n\nStudents are expected to work cooperatively with other members of the class and show respect for the ideas and contributions of other people.\nWhen working as part of a group, students should strive to be good contributors to the group, listen to others, not dominate, and recognize the contributions of others. Students should try to ensure that everyone in the group is welcome to contribute and recognize that everyone contributes in different ways to a group process.\nStudents should explore data, make observations, and develop inferences as part of a group. If you use material from published sources, you must provide appropriate attribution.\n\n\n\n(Students will be asked to acknowledge this document in an online form.)\nThis document has been adapted from Scientific Teaching by Jo Handelsman, Sarah Miller, and Christine Pfund\n\n\n\n\nScientific Teaching"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#pep-talk",
    "href": "posts/01_syllabus/01_introductions.html#pep-talk",
    "title": "1: Introduction",
    "section": "Pep Talk",
    "text": "Pep Talk\nLearning R can be difficult at first—it is like learning a new language, just like Spanish, French, or Chinese. Hadley Wickham—the chief data scientist at RStudio and the author of some amazing R packages you will be using like ggplot2—made this wise observation:\n\n\n\n\n\n\nWisdom from Hadley Wickham\n\n\n\n\n\nIt’s easy when you start out programming to get really frustrated and think, “Oh it’s me, I’m really stupid,” or, “I’m not made out to program.” But, that is absolutely not the case. Everyone gets frustrated. I still get frustrated occasionally when writing R code. It’s just a natural part of programming. So, it happens to everyone and gets less and less over time. Don’t blame yourself. Just take a break, do something fun, and then come back and try again later.\n\n\n\nIf you are finding yourself taking way too long hitting your head against a wall and not understanding, take a break, talk to classmates, ask questions … e-mail [Derek], etc. I promise you can do this.\n—Andrew Heiss, Georgia State University"
  },
  {
    "objectID": "posts/01_syllabus/01_introductions.html#inclusion-statement",
    "href": "posts/01_syllabus/01_introductions.html#inclusion-statement",
    "title": "1: Introduction",
    "section": "Inclusion Statement",
    "text": "Inclusion Statement\nI value all students regardless of their background, country of origin, race, religion, ethnicity, gender, sexual orientation, disability status, etc. and am committed to providing a climate of excellence and inclusiveness within all aspects of the course. If there are aspects of your culture or identity that you would like to share with me as they relate to your success in this class, I am happy to meet to discuss. Likewise, if you have any concerns in this area or facing any special issues or challenges, you are encouraged to discuss the matter with me (set up a meeting by e-mail) with an assurance of full confidentiality (only exception being mandatory reporting of academic integrity code violations or sexual harassment)."
  }
]